
APP_9_DISTANCE_MEASUREMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000590e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  0000590e  000059a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800190  00800190  00005ad2  2**0
                  ALLOC
  3 .stab         00004188  00000000  00000000  00005ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001292  00000000  00000000  00009c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000aeee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000b2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000d8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000eda2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000100b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00010597  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 1d 2a 	jmp	0x543a	; 0x543a <__vector_4>
      14:	0c 94 ea 29 	jmp	0x53d4	; 0x53d4 <__vector_5>
      18:	0c 94 85 28 	jmp	0x510a	; 0x510a <__vector_6>
      1c:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <__vector_7>
      20:	0c 94 eb 28 	jmp	0x51d6	; 0x51d6 <__vector_8>
      24:	0c 94 1e 29 	jmp	0x523c	; 0x523c <__vector_9>
      28:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__vector_10>
      2c:	0c 94 ee 26 	jmp	0x4ddc	; 0x4ddc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 2b 	call	0x5788	; 0x5788 <main>
      8a:	0c 94 85 2c 	jmp	0x590a	; 0x590a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4e 2c 	jmp	0x589c	; 0x589c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5a 2c 	jmp	0x58b4	; 0x58b4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5a 2c 	jmp	0x58b4	; 0x58b4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4e 2c 	jmp	0x589c	; 0x589c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5a 2c 	jmp	0x58b4	; 0x58b4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5a 2c 	jmp	0x58b4	; 0x58b4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5a 2c 	jmp	0x58b4	; 0x58b4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 76 2c 	jmp	0x58ec	; 0x58ec <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 57 2c 	jmp	0x58ae	; 0x58ae <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 73 2c 	jmp	0x58e6	; 0x58e6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 5e 2c 	jmp	0x58bc	; 0x58bc <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 7a 2c 	jmp	0x58f4	; 0x58f4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 72 2c 	jmp	0x58e4	; 0x58e4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 58       	subi	r30, 0x88	; 136
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <DIO_void_set_port_dir>:


/* implementing the driver functions  */
/* set Portx Direction Function       */

void DIO_void_set_port_dir(u8 copy_u8_portID, u8 port_copy_dir){
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <DIO_void_set_port_dir+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6a 83       	std	Y+2, r22	; 0x02
	 *  Also general rule INPUT --> 0 // OUTPUT --> 1
	 *
	 *
	 */

	*(DIO_DDRx[copy_u8_portID]) = port_copy_dir;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	fc 01       	movw	r30, r24
     f04:	e0 58       	subi	r30, 0x80	; 128
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	01 90       	ld	r0, Z+
     f0a:	f0 81       	ld	r31, Z
     f0c:	e0 2d       	mov	r30, r0
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	80 83       	st	Z, r24

}
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <DIO_void_set_pin_dir>:

void DIO_void_set_pin_dir(u8 copy_u8_portID, u8 copy_u8_pinID, u8 pin_copy_dir){
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	00 d0       	rcall	.+0      	; 0xf22 <DIO_void_set_pin_dir+0x6>
     f22:	0f 92       	push	r0
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	6a 83       	std	Y+2, r22	; 0x02
     f2c:	4b 83       	std	Y+3, r20	; 0x03
	 *  pin_copy_dir using the predefined macro INPUT //OUTPUT
	 *
	 *
	 */

	assign_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID,pin_copy_dir);
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	29 f5       	brne	.+74     	; 0xf7e <DIO_void_set_pin_dir+0x62>
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	fc 01       	movw	r30, r24
     f40:	e0 58       	subi	r30, 0x80	; 128
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	a0 81       	ld	r26, Z
     f46:	b1 81       	ldd	r27, Z+1	; 0x01
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	e0 58       	subi	r30, 0x80	; 128
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	01 90       	ld	r0, Z+
     f5a:	f0 81       	ld	r31, Z
     f5c:	e0 2d       	mov	r30, r0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_void_set_pin_dir+0x58>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_void_set_pin_dir+0x54>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	25 c0       	rjmp	.+74     	; 0xfc8 <DIO_void_set_pin_dir+0xac>
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	fc 01       	movw	r30, r24
     f8a:	e0 58       	subi	r30, 0x80	; 128
     f8c:	fe 4f       	sbci	r31, 0xFE	; 254
     f8e:	a0 81       	ld	r26, Z
     f90:	b1 81       	ldd	r27, Z+1	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	fc 01       	movw	r30, r24
     f9e:	e0 58       	subi	r30, 0x80	; 128
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	01 90       	ld	r0, Z+
     fa4:	f0 81       	ld	r31, Z
     fa6:	e0 2d       	mov	r30, r0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_void_set_pin_dir+0xa2>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_void_set_pin_dir+0x9e>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24

}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <DIO_void_port_pullup>:

void DIO_void_port_pullup(u8 copy_u8_portID){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	89 83       	std	Y+1, r24	; 0x01
	 *  so that is what the function does
	 *  using the pullup for any button prevents the floating effect
	 *
	 *
	 */
	*(DIO_DDRx[copy_u8_portID]) = INPUT;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	fc 01       	movw	r30, r24
     fec:	e0 58       	subi	r30, 0x80	; 128
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	01 90       	ld	r0, Z+
     ff2:	f0 81       	ld	r31, Z
     ff4:	e0 2d       	mov	r30, r0
     ff6:	10 82       	st	Z, r1
	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 2f       	mov	r24, r24
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	fc 01       	movw	r30, r24
    1004:	e8 57       	subi	r30, 0x78	; 120
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	01 90       	ld	r0, Z+
    100a:	f0 81       	ld	r31, Z
    100c:	e0 2d       	mov	r30, r0
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	80 83       	st	Z, r24
}
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <DIO_void_pin_pullup>:

void DIO_void_pin_pullup(u8 copy_u8_portID, u8 copy_u8_pinID){
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <DIO_void_pin_pullup+0x6>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
	/*  the function works as the one that set pullup for the whole port
	 *
	 *
	 */

	clear_Bit(*(DIO_DDRx[copy_u8_portID]),copy_u8_pinID);
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	fc 01       	movw	r30, r24
    1034:	e0 58       	subi	r30, 0x80	; 128
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
    1038:	a0 81       	ld	r26, Z
    103a:	b1 81       	ldd	r27, Z+1	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	fc 01       	movw	r30, r24
    1048:	e0 58       	subi	r30, 0x80	; 128
    104a:	fe 4f       	sbci	r31, 0xFE	; 254
    104c:	01 90       	ld	r0, Z+
    104e:	f0 81       	ld	r31, Z
    1050:	e0 2d       	mov	r30, r0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_void_pin_pullup+0x4c>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	2a 95       	dec	r18
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_void_pin_pullup+0x48>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	fc 01       	movw	r30, r24
    107c:	e8 57       	subi	r30, 0x78	; 120
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	a0 81       	ld	r26, Z
    1082:	b1 81       	ldd	r27, Z+1	; 0x01
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	fc 01       	movw	r30, r24
    1090:	e8 57       	subi	r30, 0x78	; 120
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	01 90       	ld	r0, Z+
    1096:	f0 81       	ld	r31, Z
    1098:	e0 2d       	mov	r30, r0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_void_pin_pullup+0x96>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_void_pin_pullup+0x92>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24

}
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <DIO_void_set_port>:

void DIO_void_set_port(u8 copy_u8_portID){
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	0f 92       	push	r0
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = PORT_MAX;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	88 2f       	mov	r24, r24
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	fc 01       	movw	r30, r24
    10da:	e8 57       	subi	r30, 0x78	; 120
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	01 90       	ld	r0, Z+
    10e0:	f0 81       	ld	r31, Z
    10e2:	e0 2d       	mov	r30, r0
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
    10e6:	80 83       	st	Z, r24

}
    10e8:	0f 90       	pop	r0
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DIO_void_clear_port>:

void DIO_void_clear_port(u8 copy_u8_portID){
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	0f 92       	push	r0
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) = LOW;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	fc 01       	movw	r30, r24
    1108:	e8 57       	subi	r30, 0x78	; 120
    110a:	fe 4f       	sbci	r31, 0xFE	; 254
    110c:	01 90       	ld	r0, Z+
    110e:	f0 81       	ld	r31, Z
    1110:	e0 2d       	mov	r30, r0
    1112:	10 82       	st	Z, r1

}
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <DIO_void_assign_port>:

void DIO_void_assign_port(u8 copy_u8_portID, u8 copy_value){
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_void_assign_port+0x6>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 */



	*(DIO_PORTx[copy_u8_portID]) = copy_value;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	fc 01       	movw	r30, r24
    1136:	e8 57       	subi	r30, 0x78	; 120
    1138:	fe 4f       	sbci	r31, 0xFE	; 254
    113a:	01 90       	ld	r0, Z+
    113c:	f0 81       	ld	r31, Z
    113e:	e0 2d       	mov	r30, r0
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	80 83       	st	Z, r24

}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <DIO_void_toggle_port>:

void DIO_void_toggle_port(u8 copy_u8_portID){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	89 83       	std	Y+1, r24	; 0x01
	 *
	 *
	 */


	*(DIO_PORTx[copy_u8_portID]) ^= PORT_MAX;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	fc 01       	movw	r30, r24
    1166:	e8 57       	subi	r30, 0x78	; 120
    1168:	fe 4f       	sbci	r31, 0xFE	; 254
    116a:	a0 81       	ld	r26, Z
    116c:	b1 81       	ldd	r27, Z+1	; 0x01
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	fc 01       	movw	r30, r24
    117a:	e8 57       	subi	r30, 0x78	; 120
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	01 90       	ld	r0, Z+
    1180:	f0 81       	ld	r31, Z
    1182:	e0 2d       	mov	r30, r0
    1184:	80 81       	ld	r24, Z
    1186:	80 95       	com	r24
    1188:	8c 93       	st	X, r24
}
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_void_set_pin>:

void DIO_void_set_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_void_set_pin+0x6>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	set_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	fc 01       	movw	r30, r24
    11ac:	e8 57       	subi	r30, 0x78	; 120
    11ae:	fe 4f       	sbci	r31, 0xFE	; 254
    11b0:	a0 81       	ld	r26, Z
    11b2:	b1 81       	ldd	r27, Z+1	; 0x01
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	fc 01       	movw	r30, r24
    11c0:	e8 57       	subi	r30, 0x78	; 120
    11c2:	fe 4f       	sbci	r31, 0xFE	; 254
    11c4:	01 90       	ld	r0, Z+
    11c6:	f0 81       	ld	r31, Z
    11c8:	e0 2d       	mov	r30, r0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_void_set_pin+0x4e>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_void_set_pin+0x4a>
    11e4:	84 2b       	or	r24, r20
    11e6:	8c 93       	st	X, r24
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <DIO_void_clear_pin>:

void DIO_void_clear_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DIO_void_clear_pin+0x6>
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	clear_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	fc 01       	movw	r30, r24
    120c:	e8 57       	subi	r30, 0x78	; 120
    120e:	fe 4f       	sbci	r31, 0xFE	; 254
    1210:	a0 81       	ld	r26, Z
    1212:	b1 81       	ldd	r27, Z+1	; 0x01
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	fc 01       	movw	r30, r24
    1220:	e8 57       	subi	r30, 0x78	; 120
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
    1224:	01 90       	ld	r0, Z+
    1226:	f0 81       	ld	r31, Z
    1228:	e0 2d       	mov	r30, r0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_void_clear_pin+0x4e>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_void_clear_pin+0x4a>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
}
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <DIO_void_assign_pin>:

void DIO_void_assign_pin(u8 copy_u8_portID,u8 copy_u8_pinID ,u8 copy_value){
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <DIO_void_assign_pin+0x6>
    125a:	0f 92       	push	r0
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	6a 83       	std	Y+2, r22	; 0x02
    1264:	4b 83       	std	Y+3, r20	; 0x03
	 *
	 */



	assign_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID,copy_value);
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	29 f5       	brne	.+74     	; 0x12b6 <DIO_void_assign_pin+0x62>
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	fc 01       	movw	r30, r24
    1278:	e8 57       	subi	r30, 0x78	; 120
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	a0 81       	ld	r26, Z
    127e:	b1 81       	ldd	r27, Z+1	; 0x01
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	fc 01       	movw	r30, r24
    128c:	e8 57       	subi	r30, 0x78	; 120
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	01 90       	ld	r0, Z+
    1292:	f0 81       	ld	r31, Z
    1294:	e0 2d       	mov	r30, r0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_void_assign_pin+0x58>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_void_assign_pin+0x54>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	25 c0       	rjmp	.+74     	; 0x1300 <DIO_void_assign_pin+0xac>
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	fc 01       	movw	r30, r24
    12c2:	e8 57       	subi	r30, 0x78	; 120
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
    12c6:	a0 81       	ld	r26, Z
    12c8:	b1 81       	ldd	r27, Z+1	; 0x01
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	fc 01       	movw	r30, r24
    12d6:	e8 57       	subi	r30, 0x78	; 120
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	01 90       	ld	r0, Z+
    12dc:	f0 81       	ld	r31, Z
    12de:	e0 2d       	mov	r30, r0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_void_assign_pin+0xa2>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_void_assign_pin+0x9e>
    12fa:	80 95       	com	r24
    12fc:	84 23       	and	r24, r20
    12fe:	8c 93       	st	X, r24
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <DIO_void_toggle_pin>:

void DIO_void_toggle_pin(u8 copy_u8_portID , u8 copy_u8_pinID){
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <DIO_void_toggle_pin+0x6>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	toggle_Bit(*(DIO_PORTx[copy_u8_portID]),copy_u8_pinID);
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	fc 01       	movw	r30, r24
    1326:	e8 57       	subi	r30, 0x78	; 120
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	a0 81       	ld	r26, Z
    132c:	b1 81       	ldd	r27, Z+1	; 0x01
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	fc 01       	movw	r30, r24
    133a:	e8 57       	subi	r30, 0x78	; 120
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	01 90       	ld	r0, Z+
    1340:	f0 81       	ld	r31, Z
    1342:	e0 2d       	mov	r30, r0
    1344:	80 81       	ld	r24, Z
    1346:	48 2f       	mov	r20, r24
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 2e       	mov	r0, r18
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_void_toggle_pin+0x4e>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <DIO_void_toggle_pin+0x4a>
    135e:	84 27       	eor	r24, r20
    1360:	8c 93       	st	X, r24

}
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <DIO_u8_get_port>:

u8 DIO_u8_get_port(u8 copy_u8_portID){
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01
	 *  1 byte data
	 */



	return *(DIO_PINx[copy_u8_portID]);
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	fc 01       	movw	r30, r24
    1384:	e8 58       	subi	r30, 0x88	; 136
    1386:	fe 4f       	sbci	r31, 0xFE	; 254
    1388:	01 90       	ld	r0, Z+
    138a:	f0 81       	ld	r31, Z
    138c:	e0 2d       	mov	r30, r0
    138e:	80 81       	ld	r24, Z
}
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <DIO_u8_get_pin>:

u8 DIO_u8_get_pin(u8 copy_u8_portID, u8 copy_u8_pinID){
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <DIO_u8_get_pin+0x6>
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	6a 83       	std	Y+2, r22	; 0x02
	 *
	 *
	 */


	return get_Bit(*(DIO_PINx[copy_u8_portID]),copy_u8_pinID);
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	fc 01       	movw	r30, r24
    13b2:	e8 58       	subi	r30, 0x88	; 136
    13b4:	fe 4f       	sbci	r31, 0xFE	; 254
    13b6:	01 90       	ld	r0, Z+
    13b8:	f0 81       	ld	r31, Z
    13ba:	e0 2d       	mov	r30, r0
    13bc:	80 81       	ld	r24, Z
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_u8_get_pin+0x38>
    13cc:	55 95       	asr	r21
    13ce:	47 95       	ror	r20
    13d0:	8a 95       	dec	r24
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_u8_get_pin+0x34>
    13d4:	ca 01       	movw	r24, r20
    13d6:	81 70       	andi	r24, 0x01	; 1
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <array_Swap>:
#include "../Drivers/HAL/LCD/LCD_Private.h"
#include "../Drivers/HAL/LCD/LCD_Config.h"
#include "LCD_Interface.h"


static void array_Swap(u8* copy_pu8_arr, u8 copy_length){
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <array_Swap+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <array_Swap+0x8>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <array_Swap+0xa>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	9d 83       	std	Y+5, r25	; 0x05
    13f2:	8c 83       	std	Y+4, r24	; 0x04
    13f4:	6e 83       	std	Y+6, r22	; 0x06
	 *
	 *
	 */


	u8 start = 0;
    13f6:	1b 82       	std	Y+3, r1	; 0x03
	u8 end = copy_length - 1;
    13f8:	8e 81       	ldd	r24, Y+6	; 0x06
    13fa:	81 50       	subi	r24, 0x01	; 1
    13fc:	8a 83       	std	Y+2, r24	; 0x02
    13fe:	2c c0       	rjmp	.+88     	; 0x1458 <array_Swap+0x76>

	while(start < end){

		u8 temp = copy_pu8_arr[start];
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	9d 81       	ldd	r25, Y+5	; 0x05
    140a:	fc 01       	movw	r30, r24
    140c:	e2 0f       	add	r30, r18
    140e:	f3 1f       	adc	r31, r19
    1410:	80 81       	ld	r24, Z
    1412:	89 83       	std	Y+1, r24	; 0x01
		copy_pu8_arr[start] = copy_pu8_arr[end];
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	9d 81       	ldd	r25, Y+5	; 0x05
    141e:	dc 01       	movw	r26, r24
    1420:	a2 0f       	add	r26, r18
    1422:	b3 1f       	adc	r27, r19
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	9d 81       	ldd	r25, Y+5	; 0x05
    142e:	fc 01       	movw	r30, r24
    1430:	e2 0f       	add	r30, r18
    1432:	f3 1f       	adc	r31, r19
    1434:	80 81       	ld	r24, Z
    1436:	8c 93       	st	X, r24
		copy_pu8_arr[end] = temp;
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	9d 81       	ldd	r25, Y+5	; 0x05
    1442:	fc 01       	movw	r30, r24
    1444:	e2 0f       	add	r30, r18
    1446:	f3 1f       	adc	r31, r19
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	80 83       	st	Z, r24

		start++;
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	8b 83       	std	Y+3, r24	; 0x03
		end--;
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	81 50       	subi	r24, 0x01	; 1
    1456:	8a 83       	std	Y+2, r24	; 0x02


	u8 start = 0;
	u8 end = copy_length - 1;

	while(start < end){
    1458:	9b 81       	ldd	r25, Y+3	; 0x03
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	98 17       	cp	r25, r24
    145e:	80 f2       	brcs	.-96     	; 0x1400 <array_Swap+0x1e>
	}




}
    1460:	26 96       	adiw	r28, 0x06	; 6
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <power_10>:

s32 power_10(u8 power){
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <power_10+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <power_10+0x8>
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 * do you not use this function outside this driver
	 *
	 */

	s32 result = 1;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	ab 83       	std	Y+3, r26	; 0x03
    1490:	bc 83       	std	Y+4, r27	; 0x04
    1492:	15 c0       	rjmp	.+42     	; 0x14be <power_10+0x4c>

	while(power > 0){

		result *= 10;
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	ab 81       	ldd	r26, Y+3	; 0x03
    149a:	bc 81       	ldd	r27, Y+4	; 0x04
    149c:	2a e0       	ldi	r18, 0x0A	; 10
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <__mulsi3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	9a 83       	std	Y+2, r25	; 0x02
    14b4:	ab 83       	std	Y+3, r26	; 0x03
    14b6:	bc 83       	std	Y+4, r27	; 0x04
		power--;
    14b8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ba:	81 50       	subi	r24, 0x01	; 1
    14bc:	8d 83       	std	Y+5, r24	; 0x05
	 *
	 */

	s32 result = 1;

	while(power > 0){
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	88 23       	and	r24, r24
    14c2:	41 f7       	brne	.-48     	; 0x1494 <power_10+0x22>

		result *= 10;
		power--;
	}

	return result;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	ab 81       	ldd	r26, Y+3	; 0x03
    14ca:	bc 81       	ldd	r27, Y+4	; 0x04
}
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <LCD_write_data_8bit>:

/* 8bit mode functions */


static void LCD_write_data_8bit(u8 copy_data_8bit){
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	e1 97       	sbiw	r28, 0x31	; 49
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	89 ab       	std	Y+49, r24	; 0x31
	 *  function will only be used inside this source file
	 *  do you not use it in your code!
	 *
	 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a8 e4       	ldi	r26, 0x48	; 72
    150c:	b2 e4       	ldi	r27, 0x42	; 66
    150e:	8d a7       	std	Y+45, r24	; 0x2d
    1510:	9e a7       	std	Y+46, r25	; 0x2e
    1512:	af a7       	std	Y+47, r26	; 0x2f
    1514:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1516:	6d a5       	ldd	r22, Y+45	; 0x2d
    1518:	7e a5       	ldd	r23, Y+46	; 0x2e
    151a:	8f a5       	ldd	r24, Y+47	; 0x2f
    151c:	98 a9       	ldd	r25, Y+48	; 0x30
    151e:	2b ea       	ldi	r18, 0xAB	; 171
    1520:	3a ea       	ldi	r19, 0xAA	; 170
    1522:	4a e2       	ldi	r20, 0x2A	; 42
    1524:	50 e4       	ldi	r21, 0x40	; 64
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	89 a7       	std	Y+41, r24	; 0x29
    1530:	9a a7       	std	Y+42, r25	; 0x2a
    1532:	ab a7       	std	Y+43, r26	; 0x2b
    1534:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1536:	69 a5       	ldd	r22, Y+41	; 0x29
    1538:	7a a5       	ldd	r23, Y+42	; 0x2a
    153a:	8b a5       	ldd	r24, Y+43	; 0x2b
    153c:	9c a5       	ldd	r25, Y+44	; 0x2c
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	1c f4       	brge	.+6      	; 0x1554 <LCD_write_data_8bit+0x74>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	88 a7       	std	Y+40, r24	; 0x28
    1552:	91 c0       	rjmp	.+290    	; 0x1676 <LCD_write_data_8bit+0x196>
	else if (__tmp > 255)
    1554:	69 a5       	ldd	r22, Y+41	; 0x29
    1556:	7a a5       	ldd	r23, Y+42	; 0x2a
    1558:	8b a5       	ldd	r24, Y+43	; 0x2b
    155a:	9c a5       	ldd	r25, Y+44	; 0x2c
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4f e7       	ldi	r20, 0x7F	; 127
    1562:	53 e4       	ldi	r21, 0x43	; 67
    1564:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1568:	18 16       	cp	r1, r24
    156a:	0c f0       	brlt	.+2      	; 0x156e <LCD_write_data_8bit+0x8e>
    156c:	7b c0       	rjmp	.+246    	; 0x1664 <LCD_write_data_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    156e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1570:	7e a5       	ldd	r23, Y+46	; 0x2e
    1572:	8f a5       	ldd	r24, Y+47	; 0x2f
    1574:	98 a9       	ldd	r25, Y+48	; 0x30
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a e7       	ldi	r20, 0x7A	; 122
    157c:	54 e4       	ldi	r21, 0x44	; 68
    157e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8c a3       	std	Y+36, r24	; 0x24
    1588:	9d a3       	std	Y+37, r25	; 0x25
    158a:	ae a3       	std	Y+38, r26	; 0x26
    158c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	6c a1       	ldd	r22, Y+36	; 0x24
    1590:	7d a1       	ldd	r23, Y+37	; 0x25
    1592:	8e a1       	ldd	r24, Y+38	; 0x26
    1594:	9f a1       	ldd	r25, Y+39	; 0x27
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	88 a3       	std	Y+32, r24	; 0x20
    15a8:	99 a3       	std	Y+33, r25	; 0x21
    15aa:	aa a3       	std	Y+34, r26	; 0x22
    15ac:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    15ae:	68 a1       	ldd	r22, Y+32	; 0x20
    15b0:	79 a1       	ldd	r23, Y+33	; 0x21
    15b2:	8a a1       	ldd	r24, Y+34	; 0x22
    15b4:	9b a1       	ldd	r25, Y+35	; 0x23
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <LCD_write_data_8bit+0xf0>
		__ticks = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9f 8f       	std	Y+31, r25	; 0x1f
    15cc:	8e 8f       	std	Y+30, r24	; 0x1e
    15ce:	3f c0       	rjmp	.+126    	; 0x164e <LCD_write_data_8bit+0x16e>
	else if (__tmp > 65535)
    15d0:	68 a1       	ldd	r22, Y+32	; 0x20
    15d2:	79 a1       	ldd	r23, Y+33	; 0x21
    15d4:	8a a1       	ldd	r24, Y+34	; 0x22
    15d6:	9b a1       	ldd	r25, Y+35	; 0x23
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	57 e4       	ldi	r21, 0x47	; 71
    15e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	4c f5       	brge	.+82     	; 0x163a <LCD_write_data_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e8:	6c a1       	ldd	r22, Y+36	; 0x24
    15ea:	7d a1       	ldd	r23, Y+37	; 0x25
    15ec:	8e a1       	ldd	r24, Y+38	; 0x26
    15ee:	9f a1       	ldd	r25, Y+39	; 0x27
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	51 e4       	ldi	r21, 0x41	; 65
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9f 8f       	std	Y+31, r25	; 0x1f
    160e:	8e 8f       	std	Y+30, r24	; 0x1e
    1610:	0f c0       	rjmp	.+30     	; 0x1630 <LCD_write_data_8bit+0x150>
    1612:	88 ec       	ldi	r24, 0xC8	; 200
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9d 8f       	std	Y+29, r25	; 0x1d
    1618:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    161a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    161c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <LCD_write_data_8bit+0x13e>
    1622:	9d 8f       	std	Y+29, r25	; 0x1d
    1624:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1626:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1628:	9f 8d       	ldd	r25, Y+31	; 0x1f
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	9f 8f       	std	Y+31, r25	; 0x1f
    162e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1630:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1632:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	69 f7       	brne	.-38     	; 0x1612 <LCD_write_data_8bit+0x132>
    1638:	24 c0       	rjmp	.+72     	; 0x1682 <LCD_write_data_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	68 a1       	ldd	r22, Y+32	; 0x20
    163c:	79 a1       	ldd	r23, Y+33	; 0x21
    163e:	8a a1       	ldd	r24, Y+34	; 0x22
    1640:	9b a1       	ldd	r25, Y+35	; 0x23
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9f 8f       	std	Y+31, r25	; 0x1f
    164c:	8e 8f       	std	Y+30, r24	; 0x1e
    164e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1650:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1652:	9b 8f       	std	Y+27, r25	; 0x1b
    1654:	8a 8f       	std	Y+26, r24	; 0x1a
    1656:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1658:	9b 8d       	ldd	r25, Y+27	; 0x1b
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <LCD_write_data_8bit+0x17a>
    165e:	9b 8f       	std	Y+27, r25	; 0x1b
    1660:	8a 8f       	std	Y+26, r24	; 0x1a
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <LCD_write_data_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1664:	69 a5       	ldd	r22, Y+41	; 0x29
    1666:	7a a5       	ldd	r23, Y+42	; 0x2a
    1668:	8b a5       	ldd	r24, Y+43	; 0x2b
    166a:	9c a5       	ldd	r25, Y+44	; 0x2c
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	88 a7       	std	Y+40, r24	; 0x28
    1676:	88 a5       	ldd	r24, Y+40	; 0x28
    1678:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    167a:	89 8d       	ldd	r24, Y+25	; 0x19
    167c:	8a 95       	dec	r24
    167e:	f1 f7       	brne	.-4      	; 0x167c <LCD_write_data_8bit+0x19c>
    1680:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(50);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a8 e4       	ldi	r26, 0x48	; 72
    1690:	b2 e4       	ldi	r27, 0x42	; 66
    1692:	8d 8b       	std	Y+21, r24	; 0x15
    1694:	9e 8b       	std	Y+22, r25	; 0x16
    1696:	af 8b       	std	Y+23, r26	; 0x17
    1698:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    169a:	6d 89       	ldd	r22, Y+21	; 0x15
    169c:	7e 89       	ldd	r23, Y+22	; 0x16
    169e:	8f 89       	ldd	r24, Y+23	; 0x17
    16a0:	98 8d       	ldd	r25, Y+24	; 0x18
    16a2:	2b ea       	ldi	r18, 0xAB	; 171
    16a4:	3a ea       	ldi	r19, 0xAA	; 170
    16a6:	4a e2       	ldi	r20, 0x2A	; 42
    16a8:	50 e4       	ldi	r21, 0x40	; 64
    16aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	89 8b       	std	Y+17, r24	; 0x11
    16b4:	9a 8b       	std	Y+18, r25	; 0x12
    16b6:	ab 8b       	std	Y+19, r26	; 0x13
    16b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16ba:	69 89       	ldd	r22, Y+17	; 0x11
    16bc:	7a 89       	ldd	r23, Y+18	; 0x12
    16be:	8b 89       	ldd	r24, Y+19	; 0x13
    16c0:	9c 89       	ldd	r25, Y+20	; 0x14
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	1c f4       	brge	.+6      	; 0x16d8 <LCD_write_data_8bit+0x1f8>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	88 8b       	std	Y+16, r24	; 0x10
    16d6:	91 c0       	rjmp	.+290    	; 0x17fa <LCD_write_data_8bit+0x31a>
	else if (__tmp > 255)
    16d8:	69 89       	ldd	r22, Y+17	; 0x11
    16da:	7a 89       	ldd	r23, Y+18	; 0x12
    16dc:	8b 89       	ldd	r24, Y+19	; 0x13
    16de:	9c 89       	ldd	r25, Y+20	; 0x14
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <LCD_write_data_8bit+0x212>
    16f0:	7b c0       	rjmp	.+246    	; 0x17e8 <LCD_write_data_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    16f2:	6d 89       	ldd	r22, Y+21	; 0x15
    16f4:	7e 89       	ldd	r23, Y+22	; 0x16
    16f6:	8f 89       	ldd	r24, Y+23	; 0x17
    16f8:	98 8d       	ldd	r25, Y+24	; 0x18
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a e7       	ldi	r20, 0x7A	; 122
    1700:	54 e4       	ldi	r21, 0x44	; 68
    1702:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8c 87       	std	Y+12, r24	; 0x0c
    170c:	9d 87       	std	Y+13, r25	; 0x0d
    170e:	ae 87       	std	Y+14, r26	; 0x0e
    1710:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	6c 85       	ldd	r22, Y+12	; 0x0c
    1714:	7d 85       	ldd	r23, Y+13	; 0x0d
    1716:	8e 85       	ldd	r24, Y+14	; 0x0e
    1718:	9f 85       	ldd	r25, Y+15	; 0x0f
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a ef       	ldi	r20, 0xFA	; 250
    1720:	54 e4       	ldi	r21, 0x44	; 68
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	88 87       	std	Y+8, r24	; 0x08
    172c:	99 87       	std	Y+9, r25	; 0x09
    172e:	aa 87       	std	Y+10, r26	; 0x0a
    1730:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1732:	68 85       	ldd	r22, Y+8	; 0x08
    1734:	79 85       	ldd	r23, Y+9	; 0x09
    1736:	8a 85       	ldd	r24, Y+10	; 0x0a
    1738:	9b 85       	ldd	r25, Y+11	; 0x0b
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <LCD_write_data_8bit+0x274>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9f 83       	std	Y+7, r25	; 0x07
    1750:	8e 83       	std	Y+6, r24	; 0x06
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <LCD_write_data_8bit+0x2f2>
	else if (__tmp > 65535)
    1754:	68 85       	ldd	r22, Y+8	; 0x08
    1756:	79 85       	ldd	r23, Y+9	; 0x09
    1758:	8a 85       	ldd	r24, Y+10	; 0x0a
    175a:	9b 85       	ldd	r25, Y+11	; 0x0b
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <LCD_write_data_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	6c 85       	ldd	r22, Y+12	; 0x0c
    176e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1770:	8e 85       	ldd	r24, Y+14	; 0x0e
    1772:	9f 85       	ldd	r25, Y+15	; 0x0f
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9f 83       	std	Y+7, r25	; 0x07
    1792:	8e 83       	std	Y+6, r24	; 0x06
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <LCD_write_data_8bit+0x2d4>
    1796:	88 ec       	ldi	r24, 0xC8	; 200
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9d 83       	std	Y+5, r25	; 0x05
    179c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_write_data_8bit+0x2c2>
    17a6:	9d 83       	std	Y+5, r25	; 0x05
    17a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8e 81       	ldd	r24, Y+6	; 0x06
    17ac:	9f 81       	ldd	r25, Y+7	; 0x07
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9f 83       	std	Y+7, r25	; 0x07
    17b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8e 81       	ldd	r24, Y+6	; 0x06
    17b6:	9f 81       	ldd	r25, Y+7	; 0x07
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <LCD_write_data_8bit+0x2b6>
    17bc:	24 c0       	rjmp	.+72     	; 0x1806 <LCD_write_data_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	68 85       	ldd	r22, Y+8	; 0x08
    17c0:	79 85       	ldd	r23, Y+9	; 0x09
    17c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9f 83       	std	Y+7, r25	; 0x07
    17d0:	8e 83       	std	Y+6, r24	; 0x06
    17d2:	8e 81       	ldd	r24, Y+6	; 0x06
    17d4:	9f 81       	ldd	r25, Y+7	; 0x07
    17d6:	9b 83       	std	Y+3, r25	; 0x03
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	9b 81       	ldd	r25, Y+3	; 0x03
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_write_data_8bit+0x2fe>
    17e2:	9b 83       	std	Y+3, r25	; 0x03
    17e4:	8a 83       	std	Y+2, r24	; 0x02
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <LCD_write_data_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17e8:	69 89       	ldd	r22, Y+17	; 0x11
    17ea:	7a 89       	ldd	r23, Y+18	; 0x12
    17ec:	8b 89       	ldd	r24, Y+19	; 0x13
    17ee:	9c 89       	ldd	r25, Y+20	; 0x14
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	88 8b       	std	Y+16, r24	; 0x10
    17fa:	88 89       	ldd	r24, Y+16	; 0x10
    17fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8a 95       	dec	r24
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_write_data_8bit+0x320>
    1804:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	//send data to the entire port


	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>


}
    180e:	e1 96       	adiw	r28, 0x31	; 49
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <LCD_write_command_8bit>:

static void LCD_write_command_8bit(u8 copy_command_8bit){
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	e1 97       	sbiw	r28, 0x31	; 49
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	89 ab       	std	Y+49, r24	; 0x31
		 *
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */
	DIO_void_clear_pin(lcd_control_port, lcd_RS); // clear the RS pin to select instruction register
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	62 e0       	ldi	r22, 0x02	; 2
    183a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e8       	ldi	r26, 0x80	; 128
    184c:	bf e3       	ldi	r27, 0x3F	; 63
    184e:	8d a7       	std	Y+45, r24	; 0x2d
    1850:	9e a7       	std	Y+46, r25	; 0x2e
    1852:	af a7       	std	Y+47, r26	; 0x2f
    1854:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1856:	6d a5       	ldd	r22, Y+45	; 0x2d
    1858:	7e a5       	ldd	r23, Y+46	; 0x2e
    185a:	8f a5       	ldd	r24, Y+47	; 0x2f
    185c:	98 a9       	ldd	r25, Y+48	; 0x30
    185e:	2b ea       	ldi	r18, 0xAB	; 171
    1860:	3a ea       	ldi	r19, 0xAA	; 170
    1862:	4a e2       	ldi	r20, 0x2A	; 42
    1864:	50 e4       	ldi	r21, 0x40	; 64
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	89 a7       	std	Y+41, r24	; 0x29
    1870:	9a a7       	std	Y+42, r25	; 0x2a
    1872:	ab a7       	std	Y+43, r26	; 0x2b
    1874:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1876:	69 a5       	ldd	r22, Y+41	; 0x29
    1878:	7a a5       	ldd	r23, Y+42	; 0x2a
    187a:	8b a5       	ldd	r24, Y+43	; 0x2b
    187c:	9c a5       	ldd	r25, Y+44	; 0x2c
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e8       	ldi	r20, 0x80	; 128
    1884:	5f e3       	ldi	r21, 0x3F	; 63
    1886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188a:	88 23       	and	r24, r24
    188c:	1c f4       	brge	.+6      	; 0x1894 <LCD_write_command_8bit+0x74>
		__ticks = 1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	88 a7       	std	Y+40, r24	; 0x28
    1892:	91 c0       	rjmp	.+290    	; 0x19b6 <LCD_write_command_8bit+0x196>
	else if (__tmp > 255)
    1894:	69 a5       	ldd	r22, Y+41	; 0x29
    1896:	7a a5       	ldd	r23, Y+42	; 0x2a
    1898:	8b a5       	ldd	r24, Y+43	; 0x2b
    189a:	9c a5       	ldd	r25, Y+44	; 0x2c
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4f e7       	ldi	r20, 0x7F	; 127
    18a2:	53 e4       	ldi	r21, 0x43	; 67
    18a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18a8:	18 16       	cp	r1, r24
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <LCD_write_command_8bit+0x8e>
    18ac:	7b c0       	rjmp	.+246    	; 0x19a4 <LCD_write_command_8bit+0x184>
	{
		_delay_ms(__us / 1000.0);
    18ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    18b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    18b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b4:	98 a9       	ldd	r25, Y+48	; 0x30
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a e7       	ldi	r20, 0x7A	; 122
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8c a3       	std	Y+36, r24	; 0x24
    18c8:	9d a3       	std	Y+37, r25	; 0x25
    18ca:	ae a3       	std	Y+38, r26	; 0x26
    18cc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ce:	6c a1       	ldd	r22, Y+36	; 0x24
    18d0:	7d a1       	ldd	r23, Y+37	; 0x25
    18d2:	8e a1       	ldd	r24, Y+38	; 0x26
    18d4:	9f a1       	ldd	r25, Y+39	; 0x27
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	4a ef       	ldi	r20, 0xFA	; 250
    18dc:	54 e4       	ldi	r21, 0x44	; 68
    18de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	88 a3       	std	Y+32, r24	; 0x20
    18e8:	99 a3       	std	Y+33, r25	; 0x21
    18ea:	aa a3       	std	Y+34, r26	; 0x22
    18ec:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    18ee:	68 a1       	ldd	r22, Y+32	; 0x20
    18f0:	79 a1       	ldd	r23, Y+33	; 0x21
    18f2:	8a a1       	ldd	r24, Y+34	; 0x22
    18f4:	9b a1       	ldd	r25, Y+35	; 0x23
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e8       	ldi	r20, 0x80	; 128
    18fc:	5f e3       	ldi	r21, 0x3F	; 63
    18fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1902:	88 23       	and	r24, r24
    1904:	2c f4       	brge	.+10     	; 0x1910 <LCD_write_command_8bit+0xf0>
		__ticks = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	9f 8f       	std	Y+31, r25	; 0x1f
    190c:	8e 8f       	std	Y+30, r24	; 0x1e
    190e:	3f c0       	rjmp	.+126    	; 0x198e <LCD_write_command_8bit+0x16e>
	else if (__tmp > 65535)
    1910:	68 a1       	ldd	r22, Y+32	; 0x20
    1912:	79 a1       	ldd	r23, Y+33	; 0x21
    1914:	8a a1       	ldd	r24, Y+34	; 0x22
    1916:	9b a1       	ldd	r25, Y+35	; 0x23
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	57 e4       	ldi	r21, 0x47	; 71
    1920:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1924:	18 16       	cp	r1, r24
    1926:	4c f5       	brge	.+82     	; 0x197a <LCD_write_command_8bit+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1928:	6c a1       	ldd	r22, Y+36	; 0x24
    192a:	7d a1       	ldd	r23, Y+37	; 0x25
    192c:	8e a1       	ldd	r24, Y+38	; 0x26
    192e:	9f a1       	ldd	r25, Y+39	; 0x27
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e2       	ldi	r20, 0x20	; 32
    1936:	51 e4       	ldi	r21, 0x41	; 65
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9f 8f       	std	Y+31, r25	; 0x1f
    194e:	8e 8f       	std	Y+30, r24	; 0x1e
    1950:	0f c0       	rjmp	.+30     	; 0x1970 <LCD_write_command_8bit+0x150>
    1952:	88 ec       	ldi	r24, 0xC8	; 200
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9d 8f       	std	Y+29, r25	; 0x1d
    1958:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    195a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    195c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_write_command_8bit+0x13e>
    1962:	9d 8f       	std	Y+29, r25	; 0x1d
    1964:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1966:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1968:	9f 8d       	ldd	r25, Y+31	; 0x1f
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	9f 8f       	std	Y+31, r25	; 0x1f
    196e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1970:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1972:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	69 f7       	brne	.-38     	; 0x1952 <LCD_write_command_8bit+0x132>
    1978:	24 c0       	rjmp	.+72     	; 0x19c2 <LCD_write_command_8bit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197a:	68 a1       	ldd	r22, Y+32	; 0x20
    197c:	79 a1       	ldd	r23, Y+33	; 0x21
    197e:	8a a1       	ldd	r24, Y+34	; 0x22
    1980:	9b a1       	ldd	r25, Y+35	; 0x23
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9f 8f       	std	Y+31, r25	; 0x1f
    198c:	8e 8f       	std	Y+30, r24	; 0x1e
    198e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1990:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1992:	9b 8f       	std	Y+27, r25	; 0x1b
    1994:	8a 8f       	std	Y+26, r24	; 0x1a
    1996:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1998:	9b 8d       	ldd	r25, Y+27	; 0x1b
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_write_command_8bit+0x17a>
    199e:	9b 8f       	std	Y+27, r25	; 0x1b
    19a0:	8a 8f       	std	Y+26, r24	; 0x1a
    19a2:	0f c0       	rjmp	.+30     	; 0x19c2 <LCD_write_command_8bit+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19a4:	69 a5       	ldd	r22, Y+41	; 0x29
    19a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    19a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	88 a7       	std	Y+40, r24	; 0x28
    19b6:	88 a5       	ldd	r24, Y+40	; 0x28
    19b8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19ba:	89 8d       	ldd	r24, Y+25	; 0x19
    19bc:	8a 95       	dec	r24
    19be:	f1 f7       	brne	.-4      	; 0x19bc <LCD_write_command_8bit+0x19c>
    19c0:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e8       	ldi	r26, 0x80	; 128
    19d0:	bf e3       	ldi	r27, 0x3F	; 63
    19d2:	8d 8b       	std	Y+21, r24	; 0x15
    19d4:	9e 8b       	std	Y+22, r25	; 0x16
    19d6:	af 8b       	std	Y+23, r26	; 0x17
    19d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19da:	6d 89       	ldd	r22, Y+21	; 0x15
    19dc:	7e 89       	ldd	r23, Y+22	; 0x16
    19de:	8f 89       	ldd	r24, Y+23	; 0x17
    19e0:	98 8d       	ldd	r25, Y+24	; 0x18
    19e2:	2b ea       	ldi	r18, 0xAB	; 171
    19e4:	3a ea       	ldi	r19, 0xAA	; 170
    19e6:	4a e2       	ldi	r20, 0x2A	; 42
    19e8:	50 e4       	ldi	r21, 0x40	; 64
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	89 8b       	std	Y+17, r24	; 0x11
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	ab 8b       	std	Y+19, r26	; 0x13
    19f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19fa:	69 89       	ldd	r22, Y+17	; 0x11
    19fc:	7a 89       	ldd	r23, Y+18	; 0x12
    19fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1a00:	9c 89       	ldd	r25, Y+20	; 0x14
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a0e:	88 23       	and	r24, r24
    1a10:	1c f4       	brge	.+6      	; 0x1a18 <LCD_write_command_8bit+0x1f8>
		__ticks = 1;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	88 8b       	std	Y+16, r24	; 0x10
    1a16:	91 c0       	rjmp	.+290    	; 0x1b3a <LCD_write_command_8bit+0x31a>
	else if (__tmp > 255)
    1a18:	69 89       	ldd	r22, Y+17	; 0x11
    1a1a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4f e7       	ldi	r20, 0x7F	; 127
    1a26:	53 e4       	ldi	r21, 0x43	; 67
    1a28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	0c f0       	brlt	.+2      	; 0x1a32 <LCD_write_command_8bit+0x212>
    1a30:	7b c0       	rjmp	.+246    	; 0x1b28 <LCD_write_command_8bit+0x308>
	{
		_delay_ms(__us / 1000.0);
    1a32:	6d 89       	ldd	r22, Y+21	; 0x15
    1a34:	7e 89       	ldd	r23, Y+22	; 0x16
    1a36:	8f 89       	ldd	r24, Y+23	; 0x17
    1a38:	98 8d       	ldd	r25, Y+24	; 0x18
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a e7       	ldi	r20, 0x7A	; 122
    1a40:	54 e4       	ldi	r21, 0x44	; 68
    1a42:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8c 87       	std	Y+12, r24	; 0x0c
    1a4c:	9d 87       	std	Y+13, r25	; 0x0d
    1a4e:	ae 87       	std	Y+14, r26	; 0x0e
    1a50:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a52:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a54:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a56:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a58:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a ef       	ldi	r20, 0xFA	; 250
    1a60:	54 e4       	ldi	r21, 0x44	; 68
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	88 87       	std	Y+8, r24	; 0x08
    1a6c:	99 87       	std	Y+9, r25	; 0x09
    1a6e:	aa 87       	std	Y+10, r26	; 0x0a
    1a70:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a72:	68 85       	ldd	r22, Y+8	; 0x08
    1a74:	79 85       	ldd	r23, Y+9	; 0x09
    1a76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <LCD_write_command_8bit+0x274>
		__ticks = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9f 83       	std	Y+7, r25	; 0x07
    1a90:	8e 83       	std	Y+6, r24	; 0x06
    1a92:	3f c0       	rjmp	.+126    	; 0x1b12 <LCD_write_command_8bit+0x2f2>
	else if (__tmp > 65535)
    1a94:	68 85       	ldd	r22, Y+8	; 0x08
    1a96:	79 85       	ldd	r23, Y+9	; 0x09
    1a98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	4c f5       	brge	.+82     	; 0x1afe <LCD_write_command_8bit+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aac:	6c 85       	ldd	r22, Y+12	; 0x0c
    1aae:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ab0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ab2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9f 83       	std	Y+7, r25	; 0x07
    1ad2:	8e 83       	std	Y+6, r24	; 0x06
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <LCD_write_command_8bit+0x2d4>
    1ad6:	88 ec       	ldi	r24, 0xC8	; 200
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9d 83       	std	Y+5, r25	; 0x05
    1adc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_write_command_8bit+0x2c2>
    1ae6:	9d 83       	std	Y+5, r25	; 0x05
    1ae8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	8e 81       	ldd	r24, Y+6	; 0x06
    1aec:	9f 81       	ldd	r25, Y+7	; 0x07
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	9f 83       	std	Y+7, r25	; 0x07
    1af2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <LCD_write_command_8bit+0x2b6>
    1afc:	24 c0       	rjmp	.+72     	; 0x1b46 <LCD_write_command_8bit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afe:	68 85       	ldd	r22, Y+8	; 0x08
    1b00:	79 85       	ldd	r23, Y+9	; 0x09
    1b02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9f 83       	std	Y+7, r25	; 0x07
    1b10:	8e 83       	std	Y+6, r24	; 0x06
    1b12:	8e 81       	ldd	r24, Y+6	; 0x06
    1b14:	9f 81       	ldd	r25, Y+7	; 0x07
    1b16:	9b 83       	std	Y+3, r25	; 0x03
    1b18:	8a 83       	std	Y+2, r24	; 0x02
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <LCD_write_command_8bit+0x2fe>
    1b22:	9b 83       	std	Y+3, r25	; 0x03
    1b24:	8a 83       	std	Y+2, r24	; 0x02
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <LCD_write_command_8bit+0x326>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b28:	69 89       	ldd	r22, Y+17	; 0x11
    1b2a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	88 8b       	std	Y+16, r24	; 0x10
    1b3a:	88 89       	ldd	r24, Y+16	; 0x10
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	8a 95       	dec	r24
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_write_command_8bit+0x320>
    1b44:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send command to the entire port
	DIO_void_assign_port(lcd_data_port, copy_command_8bit);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	69 a9       	ldd	r22, Y+49	; 0x31
    1b4a:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_void_assign_port>
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>

}
    1b56:	e1 96       	adiw	r28, 0x31	; 49
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <LCD_write_data_4bit>:


/* 4bit mode functions */

static void LCD_write_data_4bit(u8 copy_data_4bit){
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	c3 56       	subi	r28, 0x63	; 99
    1b76:	d0 40       	sbci	r29, 0x00	; 0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	fe 01       	movw	r30, r28
    1b84:	ed 59       	subi	r30, 0x9D	; 157
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_set_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	62 e0       	ldi	r22, 0x02	; 2
    1b8e:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e3 5a       	subi	r30, 0xA3	; 163
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	bf e3       	ldi	r27, 0x3F	; 63
    1ba8:	80 83       	st	Z, r24
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	a2 83       	std	Z+2, r26	; 0x02
    1bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	07 5a       	subi	r16, 0xA7	; 167
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e3 5a       	subi	r30, 0xA3	; 163
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	2b ea       	ldi	r18, 0xAB	; 171
    1bc6:	3a ea       	ldi	r19, 0xAA	; 170
    1bc8:	4a e2       	ldi	r20, 0x2A	; 42
    1bca:	50 e4       	ldi	r21, 0x40	; 64
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	80 83       	st	Z, r24
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	a2 83       	std	Z+2, r26	; 0x02
    1bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bde:	fe 01       	movw	r30, r28
    1be0:	e7 5a       	subi	r30, 0xA7	; 167
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	34 f4       	brge	.+12     	; 0x1c08 <LCD_write_data_4bit+0xa0>
		__ticks = 1;
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e8 5a       	subi	r30, 0xA8	; 168
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	80 83       	st	Z, r24
    1c06:	e0 c0       	rjmp	.+448    	; 0x1dc8 <LCD_write_data_4bit+0x260>
	else if (__tmp > 255)
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e7 5a       	subi	r30, 0xA7	; 167
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	53 e4       	ldi	r21, 0x43	; 67
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	0c f0       	brlt	.+2      	; 0x1c28 <LCD_write_data_4bit+0xc0>
    1c26:	c0 c0       	rjmp	.+384    	; 0x1da8 <LCD_write_data_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e3 5a       	subi	r30, 0xA3	; 163
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a e7       	ldi	r20, 0x7A	; 122
    1c3c:	54 e4       	ldi	r21, 0x44	; 68
    1c3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	fe 01       	movw	r30, r28
    1c48:	ec 5a       	subi	r30, 0xAC	; 172
    1c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4c:	80 83       	st	Z, r24
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	a2 83       	std	Z+2, r26	; 0x02
    1c52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	8e 01       	movw	r16, r28
    1c56:	00 5b       	subi	r16, 0xB0	; 176
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ec 5a       	subi	r30, 0xAC	; 172
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a ef       	ldi	r20, 0xFA	; 250
    1c6e:	54 e4       	ldi	r21, 0x44	; 68
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	f8 01       	movw	r30, r16
    1c7a:	80 83       	st	Z, r24
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	a2 83       	std	Z+2, r26	; 0x02
    1c80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c82:	fe 01       	movw	r30, r28
    1c84:	e0 5b       	subi	r30, 0xB0	; 176
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	60 81       	ld	r22, Z
    1c8a:	71 81       	ldd	r23, Z+1	; 0x01
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e8       	ldi	r20, 0x80	; 128
    1c96:	5f e3       	ldi	r21, 0x3F	; 63
    1c98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9c:	88 23       	and	r24, r24
    1c9e:	44 f4       	brge	.+16     	; 0x1cb0 <LCD_write_data_4bit+0x148>
		__ticks = 1;
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e2 5b       	subi	r30, 0xB2	; 178
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	64 c0       	rjmp	.+200    	; 0x1d78 <LCD_write_data_4bit+0x210>
	else if (__tmp > 65535)
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e0 5b       	subi	r30, 0xB0	; 176
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	0c f0       	brlt	.+2      	; 0x1cd0 <LCD_write_data_4bit+0x168>
    1cce:	43 c0       	rjmp	.+134    	; 0x1d56 <LCD_write_data_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ec 5a       	subi	r30, 0xAC	; 172
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8e 01       	movw	r16, r28
    1cf0:	02 5b       	subi	r16, 0xB2	; 178
    1cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf4:	bc 01       	movw	r22, r24
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	1f c0       	rjmp	.+62     	; 0x1d46 <LCD_write_data_4bit+0x1de>
    1d08:	fe 01       	movw	r30, r28
    1d0a:	e4 5b       	subi	r30, 0xB4	; 180
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0e:	88 ec       	ldi	r24, 0xC8	; 200
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d16:	fe 01       	movw	r30, r28
    1d18:	e4 5b       	subi	r30, 0xB4	; 180
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	91 81       	ldd	r25, Z+1	; 0x01
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_write_data_4bit+0x1b8>
    1d24:	fe 01       	movw	r30, r28
    1d26:	e4 5b       	subi	r30, 0xB4	; 180
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	91 83       	std	Z+1, r25	; 0x01
    1d2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2e:	de 01       	movw	r26, r28
    1d30:	a2 5b       	subi	r26, 0xB2	; 178
    1d32:	bf 4f       	sbci	r27, 0xFF	; 255
    1d34:	fe 01       	movw	r30, r28
    1d36:	e2 5b       	subi	r30, 0xB2	; 178
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	11 96       	adiw	r26, 0x01	; 1
    1d42:	9c 93       	st	X, r25
    1d44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	fe 01       	movw	r30, r28
    1d48:	e2 5b       	subi	r30, 0xB2	; 178
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	d1 f6       	brne	.-76     	; 0x1d08 <LCD_write_data_4bit+0x1a0>
    1d54:	4b c0       	rjmp	.+150    	; 0x1dec <LCD_write_data_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	8e 01       	movw	r16, r28
    1d58:	02 5b       	subi	r16, 0xB2	; 178
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e0 5b       	subi	r30, 0xB0	; 176
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	f8 01       	movw	r30, r16
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
    1d78:	de 01       	movw	r26, r28
    1d7a:	a6 5b       	subi	r26, 0xB6	; 182
    1d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e2 5b       	subi	r30, 0xB2	; 178
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	11 96       	adiw	r26, 0x01	; 1
    1d8a:	9c 93       	st	X, r25
    1d8c:	8e 93       	st	-X, r24
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e6 5b       	subi	r30, 0xB6	; 182
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_write_data_4bit+0x230>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e6 5b       	subi	r30, 0xB6	; 182
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	22 c0       	rjmp	.+68     	; 0x1dec <LCD_write_data_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1da8:	8e 01       	movw	r16, r28
    1daa:	08 5a       	subi	r16, 0xA8	; 168
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	fe 01       	movw	r30, r28
    1db0:	e7 5a       	subi	r30, 0xA7	; 167
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	60 81       	ld	r22, Z
    1db6:	71 81       	ldd	r23, Z+1	; 0x01
    1db8:	82 81       	ldd	r24, Z+2	; 0x02
    1dba:	93 81       	ldd	r25, Z+3	; 0x03
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	80 83       	st	Z, r24
    1dc8:	de 01       	movw	r26, r28
    1dca:	a7 5b       	subi	r26, 0xB7	; 183
    1dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e8 5a       	subi	r30, 0xA8	; 168
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e7 5b       	subi	r30, 0xB7	; 183
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	8a 95       	dec	r24
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_write_data_4bit+0x278>
    1de4:	fe 01       	movw	r30, r28
    1de6:	e7 5b       	subi	r30, 0xB7	; 183
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    1df4:	fe 01       	movw	r30, r28
    1df6:	eb 5b       	subi	r30, 0xBB	; 187
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e8       	ldi	r26, 0x80	; 128
    1e00:	bf e3       	ldi	r27, 0x3F	; 63
    1e02:	80 83       	st	Z, r24
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	a2 83       	std	Z+2, r26	; 0x02
    1e08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e0a:	8e 01       	movw	r16, r28
    1e0c:	0f 5b       	subi	r16, 0xBF	; 191
    1e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e10:	fe 01       	movw	r30, r28
    1e12:	eb 5b       	subi	r30, 0xBB	; 187
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	2b ea       	ldi	r18, 0xAB	; 171
    1e20:	3a ea       	ldi	r19, 0xAA	; 170
    1e22:	4a e2       	ldi	r20, 0x2A	; 42
    1e24:	50 e4       	ldi	r21, 0x40	; 64
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	f8 01       	movw	r30, r16
    1e30:	80 83       	st	Z, r24
    1e32:	91 83       	std	Z+1, r25	; 0x01
    1e34:	a2 83       	std	Z+2, r26	; 0x02
    1e36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ef 5b       	subi	r30, 0xBF	; 191
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	60 81       	ld	r22, Z
    1e40:	71 81       	ldd	r23, Z+1	; 0x01
    1e42:	82 81       	ldd	r24, Z+2	; 0x02
    1e44:	93 81       	ldd	r25, Z+3	; 0x03
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	34 f4       	brge	.+12     	; 0x1e62 <LCD_write_data_4bit+0x2fa>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e0 5c       	subi	r30, 0xC0	; 192
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 83       	st	Z, r24
    1e60:	9d c0       	rjmp	.+314    	; 0x1f9c <LCD_write_data_4bit+0x434>
	else if (__tmp > 255)
    1e62:	fe 01       	movw	r30, r28
    1e64:	ef 5b       	subi	r30, 0xBF	; 191
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	60 81       	ld	r22, Z
    1e6a:	71 81       	ldd	r23, Z+1	; 0x01
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	93 81       	ldd	r25, Z+3	; 0x03
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	53 e4       	ldi	r21, 0x43	; 67
    1e78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	0c f0       	brlt	.+2      	; 0x1e82 <LCD_write_data_4bit+0x31a>
    1e80:	7e c0       	rjmp	.+252    	; 0x1f7e <LCD_write_data_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    1e82:	fe 01       	movw	r30, r28
    1e84:	eb 5b       	subi	r30, 0xBB	; 187
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8c af       	std	Y+60, r24	; 0x3c
    1ea2:	9d af       	std	Y+61, r25	; 0x3d
    1ea4:	ae af       	std	Y+62, r26	; 0x3e
    1ea6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1eaa:	7d ad       	ldd	r23, Y+61	; 0x3d
    1eac:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eae:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a ef       	ldi	r20, 0xFA	; 250
    1eb6:	54 e4       	ldi	r21, 0x44	; 68
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	88 af       	std	Y+56, r24	; 0x38
    1ec2:	99 af       	std	Y+57, r25	; 0x39
    1ec4:	aa af       	std	Y+58, r26	; 0x3a
    1ec6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1ec8:	68 ad       	ldd	r22, Y+56	; 0x38
    1eca:	79 ad       	ldd	r23, Y+57	; 0x39
    1ecc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ece:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_write_data_4bit+0x382>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9f ab       	std	Y+55, r25	; 0x37
    1ee6:	8e ab       	std	Y+54, r24	; 0x36
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_write_data_4bit+0x400>
	else if (__tmp > 65535)
    1eea:	68 ad       	ldd	r22, Y+56	; 0x38
    1eec:	79 ad       	ldd	r23, Y+57	; 0x39
    1eee:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ef0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_write_data_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f04:	7d ad       	ldd	r23, Y+61	; 0x3d
    1f06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9f ab       	std	Y+55, r25	; 0x37
    1f28:	8e ab       	std	Y+54, r24	; 0x36
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_write_data_4bit+0x3e2>
    1f2c:	88 ec       	ldi	r24, 0xC8	; 200
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9d ab       	std	Y+53, r25	; 0x35
    1f32:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f34:	8c a9       	ldd	r24, Y+52	; 0x34
    1f36:	9d a9       	ldd	r25, Y+53	; 0x35
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_write_data_4bit+0x3d0>
    1f3c:	9d ab       	std	Y+53, r25	; 0x35
    1f3e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8e a9       	ldd	r24, Y+54	; 0x36
    1f42:	9f a9       	ldd	r25, Y+55	; 0x37
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9f ab       	std	Y+55, r25	; 0x37
    1f48:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8e a9       	ldd	r24, Y+54	; 0x36
    1f4c:	9f a9       	ldd	r25, Y+55	; 0x37
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_write_data_4bit+0x3c4>
    1f52:	2d c0       	rjmp	.+90     	; 0x1fae <LCD_write_data_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	68 ad       	ldd	r22, Y+56	; 0x38
    1f56:	79 ad       	ldd	r23, Y+57	; 0x39
    1f58:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f5a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9f ab       	std	Y+55, r25	; 0x37
    1f66:	8e ab       	std	Y+54, r24	; 0x36
    1f68:	8e a9       	ldd	r24, Y+54	; 0x36
    1f6a:	9f a9       	ldd	r25, Y+55	; 0x37
    1f6c:	9b ab       	std	Y+51, r25	; 0x33
    1f6e:	8a ab       	std	Y+50, r24	; 0x32
    1f70:	8a a9       	ldd	r24, Y+50	; 0x32
    1f72:	9b a9       	ldd	r25, Y+51	; 0x33
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_write_data_4bit+0x40c>
    1f78:	9b ab       	std	Y+51, r25	; 0x33
    1f7a:	8a ab       	std	Y+50, r24	; 0x32
    1f7c:	18 c0       	rjmp	.+48     	; 0x1fae <LCD_write_data_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ef 5b       	subi	r30, 0xBF	; 191
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	fe 01       	movw	r30, r28
    1f96:	e0 5c       	subi	r30, 0xC0	; 192
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 83       	st	Z, r24
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e0 5c       	subi	r30, 0xC0	; 192
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa6:	89 a9       	ldd	r24, Y+49	; 0x31
    1fa8:	8a 95       	dec	r24
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_write_data_4bit+0x440>
    1fac:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ee 59       	subi	r30, 0x9E	; 158
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	84 e0       	ldi	r24, 0x04	; 4
    1fb6:	80 83       	st	Z, r24
    1fb8:	26 c0       	rjmp	.+76     	; 0x2006 <LCD_write_data_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i));
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ed 59       	subi	r30, 0x9D	; 157
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ee 59       	subi	r30, 0x9E	; 158
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a9 01       	movw	r20, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <LCD_write_data_4bit+0x472>
    1fd6:	55 95       	asr	r21
    1fd8:	47 95       	ror	r20
    1fda:	8a 95       	dec	r24
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <LCD_write_data_4bit+0x46e>
    1fde:	ca 01       	movw	r24, r20
    1fe0:	98 2f       	mov	r25, r24
    1fe2:	91 70       	andi	r25, 0x01	; 1
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ee 59       	subi	r30, 0x9E	; 158
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	60 81       	ld	r22, Z
    1fee:	49 2f       	mov	r20, r25
    1ff0:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    1ff4:	de 01       	movw	r26, r28
    1ff6:	ae 59       	subi	r26, 0x9E	; 158
    1ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ee 59       	subi	r30, 0x9E	; 158
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	8f 5f       	subi	r24, 0xFF	; 255
    2004:	8c 93       	st	X, r24
    2006:	fe 01       	movw	r30, r28
    2008:	ee 59       	subi	r30, 0x9E	; 158
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	80 81       	ld	r24, Z
    200e:	88 30       	cpi	r24, 0x08	; 8
    2010:	a0 f2       	brcs	.-88     	; 0x1fba <LCD_write_data_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e2       	ldi	r26, 0x20	; 32
    2020:	b1 e4       	ldi	r27, 0x41	; 65
    2022:	8d a7       	std	Y+45, r24	; 0x2d
    2024:	9e a7       	std	Y+46, r25	; 0x2e
    2026:	af a7       	std	Y+47, r26	; 0x2f
    2028:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    202a:	6d a5       	ldd	r22, Y+45	; 0x2d
    202c:	7e a5       	ldd	r23, Y+46	; 0x2e
    202e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2030:	98 a9       	ldd	r25, Y+48	; 0x30
    2032:	2b ea       	ldi	r18, 0xAB	; 171
    2034:	3a ea       	ldi	r19, 0xAA	; 170
    2036:	4a e2       	ldi	r20, 0x2A	; 42
    2038:	50 e4       	ldi	r21, 0x40	; 64
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	89 a7       	std	Y+41, r24	; 0x29
    2044:	9a a7       	std	Y+42, r25	; 0x2a
    2046:	ab a7       	std	Y+43, r26	; 0x2b
    2048:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    204a:	69 a5       	ldd	r22, Y+41	; 0x29
    204c:	7a a5       	ldd	r23, Y+42	; 0x2a
    204e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2050:	9c a5       	ldd	r25, Y+44	; 0x2c
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    205e:	88 23       	and	r24, r24
    2060:	1c f4       	brge	.+6      	; 0x2068 <LCD_write_data_4bit+0x500>
		__ticks = 1;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	88 a7       	std	Y+40, r24	; 0x28
    2066:	91 c0       	rjmp	.+290    	; 0x218a <LCD_write_data_4bit+0x622>
	else if (__tmp > 255)
    2068:	69 a5       	ldd	r22, Y+41	; 0x29
    206a:	7a a5       	ldd	r23, Y+42	; 0x2a
    206c:	8b a5       	ldd	r24, Y+43	; 0x2b
    206e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	53 e4       	ldi	r21, 0x43	; 67
    2078:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207c:	18 16       	cp	r1, r24
    207e:	0c f0       	brlt	.+2      	; 0x2082 <LCD_write_data_4bit+0x51a>
    2080:	7b c0       	rjmp	.+246    	; 0x2178 <LCD_write_data_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    2082:	6d a5       	ldd	r22, Y+45	; 0x2d
    2084:	7e a5       	ldd	r23, Y+46	; 0x2e
    2086:	8f a5       	ldd	r24, Y+47	; 0x2f
    2088:	98 a9       	ldd	r25, Y+48	; 0x30
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a e7       	ldi	r20, 0x7A	; 122
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	8c a3       	std	Y+36, r24	; 0x24
    209c:	9d a3       	std	Y+37, r25	; 0x25
    209e:	ae a3       	std	Y+38, r26	; 0x26
    20a0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	6c a1       	ldd	r22, Y+36	; 0x24
    20a4:	7d a1       	ldd	r23, Y+37	; 0x25
    20a6:	8e a1       	ldd	r24, Y+38	; 0x26
    20a8:	9f a1       	ldd	r25, Y+39	; 0x27
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a ef       	ldi	r20, 0xFA	; 250
    20b0:	54 e4       	ldi	r21, 0x44	; 68
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	88 a3       	std	Y+32, r24	; 0x20
    20bc:	99 a3       	std	Y+33, r25	; 0x21
    20be:	aa a3       	std	Y+34, r26	; 0x22
    20c0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    20c2:	68 a1       	ldd	r22, Y+32	; 0x20
    20c4:	79 a1       	ldd	r23, Y+33	; 0x21
    20c6:	8a a1       	ldd	r24, Y+34	; 0x22
    20c8:	9b a1       	ldd	r25, Y+35	; 0x23
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_write_data_4bit+0x57c>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9f 8f       	std	Y+31, r25	; 0x1f
    20e0:	8e 8f       	std	Y+30, r24	; 0x1e
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_write_data_4bit+0x5fa>
	else if (__tmp > 65535)
    20e4:	68 a1       	ldd	r22, Y+32	; 0x20
    20e6:	79 a1       	ldd	r23, Y+33	; 0x21
    20e8:	8a a1       	ldd	r24, Y+34	; 0x22
    20ea:	9b a1       	ldd	r25, Y+35	; 0x23
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_write_data_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	6c a1       	ldd	r22, Y+36	; 0x24
    20fe:	7d a1       	ldd	r23, Y+37	; 0x25
    2100:	8e a1       	ldd	r24, Y+38	; 0x26
    2102:	9f a1       	ldd	r25, Y+39	; 0x27
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9f 8f       	std	Y+31, r25	; 0x1f
    2122:	8e 8f       	std	Y+30, r24	; 0x1e
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_write_data_4bit+0x5dc>
    2126:	88 ec       	ldi	r24, 0xC8	; 200
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9d 8f       	std	Y+29, r25	; 0x1d
    212c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    212e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2130:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_write_data_4bit+0x5ca>
    2136:	9d 8f       	std	Y+29, r25	; 0x1d
    2138:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    213c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9f 8f       	std	Y+31, r25	; 0x1f
    2142:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2146:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_write_data_4bit+0x5be>
    214c:	24 c0       	rjmp	.+72     	; 0x2196 <LCD_write_data_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	68 a1       	ldd	r22, Y+32	; 0x20
    2150:	79 a1       	ldd	r23, Y+33	; 0x21
    2152:	8a a1       	ldd	r24, Y+34	; 0x22
    2154:	9b a1       	ldd	r25, Y+35	; 0x23
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9f 8f       	std	Y+31, r25	; 0x1f
    2160:	8e 8f       	std	Y+30, r24	; 0x1e
    2162:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2164:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2166:	9b 8f       	std	Y+27, r25	; 0x1b
    2168:	8a 8f       	std	Y+26, r24	; 0x1a
    216a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    216c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_write_data_4bit+0x606>
    2172:	9b 8f       	std	Y+27, r25	; 0x1b
    2174:	8a 8f       	std	Y+26, r24	; 0x1a
    2176:	0f c0       	rjmp	.+30     	; 0x2196 <LCD_write_data_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2178:	69 a5       	ldd	r22, Y+41	; 0x29
    217a:	7a a5       	ldd	r23, Y+42	; 0x2a
    217c:	8b a5       	ldd	r24, Y+43	; 0x2b
    217e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	88 a7       	std	Y+40, r24	; 0x28
    218a:	88 a5       	ldd	r24, Y+40	; 0x28
    218c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218e:	89 8d       	ldd	r24, Y+25	; 0x19
    2190:	8a 95       	dec	r24
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_write_data_4bit+0x628>
    2194:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e8       	ldi	r26, 0x80	; 128
    21a4:	bf e3       	ldi	r27, 0x3F	; 63
    21a6:	8d 8b       	std	Y+21, r24	; 0x15
    21a8:	9e 8b       	std	Y+22, r25	; 0x16
    21aa:	af 8b       	std	Y+23, r26	; 0x17
    21ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	2b ea       	ldi	r18, 0xAB	; 171
    21b8:	3a ea       	ldi	r19, 0xAA	; 170
    21ba:	4a e2       	ldi	r20, 0x2A	; 42
    21bc:	50 e4       	ldi	r21, 0x40	; 64
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	89 8b       	std	Y+17, r24	; 0x11
    21c8:	9a 8b       	std	Y+18, r25	; 0x12
    21ca:	ab 8b       	std	Y+19, r26	; 0x13
    21cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21ce:	69 89       	ldd	r22, Y+17	; 0x11
    21d0:	7a 89       	ldd	r23, Y+18	; 0x12
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	1c f4       	brge	.+6      	; 0x21ec <LCD_write_data_4bit+0x684>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	88 8b       	std	Y+16, r24	; 0x10
    21ea:	91 c0       	rjmp	.+290    	; 0x230e <LCD_write_data_4bit+0x7a6>
	else if (__tmp > 255)
    21ec:	69 89       	ldd	r22, Y+17	; 0x11
    21ee:	7a 89       	ldd	r23, Y+18	; 0x12
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	53 e4       	ldi	r21, 0x43	; 67
    21fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	0c f0       	brlt	.+2      	; 0x2206 <LCD_write_data_4bit+0x69e>
    2204:	7b c0       	rjmp	.+246    	; 0x22fc <LCD_write_data_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2206:	6d 89       	ldd	r22, Y+21	; 0x15
    2208:	7e 89       	ldd	r23, Y+22	; 0x16
    220a:	8f 89       	ldd	r24, Y+23	; 0x17
    220c:	98 8d       	ldd	r25, Y+24	; 0x18
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a e7       	ldi	r20, 0x7A	; 122
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8c 87       	std	Y+12, r24	; 0x0c
    2220:	9d 87       	std	Y+13, r25	; 0x0d
    2222:	ae 87       	std	Y+14, r26	; 0x0e
    2224:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6c 85       	ldd	r22, Y+12	; 0x0c
    2228:	7d 85       	ldd	r23, Y+13	; 0x0d
    222a:	8e 85       	ldd	r24, Y+14	; 0x0e
    222c:	9f 85       	ldd	r25, Y+15	; 0x0f
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	88 87       	std	Y+8, r24	; 0x08
    2240:	99 87       	std	Y+9, r25	; 0x09
    2242:	aa 87       	std	Y+10, r26	; 0x0a
    2244:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2246:	68 85       	ldd	r22, Y+8	; 0x08
    2248:	79 85       	ldd	r23, Y+9	; 0x09
    224a:	8a 85       	ldd	r24, Y+10	; 0x0a
    224c:	9b 85       	ldd	r25, Y+11	; 0x0b
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <LCD_write_data_4bit+0x700>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9f 83       	std	Y+7, r25	; 0x07
    2264:	8e 83       	std	Y+6, r24	; 0x06
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <LCD_write_data_4bit+0x77e>
	else if (__tmp > 65535)
    2268:	68 85       	ldd	r22, Y+8	; 0x08
    226a:	79 85       	ldd	r23, Y+9	; 0x09
    226c:	8a 85       	ldd	r24, Y+10	; 0x0a
    226e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <LCD_write_data_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6c 85       	ldd	r22, Y+12	; 0x0c
    2282:	7d 85       	ldd	r23, Y+13	; 0x0d
    2284:	8e 85       	ldd	r24, Y+14	; 0x0e
    2286:	9f 85       	ldd	r25, Y+15	; 0x0f
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9f 83       	std	Y+7, r25	; 0x07
    22a6:	8e 83       	std	Y+6, r24	; 0x06
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <LCD_write_data_4bit+0x760>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9d 83       	std	Y+5, r25	; 0x05
    22b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	9d 81       	ldd	r25, Y+5	; 0x05
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_write_data_4bit+0x74e>
    22ba:	9d 83       	std	Y+5, r25	; 0x05
    22bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8e 81       	ldd	r24, Y+6	; 0x06
    22c0:	9f 81       	ldd	r25, Y+7	; 0x07
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9f 83       	std	Y+7, r25	; 0x07
    22c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8e 81       	ldd	r24, Y+6	; 0x06
    22ca:	9f 81       	ldd	r25, Y+7	; 0x07
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <LCD_write_data_4bit+0x742>
    22d0:	24 c0       	rjmp	.+72     	; 0x231a <LCD_write_data_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	68 85       	ldd	r22, Y+8	; 0x08
    22d4:	79 85       	ldd	r23, Y+9	; 0x09
    22d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9f 83       	std	Y+7, r25	; 0x07
    22e4:	8e 83       	std	Y+6, r24	; 0x06
    22e6:	8e 81       	ldd	r24, Y+6	; 0x06
    22e8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ea:	9b 83       	std	Y+3, r25	; 0x03
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	9b 81       	ldd	r25, Y+3	; 0x03
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_write_data_4bit+0x78a>
    22f6:	9b 83       	std	Y+3, r25	; 0x03
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	0f c0       	rjmp	.+30     	; 0x231a <LCD_write_data_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22fc:	69 89       	ldd	r22, Y+17	; 0x11
    22fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2300:	8b 89       	ldd	r24, Y+19	; 0x13
    2302:	9c 89       	ldd	r25, Y+20	; 0x14
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	88 8b       	std	Y+16, r24	; 0x10
    230e:	88 89       	ldd	r24, Y+16	; 0x10
    2310:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	8a 95       	dec	r24
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_write_data_4bit+0x7ac>
    2318:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    231a:	fe 01       	movw	r30, r28
    231c:	ef 59       	subi	r30, 0x9F	; 159
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	84 e0       	ldi	r24, 0x04	; 4
    2322:	80 83       	st	Z, r24
    2324:	27 c0       	rjmp	.+78     	; 0x2374 <LCD_write_data_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_data_4bit,i-4));
    2326:	fe 01       	movw	r30, r28
    2328:	ed 59       	subi	r30, 0x9D	; 157
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	fe 01       	movw	r30, r28
    2334:	ef 59       	subi	r30, 0x9F	; 159
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	04 97       	sbiw	r24, 0x04	; 4
    2340:	f9 01       	movw	r30, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <LCD_write_data_4bit+0x7e0>
    2344:	f5 95       	asr	r31
    2346:	e7 95       	ror	r30
    2348:	8a 95       	dec	r24
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <LCD_write_data_4bit+0x7dc>
    234c:	cf 01       	movw	r24, r30
    234e:	98 2f       	mov	r25, r24
    2350:	91 70       	andi	r25, 0x01	; 1
    2352:	fe 01       	movw	r30, r28
    2354:	ef 59       	subi	r30, 0x9F	; 159
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	60 81       	ld	r22, Z
    235c:	49 2f       	mov	r20, r25
    235e:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2362:	de 01       	movw	r26, r28
    2364:	af 59       	subi	r26, 0x9F	; 159
    2366:	bf 4f       	sbci	r27, 0xFF	; 255
    2368:	fe 01       	movw	r30, r28
    236a:	ef 59       	subi	r30, 0x9F	; 159
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 81       	ld	r24, Z
    2370:	8f 5f       	subi	r24, 0xFF	; 255
    2372:	8c 93       	st	X, r24
    2374:	fe 01       	movw	r30, r28
    2376:	ef 59       	subi	r30, 0x9F	; 159
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	88 30       	cpi	r24, 0x08	; 8
    237e:	98 f2       	brcs	.-90     	; 0x2326 <LCD_write_data_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>


}
    2388:	cd 59       	subi	r28, 0x9D	; 157
    238a:	df 4f       	sbci	r29, 0xFF	; 255
    238c:	0f b6       	in	r0, 0x3f	; 63
    238e:	f8 94       	cli
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	cd bf       	out	0x3d, r28	; 61
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	1f 91       	pop	r17
    239c:	0f 91       	pop	r16
    239e:	08 95       	ret

000023a0 <LCD_write_command_4bit>:

static void LCD_write_command_4bit(u8 copy_command_4bit){
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	c3 56       	subi	r28, 0x63	; 99
    23ae:	d0 40       	sbci	r29, 0x00	; 0
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	fe 01       	movw	r30, r28
    23bc:	ed 59       	subi	r30, 0x9D	; 157
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 83       	st	Z, r24
		 *  function will only be used inside this source file
		 *  do you not use it in your code!
		 *
		 */

	DIO_void_clear_pin(lcd_control_port, lcd_RS); // set RS pin high select data register
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	62 e0       	ldi	r22, 0x02	; 2
    23c6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW); // clear RW pin  0 for writing operation
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	61 e0       	ldi	r22, 0x01	; 1
    23ce:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e3 5a       	subi	r30, 0xA3	; 163
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a0 e8       	ldi	r26, 0x80	; 128
    23de:	bf e3       	ldi	r27, 0x3F	; 63
    23e0:	80 83       	st	Z, r24
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	a2 83       	std	Z+2, r26	; 0x02
    23e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23e8:	8e 01       	movw	r16, r28
    23ea:	07 5a       	subi	r16, 0xA7	; 167
    23ec:	1f 4f       	sbci	r17, 0xFF	; 255
    23ee:	fe 01       	movw	r30, r28
    23f0:	e3 5a       	subi	r30, 0xA3	; 163
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	2b ea       	ldi	r18, 0xAB	; 171
    23fe:	3a ea       	ldi	r19, 0xAA	; 170
    2400:	4a e2       	ldi	r20, 0x2A	; 42
    2402:	50 e4       	ldi	r21, 0x40	; 64
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	f8 01       	movw	r30, r16
    240e:	80 83       	st	Z, r24
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	a2 83       	std	Z+2, r26	; 0x02
    2414:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2416:	fe 01       	movw	r30, r28
    2418:	e7 5a       	subi	r30, 0xA7	; 167
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	34 f4       	brge	.+12     	; 0x2440 <LCD_write_command_4bit+0xa0>
		__ticks = 1;
    2434:	fe 01       	movw	r30, r28
    2436:	e8 5a       	subi	r30, 0xA8	; 168
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	80 83       	st	Z, r24
    243e:	e0 c0       	rjmp	.+448    	; 0x2600 <LCD_write_command_4bit+0x260>
	else if (__tmp > 255)
    2440:	fe 01       	movw	r30, r28
    2442:	e7 5a       	subi	r30, 0xA7	; 167
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	53 e4       	ldi	r21, 0x43	; 67
    2456:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	0c f0       	brlt	.+2      	; 0x2460 <LCD_write_command_4bit+0xc0>
    245e:	c0 c0       	rjmp	.+384    	; 0x25e0 <LCD_write_command_4bit+0x240>
	{
		_delay_ms(__us / 1000.0);
    2460:	fe 01       	movw	r30, r28
    2462:	e3 5a       	subi	r30, 0xA3	; 163
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a e7       	ldi	r20, 0x7A	; 122
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	fe 01       	movw	r30, r28
    2480:	ec 5a       	subi	r30, 0xAC	; 172
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 83       	st	Z, r24
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	a2 83       	std	Z+2, r26	; 0x02
    248a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248c:	8e 01       	movw	r16, r28
    248e:	00 5b       	subi	r16, 0xB0	; 176
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	ec 5a       	subi	r30, 0xAC	; 172
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a ef       	ldi	r20, 0xFA	; 250
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	80 83       	st	Z, r24
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	a2 83       	std	Z+2, r26	; 0x02
    24b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ba:	fe 01       	movw	r30, r28
    24bc:	e0 5b       	subi	r30, 0xB0	; 176
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	44 f4       	brge	.+16     	; 0x24e8 <LCD_write_command_4bit+0x148>
		__ticks = 1;
    24d8:	fe 01       	movw	r30, r28
    24da:	e2 5b       	subi	r30, 0xB2	; 178
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	64 c0       	rjmp	.+200    	; 0x25b0 <LCD_write_command_4bit+0x210>
	else if (__tmp > 65535)
    24e8:	fe 01       	movw	r30, r28
    24ea:	e0 5b       	subi	r30, 0xB0	; 176
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	60 81       	ld	r22, Z
    24f0:	71 81       	ldd	r23, Z+1	; 0x01
    24f2:	82 81       	ldd	r24, Z+2	; 0x02
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	0c f0       	brlt	.+2      	; 0x2508 <LCD_write_command_4bit+0x168>
    2506:	43 c0       	rjmp	.+134    	; 0x258e <LCD_write_command_4bit+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	fe 01       	movw	r30, r28
    250a:	ec 5a       	subi	r30, 0xAC	; 172
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e2       	ldi	r20, 0x20	; 32
    251c:	51 e4       	ldi	r21, 0x41	; 65
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8e 01       	movw	r16, r28
    2528:	02 5b       	subi	r16, 0xB2	; 178
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	bc 01       	movw	r22, r24
    252e:	cd 01       	movw	r24, r26
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	f8 01       	movw	r30, r16
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
    253e:	1f c0       	rjmp	.+62     	; 0x257e <LCD_write_command_4bit+0x1de>
    2540:	fe 01       	movw	r30, r28
    2542:	e4 5b       	subi	r30, 0xB4	; 180
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	88 ec       	ldi	r24, 0xC8	; 200
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    254e:	fe 01       	movw	r30, r28
    2550:	e4 5b       	subi	r30, 0xB4	; 180
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <LCD_write_command_4bit+0x1b8>
    255c:	fe 01       	movw	r30, r28
    255e:	e4 5b       	subi	r30, 0xB4	; 180
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	de 01       	movw	r26, r28
    2568:	a2 5b       	subi	r26, 0xB2	; 178
    256a:	bf 4f       	sbci	r27, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	e2 5b       	subi	r30, 0xB2	; 178
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	11 96       	adiw	r26, 0x01	; 1
    257a:	9c 93       	st	X, r25
    257c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257e:	fe 01       	movw	r30, r28
    2580:	e2 5b       	subi	r30, 0xB2	; 178
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	d1 f6       	brne	.-76     	; 0x2540 <LCD_write_command_4bit+0x1a0>
    258c:	4b c0       	rjmp	.+150    	; 0x2624 <LCD_write_command_4bit+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258e:	8e 01       	movw	r16, r28
    2590:	02 5b       	subi	r16, 0xB2	; 178
    2592:	1f 4f       	sbci	r17, 0xFF	; 255
    2594:	fe 01       	movw	r30, r28
    2596:	e0 5b       	subi	r30, 0xB0	; 176
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	80 83       	st	Z, r24
    25b0:	de 01       	movw	r26, r28
    25b2:	a6 5b       	subi	r26, 0xB6	; 182
    25b4:	bf 4f       	sbci	r27, 0xFF	; 255
    25b6:	fe 01       	movw	r30, r28
    25b8:	e2 5b       	subi	r30, 0xB2	; 178
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	11 96       	adiw	r26, 0x01	; 1
    25c2:	9c 93       	st	X, r25
    25c4:	8e 93       	st	-X, r24
    25c6:	fe 01       	movw	r30, r28
    25c8:	e6 5b       	subi	r30, 0xB6	; 182
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_write_command_4bit+0x230>
    25d4:	fe 01       	movw	r30, r28
    25d6:	e6 5b       	subi	r30, 0xB6	; 182
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
    25de:	22 c0       	rjmp	.+68     	; 0x2624 <LCD_write_command_4bit+0x284>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25e0:	8e 01       	movw	r16, r28
    25e2:	08 5a       	subi	r16, 0xA8	; 168
    25e4:	1f 4f       	sbci	r17, 0xFF	; 255
    25e6:	fe 01       	movw	r30, r28
    25e8:	e7 5a       	subi	r30, 0xA7	; 167
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	60 81       	ld	r22, Z
    25ee:	71 81       	ldd	r23, Z+1	; 0x01
    25f0:	82 81       	ldd	r24, Z+2	; 0x02
    25f2:	93 81       	ldd	r25, Z+3	; 0x03
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	f8 01       	movw	r30, r16
    25fe:	80 83       	st	Z, r24
    2600:	de 01       	movw	r26, r28
    2602:	a7 5b       	subi	r26, 0xB7	; 183
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	e8 5a       	subi	r30, 0xA8	; 168
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2610:	fe 01       	movw	r30, r28
    2612:	e7 5b       	subi	r30, 0xB7	; 183
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	80 81       	ld	r24, Z
    2618:	8a 95       	dec	r24
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_write_command_4bit+0x278>
    261c:	fe 01       	movw	r30, r28
    261e:	e7 5b       	subi	r30, 0xB7	; 183
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 83       	st	Z, r24

	_delay_us(1);
	//enable pin high
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    262c:	fe 01       	movw	r30, r28
    262e:	eb 5b       	subi	r30, 0xBB	; 187
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	a0 e8       	ldi	r26, 0x80	; 128
    2638:	bf e3       	ldi	r27, 0x3F	; 63
    263a:	80 83       	st	Z, r24
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	a2 83       	std	Z+2, r26	; 0x02
    2640:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2642:	8e 01       	movw	r16, r28
    2644:	0f 5b       	subi	r16, 0xBF	; 191
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	fe 01       	movw	r30, r28
    264a:	eb 5b       	subi	r30, 0xBB	; 187
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	2b ea       	ldi	r18, 0xAB	; 171
    2658:	3a ea       	ldi	r19, 0xAA	; 170
    265a:	4a e2       	ldi	r20, 0x2A	; 42
    265c:	50 e4       	ldi	r21, 0x40	; 64
    265e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	f8 01       	movw	r30, r16
    2668:	80 83       	st	Z, r24
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	a2 83       	std	Z+2, r26	; 0x02
    266e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2670:	fe 01       	movw	r30, r28
    2672:	ef 5b       	subi	r30, 0xBF	; 191
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	60 81       	ld	r22, Z
    2678:	71 81       	ldd	r23, Z+1	; 0x01
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	34 f4       	brge	.+12     	; 0x269a <LCD_write_command_4bit+0x2fa>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	fe 01       	movw	r30, r28
    2692:	e0 5c       	subi	r30, 0xC0	; 192
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 83       	st	Z, r24
    2698:	9d c0       	rjmp	.+314    	; 0x27d4 <LCD_write_command_4bit+0x434>
	else if (__tmp > 255)
    269a:	fe 01       	movw	r30, r28
    269c:	ef 5b       	subi	r30, 0xBF	; 191
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	53 e4       	ldi	r21, 0x43	; 67
    26b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	0c f0       	brlt	.+2      	; 0x26ba <LCD_write_command_4bit+0x31a>
    26b8:	7e c0       	rjmp	.+252    	; 0x27b6 <LCD_write_command_4bit+0x416>
	{
		_delay_ms(__us / 1000.0);
    26ba:	fe 01       	movw	r30, r28
    26bc:	eb 5b       	subi	r30, 0xBB	; 187
    26be:	ff 4f       	sbci	r31, 0xFF	; 255
    26c0:	60 81       	ld	r22, Z
    26c2:	71 81       	ldd	r23, Z+1	; 0x01
    26c4:	82 81       	ldd	r24, Z+2	; 0x02
    26c6:	93 81       	ldd	r25, Z+3	; 0x03
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	4a e7       	ldi	r20, 0x7A	; 122
    26ce:	54 e4       	ldi	r21, 0x44	; 68
    26d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	8c af       	std	Y+60, r24	; 0x3c
    26da:	9d af       	std	Y+61, r25	; 0x3d
    26dc:	ae af       	std	Y+62, r26	; 0x3e
    26de:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    26e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    26e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    26e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	4a ef       	ldi	r20, 0xFA	; 250
    26ee:	54 e4       	ldi	r21, 0x44	; 68
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	88 af       	std	Y+56, r24	; 0x38
    26fa:	99 af       	std	Y+57, r25	; 0x39
    26fc:	aa af       	std	Y+58, r26	; 0x3a
    26fe:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2700:	68 ad       	ldd	r22, Y+56	; 0x38
    2702:	79 ad       	ldd	r23, Y+57	; 0x39
    2704:	8a ad       	ldd	r24, Y+58	; 0x3a
    2706:	9b ad       	ldd	r25, Y+59	; 0x3b
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e8       	ldi	r20, 0x80	; 128
    270e:	5f e3       	ldi	r21, 0x3F	; 63
    2710:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2714:	88 23       	and	r24, r24
    2716:	2c f4       	brge	.+10     	; 0x2722 <LCD_write_command_4bit+0x382>
		__ticks = 1;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	9f ab       	std	Y+55, r25	; 0x37
    271e:	8e ab       	std	Y+54, r24	; 0x36
    2720:	3f c0       	rjmp	.+126    	; 0x27a0 <LCD_write_command_4bit+0x400>
	else if (__tmp > 65535)
    2722:	68 ad       	ldd	r22, Y+56	; 0x38
    2724:	79 ad       	ldd	r23, Y+57	; 0x39
    2726:	8a ad       	ldd	r24, Y+58	; 0x3a
    2728:	9b ad       	ldd	r25, Y+59	; 0x3b
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	3f ef       	ldi	r19, 0xFF	; 255
    272e:	4f e7       	ldi	r20, 0x7F	; 127
    2730:	57 e4       	ldi	r21, 0x47	; 71
    2732:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2736:	18 16       	cp	r1, r24
    2738:	4c f5       	brge	.+82     	; 0x278c <LCD_write_command_4bit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	6c ad       	ldd	r22, Y+60	; 0x3c
    273c:	7d ad       	ldd	r23, Y+61	; 0x3d
    273e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2740:	9f ad       	ldd	r25, Y+63	; 0x3f
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e2       	ldi	r20, 0x20	; 32
    2748:	51 e4       	ldi	r21, 0x41	; 65
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	bc 01       	movw	r22, r24
    2754:	cd 01       	movw	r24, r26
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9f ab       	std	Y+55, r25	; 0x37
    2760:	8e ab       	std	Y+54, r24	; 0x36
    2762:	0f c0       	rjmp	.+30     	; 0x2782 <LCD_write_command_4bit+0x3e2>
    2764:	88 ec       	ldi	r24, 0xC8	; 200
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	9d ab       	std	Y+53, r25	; 0x35
    276a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    276c:	8c a9       	ldd	r24, Y+52	; 0x34
    276e:	9d a9       	ldd	r25, Y+53	; 0x35
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_write_command_4bit+0x3d0>
    2774:	9d ab       	std	Y+53, r25	; 0x35
    2776:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2778:	8e a9       	ldd	r24, Y+54	; 0x36
    277a:	9f a9       	ldd	r25, Y+55	; 0x37
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	9f ab       	std	Y+55, r25	; 0x37
    2780:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2782:	8e a9       	ldd	r24, Y+54	; 0x36
    2784:	9f a9       	ldd	r25, Y+55	; 0x37
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	69 f7       	brne	.-38     	; 0x2764 <LCD_write_command_4bit+0x3c4>
    278a:	2d c0       	rjmp	.+90     	; 0x27e6 <LCD_write_command_4bit+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278c:	68 ad       	ldd	r22, Y+56	; 0x38
    278e:	79 ad       	ldd	r23, Y+57	; 0x39
    2790:	8a ad       	ldd	r24, Y+58	; 0x3a
    2792:	9b ad       	ldd	r25, Y+59	; 0x3b
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9f ab       	std	Y+55, r25	; 0x37
    279e:	8e ab       	std	Y+54, r24	; 0x36
    27a0:	8e a9       	ldd	r24, Y+54	; 0x36
    27a2:	9f a9       	ldd	r25, Y+55	; 0x37
    27a4:	9b ab       	std	Y+51, r25	; 0x33
    27a6:	8a ab       	std	Y+50, r24	; 0x32
    27a8:	8a a9       	ldd	r24, Y+50	; 0x32
    27aa:	9b a9       	ldd	r25, Y+51	; 0x33
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <LCD_write_command_4bit+0x40c>
    27b0:	9b ab       	std	Y+51, r25	; 0x33
    27b2:	8a ab       	std	Y+50, r24	; 0x32
    27b4:	18 c0       	rjmp	.+48     	; 0x27e6 <LCD_write_command_4bit+0x446>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27b6:	fe 01       	movw	r30, r28
    27b8:	ef 5b       	subi	r30, 0xBF	; 191
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	fe 01       	movw	r30, r28
    27ce:	e0 5c       	subi	r30, 0xC0	; 192
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 83       	st	Z, r24
    27d4:	fe 01       	movw	r30, r28
    27d6:	e0 5c       	subi	r30, 0xC0	; 192
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27de:	89 a9       	ldd	r24, Y+49	; 0x31
    27e0:	8a 95       	dec	r24
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_write_command_4bit+0x440>
    27e4:	89 ab       	std	Y+49, r24	; 0x31
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    27e6:	fe 01       	movw	r30, r28
    27e8:	ee 59       	subi	r30, 0x9E	; 158
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	84 e0       	ldi	r24, 0x04	; 4
    27ee:	80 83       	st	Z, r24
    27f0:	26 c0       	rjmp	.+76     	; 0x283e <LCD_write_command_4bit+0x49e>

		DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i));
    27f2:	fe 01       	movw	r30, r28
    27f4:	ed 59       	subi	r30, 0x9D	; 157
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	fe 01       	movw	r30, r28
    2800:	ee 59       	subi	r30, 0x9E	; 158
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a9 01       	movw	r20, r18
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <LCD_write_command_4bit+0x472>
    280e:	55 95       	asr	r21
    2810:	47 95       	ror	r20
    2812:	8a 95       	dec	r24
    2814:	e2 f7       	brpl	.-8      	; 0x280e <LCD_write_command_4bit+0x46e>
    2816:	ca 01       	movw	r24, r20
    2818:	98 2f       	mov	r25, r24
    281a:	91 70       	andi	r25, 0x01	; 1
    281c:	fe 01       	movw	r30, r28
    281e:	ee 59       	subi	r30, 0x9E	; 158
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	60 81       	ld	r22, Z
    2826:	49 2f       	mov	r20, r25
    2828:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_void_assign_pin>
	 *  any change in this sequence will result in a wrong behavior
	 *  i will try to make it more generic in the next versions
	 *
	 */

	for(u8 i = 4; i < 8; i++){
    282c:	de 01       	movw	r26, r28
    282e:	ae 59       	subi	r26, 0x9E	; 158
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	ee 59       	subi	r30, 0x9E	; 158
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	8c 93       	st	X, r24
    283e:	fe 01       	movw	r30, r28
    2840:	ee 59       	subi	r30, 0x9E	; 158
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	88 30       	cpi	r24, 0x08	; 8
    2848:	a0 f2       	brcs	.-88     	; 0x27f2 <LCD_write_command_4bit+0x452>
		// the for loop assigns the data value in the function input
		// by starting by the most significant 4 bits b4-b7

	}
	// set enable to low to send the lower nibble
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 e2       	ldi	r26, 0x20	; 32
    2858:	b1 e4       	ldi	r27, 0x41	; 65
    285a:	8d a7       	std	Y+45, r24	; 0x2d
    285c:	9e a7       	std	Y+46, r25	; 0x2e
    285e:	af a7       	std	Y+47, r26	; 0x2f
    2860:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2862:	6d a5       	ldd	r22, Y+45	; 0x2d
    2864:	7e a5       	ldd	r23, Y+46	; 0x2e
    2866:	8f a5       	ldd	r24, Y+47	; 0x2f
    2868:	98 a9       	ldd	r25, Y+48	; 0x30
    286a:	2b ea       	ldi	r18, 0xAB	; 171
    286c:	3a ea       	ldi	r19, 0xAA	; 170
    286e:	4a e2       	ldi	r20, 0x2A	; 42
    2870:	50 e4       	ldi	r21, 0x40	; 64
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	89 a7       	std	Y+41, r24	; 0x29
    287c:	9a a7       	std	Y+42, r25	; 0x2a
    287e:	ab a7       	std	Y+43, r26	; 0x2b
    2880:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2882:	69 a5       	ldd	r22, Y+41	; 0x29
    2884:	7a a5       	ldd	r23, Y+42	; 0x2a
    2886:	8b a5       	ldd	r24, Y+43	; 0x2b
    2888:	9c a5       	ldd	r25, Y+44	; 0x2c
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	1c f4       	brge	.+6      	; 0x28a0 <LCD_write_command_4bit+0x500>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	88 a7       	std	Y+40, r24	; 0x28
    289e:	91 c0       	rjmp	.+290    	; 0x29c2 <LCD_write_command_4bit+0x622>
	else if (__tmp > 255)
    28a0:	69 a5       	ldd	r22, Y+41	; 0x29
    28a2:	7a a5       	ldd	r23, Y+42	; 0x2a
    28a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4f e7       	ldi	r20, 0x7F	; 127
    28ae:	53 e4       	ldi	r21, 0x43	; 67
    28b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b4:	18 16       	cp	r1, r24
    28b6:	0c f0       	brlt	.+2      	; 0x28ba <LCD_write_command_4bit+0x51a>
    28b8:	7b c0       	rjmp	.+246    	; 0x29b0 <LCD_write_command_4bit+0x610>
	{
		_delay_ms(__us / 1000.0);
    28ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    28bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    28be:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c0:	98 a9       	ldd	r25, Y+48	; 0x30
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	54 e4       	ldi	r21, 0x44	; 68
    28ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8c a3       	std	Y+36, r24	; 0x24
    28d4:	9d a3       	std	Y+37, r25	; 0x25
    28d6:	ae a3       	std	Y+38, r26	; 0x26
    28d8:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28da:	6c a1       	ldd	r22, Y+36	; 0x24
    28dc:	7d a1       	ldd	r23, Y+37	; 0x25
    28de:	8e a1       	ldd	r24, Y+38	; 0x26
    28e0:	9f a1       	ldd	r25, Y+39	; 0x27
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	4a ef       	ldi	r20, 0xFA	; 250
    28e8:	54 e4       	ldi	r21, 0x44	; 68
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	88 a3       	std	Y+32, r24	; 0x20
    28f4:	99 a3       	std	Y+33, r25	; 0x21
    28f6:	aa a3       	std	Y+34, r26	; 0x22
    28f8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    28fa:	68 a1       	ldd	r22, Y+32	; 0x20
    28fc:	79 a1       	ldd	r23, Y+33	; 0x21
    28fe:	8a a1       	ldd	r24, Y+34	; 0x22
    2900:	9b a1       	ldd	r25, Y+35	; 0x23
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e8       	ldi	r20, 0x80	; 128
    2908:	5f e3       	ldi	r21, 0x3F	; 63
    290a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    290e:	88 23       	and	r24, r24
    2910:	2c f4       	brge	.+10     	; 0x291c <LCD_write_command_4bit+0x57c>
		__ticks = 1;
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9f 8f       	std	Y+31, r25	; 0x1f
    2918:	8e 8f       	std	Y+30, r24	; 0x1e
    291a:	3f c0       	rjmp	.+126    	; 0x299a <LCD_write_command_4bit+0x5fa>
	else if (__tmp > 65535)
    291c:	68 a1       	ldd	r22, Y+32	; 0x20
    291e:	79 a1       	ldd	r23, Y+33	; 0x21
    2920:	8a a1       	ldd	r24, Y+34	; 0x22
    2922:	9b a1       	ldd	r25, Y+35	; 0x23
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	3f ef       	ldi	r19, 0xFF	; 255
    2928:	4f e7       	ldi	r20, 0x7F	; 127
    292a:	57 e4       	ldi	r21, 0x47	; 71
    292c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2930:	18 16       	cp	r1, r24
    2932:	4c f5       	brge	.+82     	; 0x2986 <LCD_write_command_4bit+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2934:	6c a1       	ldd	r22, Y+36	; 0x24
    2936:	7d a1       	ldd	r23, Y+37	; 0x25
    2938:	8e a1       	ldd	r24, Y+38	; 0x26
    293a:	9f a1       	ldd	r25, Y+39	; 0x27
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e2       	ldi	r20, 0x20	; 32
    2942:	51 e4       	ldi	r21, 0x41	; 65
    2944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9f 8f       	std	Y+31, r25	; 0x1f
    295a:	8e 8f       	std	Y+30, r24	; 0x1e
    295c:	0f c0       	rjmp	.+30     	; 0x297c <LCD_write_command_4bit+0x5dc>
    295e:	88 ec       	ldi	r24, 0xC8	; 200
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9d 8f       	std	Y+29, r25	; 0x1d
    2964:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2966:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2968:	9d 8d       	ldd	r25, Y+29	; 0x1d
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <LCD_write_command_4bit+0x5ca>
    296e:	9d 8f       	std	Y+29, r25	; 0x1d
    2970:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2972:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2974:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	9f 8f       	std	Y+31, r25	; 0x1f
    297a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    297e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	69 f7       	brne	.-38     	; 0x295e <LCD_write_command_4bit+0x5be>
    2984:	24 c0       	rjmp	.+72     	; 0x29ce <LCD_write_command_4bit+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	68 a1       	ldd	r22, Y+32	; 0x20
    2988:	79 a1       	ldd	r23, Y+33	; 0x21
    298a:	8a a1       	ldd	r24, Y+34	; 0x22
    298c:	9b a1       	ldd	r25, Y+35	; 0x23
    298e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	9f 8f       	std	Y+31, r25	; 0x1f
    2998:	8e 8f       	std	Y+30, r24	; 0x1e
    299a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    299c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    299e:	9b 8f       	std	Y+27, r25	; 0x1b
    29a0:	8a 8f       	std	Y+26, r24	; 0x1a
    29a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <LCD_write_command_4bit+0x606>
    29aa:	9b 8f       	std	Y+27, r25	; 0x1b
    29ac:	8a 8f       	std	Y+26, r24	; 0x1a
    29ae:	0f c0       	rjmp	.+30     	; 0x29ce <LCD_write_command_4bit+0x62e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29b0:	69 a5       	ldd	r22, Y+41	; 0x29
    29b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    29b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	88 a7       	std	Y+40, r24	; 0x28
    29c2:	88 a5       	ldd	r24, Y+40	; 0x28
    29c4:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29c6:	89 8d       	ldd	r24, Y+25	; 0x19
    29c8:	8a 95       	dec	r24
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_write_command_4bit+0x628>
    29cc:	89 8f       	std	Y+25, r24	; 0x19
	//delay to smooth things out
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a0 e8       	ldi	r26, 0x80	; 128
    29dc:	bf e3       	ldi	r27, 0x3F	; 63
    29de:	8d 8b       	std	Y+21, r24	; 0x15
    29e0:	9e 8b       	std	Y+22, r25	; 0x16
    29e2:	af 8b       	std	Y+23, r26	; 0x17
    29e4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29e6:	6d 89       	ldd	r22, Y+21	; 0x15
    29e8:	7e 89       	ldd	r23, Y+22	; 0x16
    29ea:	8f 89       	ldd	r24, Y+23	; 0x17
    29ec:	98 8d       	ldd	r25, Y+24	; 0x18
    29ee:	2b ea       	ldi	r18, 0xAB	; 171
    29f0:	3a ea       	ldi	r19, 0xAA	; 170
    29f2:	4a e2       	ldi	r20, 0x2A	; 42
    29f4:	50 e4       	ldi	r21, 0x40	; 64
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	89 8b       	std	Y+17, r24	; 0x11
    2a00:	9a 8b       	std	Y+18, r25	; 0x12
    2a02:	ab 8b       	std	Y+19, r26	; 0x13
    2a04:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a06:	69 89       	ldd	r22, Y+17	; 0x11
    2a08:	7a 89       	ldd	r23, Y+18	; 0x12
    2a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e8       	ldi	r20, 0x80	; 128
    2a14:	5f e3       	ldi	r21, 0x3F	; 63
    2a16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a1a:	88 23       	and	r24, r24
    2a1c:	1c f4       	brge	.+6      	; 0x2a24 <LCD_write_command_4bit+0x684>
		__ticks = 1;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	88 8b       	std	Y+16, r24	; 0x10
    2a22:	91 c0       	rjmp	.+290    	; 0x2b46 <LCD_write_command_4bit+0x7a6>
	else if (__tmp > 255)
    2a24:	69 89       	ldd	r22, Y+17	; 0x11
    2a26:	7a 89       	ldd	r23, Y+18	; 0x12
    2a28:	8b 89       	ldd	r24, Y+19	; 0x13
    2a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4f e7       	ldi	r20, 0x7F	; 127
    2a32:	53 e4       	ldi	r21, 0x43	; 67
    2a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a38:	18 16       	cp	r1, r24
    2a3a:	0c f0       	brlt	.+2      	; 0x2a3e <LCD_write_command_4bit+0x69e>
    2a3c:	7b c0       	rjmp	.+246    	; 0x2b34 <LCD_write_command_4bit+0x794>
	{
		_delay_ms(__us / 1000.0);
    2a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a40:	7e 89       	ldd	r23, Y+22	; 0x16
    2a42:	8f 89       	ldd	r24, Y+23	; 0x17
    2a44:	98 8d       	ldd	r25, Y+24	; 0x18
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4a e7       	ldi	r20, 0x7A	; 122
    2a4c:	54 e4       	ldi	r21, 0x44	; 68
    2a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	8c 87       	std	Y+12, r24	; 0x0c
    2a58:	9d 87       	std	Y+13, r25	; 0x0d
    2a5a:	ae 87       	std	Y+14, r26	; 0x0e
    2a5c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a60:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a62:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a64:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a ef       	ldi	r20, 0xFA	; 250
    2a6c:	54 e4       	ldi	r21, 0x44	; 68
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	88 87       	std	Y+8, r24	; 0x08
    2a78:	99 87       	std	Y+9, r25	; 0x09
    2a7a:	aa 87       	std	Y+10, r26	; 0x0a
    2a7c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a7e:	68 85       	ldd	r22, Y+8	; 0x08
    2a80:	79 85       	ldd	r23, Y+9	; 0x09
    2a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <LCD_write_command_4bit+0x700>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9f 83       	std	Y+7, r25	; 0x07
    2a9c:	8e 83       	std	Y+6, r24	; 0x06
    2a9e:	3f c0       	rjmp	.+126    	; 0x2b1e <LCD_write_command_4bit+0x77e>
	else if (__tmp > 65535)
    2aa0:	68 85       	ldd	r22, Y+8	; 0x08
    2aa2:	79 85       	ldd	r23, Y+9	; 0x09
    2aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	4c f5       	brge	.+82     	; 0x2b0a <LCD_write_command_4bit+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aba:	7d 85       	ldd	r23, Y+13	; 0x0d
    2abc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2abe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9f 83       	std	Y+7, r25	; 0x07
    2ade:	8e 83       	std	Y+6, r24	; 0x06
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <LCD_write_command_4bit+0x760>
    2ae2:	88 ec       	ldi	r24, 0xC8	; 200
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9d 83       	std	Y+5, r25	; 0x05
    2ae8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	9d 81       	ldd	r25, Y+5	; 0x05
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_write_command_4bit+0x74e>
    2af2:	9d 83       	std	Y+5, r25	; 0x05
    2af4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	9f 81       	ldd	r25, Y+7	; 0x07
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9f 83       	std	Y+7, r25	; 0x07
    2afe:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b00:	8e 81       	ldd	r24, Y+6	; 0x06
    2b02:	9f 81       	ldd	r25, Y+7	; 0x07
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <LCD_write_command_4bit+0x742>
    2b08:	24 c0       	rjmp	.+72     	; 0x2b52 <LCD_write_command_4bit+0x7b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	68 85       	ldd	r22, Y+8	; 0x08
    2b0c:	79 85       	ldd	r23, Y+9	; 0x09
    2b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9f 83       	std	Y+7, r25	; 0x07
    2b1c:	8e 83       	std	Y+6, r24	; 0x06
    2b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b20:	9f 81       	ldd	r25, Y+7	; 0x07
    2b22:	9b 83       	std	Y+3, r25	; 0x03
    2b24:	8a 83       	std	Y+2, r24	; 0x02
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <LCD_write_command_4bit+0x78a>
    2b2e:	9b 83       	std	Y+3, r25	; 0x03
    2b30:	8a 83       	std	Y+2, r24	; 0x02
    2b32:	0f c0       	rjmp	.+30     	; 0x2b52 <LCD_write_command_4bit+0x7b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b34:	69 89       	ldd	r22, Y+17	; 0x11
    2b36:	7a 89       	ldd	r23, Y+18	; 0x12
    2b38:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	88 8b       	std	Y+16, r24	; 0x10
    2b46:	88 89       	ldd	r24, Y+16	; 0x10
    2b48:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	8a 95       	dec	r24
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <LCD_write_command_4bit+0x7ac>
    2b50:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 59       	subi	r30, 0x9F	; 159
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	84 e0       	ldi	r24, 0x04	; 4
    2b5a:	80 83       	st	Z, r24
    2b5c:	27 c0       	rjmp	.+78     	; 0x2bac <LCD_write_command_4bit+0x80c>

			DIO_void_assign_pin(lcd_data_port, i, get_Bit(copy_command_4bit,i-4));
    2b5e:	fe 01       	movw	r30, r28
    2b60:	ed 59       	subi	r30, 0x9D	; 157
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	ef 59       	subi	r30, 0x9F	; 159
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	80 81       	ld	r24, Z
    2b72:	88 2f       	mov	r24, r24
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	04 97       	sbiw	r24, 0x04	; 4
    2b78:	f9 01       	movw	r30, r18
    2b7a:	02 c0       	rjmp	.+4      	; 0x2b80 <LCD_write_command_4bit+0x7e0>
    2b7c:	f5 95       	asr	r31
    2b7e:	e7 95       	ror	r30
    2b80:	8a 95       	dec	r24
    2b82:	e2 f7       	brpl	.-8      	; 0x2b7c <LCD_write_command_4bit+0x7dc>
    2b84:	cf 01       	movw	r24, r30
    2b86:	98 2f       	mov	r25, r24
    2b88:	91 70       	andi	r25, 0x01	; 1
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ef 59       	subi	r30, 0x9F	; 159
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	60 81       	ld	r22, Z
    2b94:	49 2f       	mov	r20, r25
    2b96:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_void_assign_pin>
	_delay_us(10);
	//enable HIGH
	DIO_void_set_pin(lcd_control_port, lcd_enable);
	_delay_us(1);
	//send lower nibble
	for(u8 i = 4; i < 8; i++){
    2b9a:	de 01       	movw	r26, r28
    2b9c:	af 59       	subi	r26, 0x9F	; 159
    2b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	ef 59       	subi	r30, 0x9F	; 159
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8f 5f       	subi	r24, 0xFF	; 255
    2baa:	8c 93       	st	X, r24
    2bac:	fe 01       	movw	r30, r28
    2bae:	ef 59       	subi	r30, 0x9F	; 159
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	88 30       	cpi	r24, 0x08	; 8
    2bb6:	98 f2       	brcs	.-90     	; 0x2b5e <LCD_write_command_4bit+0x7be>
			// the for loop assigns the data value in the function input
			// by starting by the least significant 4 bits b0-b3

		}
	//enable low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>


}
    2bc0:	cd 59       	subi	r28, 0x9D	; 157
    2bc2:	df 4f       	sbci	r29, 0xFF	; 255
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <LCD_function_Set_4bit>:

static void LCD_function_Set_4bit(){
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	cb 5a       	subi	r28, 0xAB	; 171
    2be6:	d0 40       	sbci	r29, 0x00	; 0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
			 *
			 */



	DIO_void_clear_pin(lcd_control_port, lcd_RS);// RS:0 to select instruction register
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	62 e0       	ldi	r22, 0x02	; 2
    2bf6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
	DIO_void_clear_pin(lcd_control_port, lcd_RW);// RW:0 write operation
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    2c02:	fe 01       	movw	r30, r28
    2c04:	eb 55       	subi	r30, 0x5B	; 91
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	a0 e8       	ldi	r26, 0x80	; 128
    2c0e:	bf e3       	ldi	r27, 0x3F	; 63
    2c10:	80 83       	st	Z, r24
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	a2 83       	std	Z+2, r26	; 0x02
    2c16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c18:	8e 01       	movw	r16, r28
    2c1a:	0f 55       	subi	r16, 0x5F	; 95
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	fe 01       	movw	r30, r28
    2c20:	eb 55       	subi	r30, 0x5B	; 91
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	2b ea       	ldi	r18, 0xAB	; 171
    2c2e:	3a ea       	ldi	r19, 0xAA	; 170
    2c30:	4a e2       	ldi	r20, 0x2A	; 42
    2c32:	50 e4       	ldi	r21, 0x40	; 64
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	80 83       	st	Z, r24
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	a2 83       	std	Z+2, r26	; 0x02
    2c44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c46:	fe 01       	movw	r30, r28
    2c48:	ef 55       	subi	r30, 0x5F	; 95
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	34 f4       	brge	.+12     	; 0x2c70 <LCD_function_Set_4bit+0x98>
		__ticks = 1;
    2c64:	fe 01       	movw	r30, r28
    2c66:	e0 56       	subi	r30, 0x60	; 96
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	80 83       	st	Z, r24
    2c6e:	e0 c0       	rjmp	.+448    	; 0x2e30 <LCD_function_Set_4bit+0x258>
	else if (__tmp > 255)
    2c70:	fe 01       	movw	r30, r28
    2c72:	ef 55       	subi	r30, 0x5F	; 95
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	4f e7       	ldi	r20, 0x7F	; 127
    2c84:	53 e4       	ldi	r21, 0x43	; 67
    2c86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c8a:	18 16       	cp	r1, r24
    2c8c:	0c f0       	brlt	.+2      	; 0x2c90 <LCD_function_Set_4bit+0xb8>
    2c8e:	c0 c0       	rjmp	.+384    	; 0x2e10 <LCD_function_Set_4bit+0x238>
	{
		_delay_ms(__us / 1000.0);
    2c90:	fe 01       	movw	r30, r28
    2c92:	eb 55       	subi	r30, 0x5B	; 91
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	60 81       	ld	r22, Z
    2c98:	71 81       	ldd	r23, Z+1	; 0x01
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4a e7       	ldi	r20, 0x7A	; 122
    2ca4:	54 e4       	ldi	r21, 0x44	; 68
    2ca6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e4 56       	subi	r30, 0x64	; 100
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 83       	st	Z, r24
    2cb6:	91 83       	std	Z+1, r25	; 0x01
    2cb8:	a2 83       	std	Z+2, r26	; 0x02
    2cba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	8e 01       	movw	r16, r28
    2cbe:	08 56       	subi	r16, 0x68	; 104
    2cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e4 56       	subi	r30, 0x64	; 100
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a ef       	ldi	r20, 0xFA	; 250
    2cd6:	54 e4       	ldi	r21, 0x44	; 68
    2cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	80 83       	st	Z, r24
    2ce4:	91 83       	std	Z+1, r25	; 0x01
    2ce6:	a2 83       	std	Z+2, r26	; 0x02
    2ce8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cea:	fe 01       	movw	r30, r28
    2cec:	e8 56       	subi	r30, 0x68	; 104
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e8       	ldi	r20, 0x80	; 128
    2cfe:	5f e3       	ldi	r21, 0x3F	; 63
    2d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d04:	88 23       	and	r24, r24
    2d06:	44 f4       	brge	.+16     	; 0x2d18 <LCD_function_Set_4bit+0x140>
		__ticks = 1;
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ea 56       	subi	r30, 0x6A	; 106
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	80 83       	st	Z, r24
    2d16:	64 c0       	rjmp	.+200    	; 0x2de0 <LCD_function_Set_4bit+0x208>
	else if (__tmp > 65535)
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e8 56       	subi	r30, 0x68	; 104
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	0c f0       	brlt	.+2      	; 0x2d38 <LCD_function_Set_4bit+0x160>
    2d36:	43 c0       	rjmp	.+134    	; 0x2dbe <LCD_function_Set_4bit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e4 56       	subi	r30, 0x64	; 100
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	60 81       	ld	r22, Z
    2d40:	71 81       	ldd	r23, Z+1	; 0x01
    2d42:	82 81       	ldd	r24, Z+2	; 0x02
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8e 01       	movw	r16, r28
    2d58:	0a 56       	subi	r16, 0x6A	; 106
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	f8 01       	movw	r30, r16
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
    2d6e:	1f c0       	rjmp	.+62     	; 0x2dae <LCD_function_Set_4bit+0x1d6>
    2d70:	fe 01       	movw	r30, r28
    2d72:	ec 56       	subi	r30, 0x6C	; 108
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	88 ec       	ldi	r24, 0xC8	; 200
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ec 56       	subi	r30, 0x6C	; 108
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_function_Set_4bit+0x1b0>
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ec 56       	subi	r30, 0x6C	; 108
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d96:	de 01       	movw	r26, r28
    2d98:	aa 56       	subi	r26, 0x6A	; 106
    2d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ea 56       	subi	r30, 0x6A	; 106
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	11 96       	adiw	r26, 0x01	; 1
    2daa:	9c 93       	st	X, r25
    2dac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dae:	fe 01       	movw	r30, r28
    2db0:	ea 56       	subi	r30, 0x6A	; 106
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	00 97       	sbiw	r24, 0x00	; 0
    2dba:	d1 f6       	brne	.-76     	; 0x2d70 <LCD_function_Set_4bit+0x198>
    2dbc:	4b c0       	rjmp	.+150    	; 0x2e54 <LCD_function_Set_4bit+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	0a 56       	subi	r16, 0x6A	; 106
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	e8 56       	subi	r30, 0x68	; 104
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	60 81       	ld	r22, Z
    2dcc:	71 81       	ldd	r23, Z+1	; 0x01
    2dce:	82 81       	ldd	r24, Z+2	; 0x02
    2dd0:	93 81       	ldd	r25, Z+3	; 0x03
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	f8 01       	movw	r30, r16
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
    2de0:	de 01       	movw	r26, r28
    2de2:	ae 56       	subi	r26, 0x6E	; 110
    2de4:	bf 4f       	sbci	r27, 0xFF	; 255
    2de6:	fe 01       	movw	r30, r28
    2de8:	ea 56       	subi	r30, 0x6A	; 106
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	11 96       	adiw	r26, 0x01	; 1
    2df2:	9c 93       	st	X, r25
    2df4:	8e 93       	st	-X, r24
    2df6:	fe 01       	movw	r30, r28
    2df8:	ee 56       	subi	r30, 0x6E	; 110
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <LCD_function_Set_4bit+0x228>
    2e04:	fe 01       	movw	r30, r28
    2e06:	ee 56       	subi	r30, 0x6E	; 110
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	91 83       	std	Z+1, r25	; 0x01
    2e0c:	80 83       	st	Z, r24
    2e0e:	22 c0       	rjmp	.+68     	; 0x2e54 <LCD_function_Set_4bit+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e10:	8e 01       	movw	r16, r28
    2e12:	00 56       	subi	r16, 0x60	; 96
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	fe 01       	movw	r30, r28
    2e18:	ef 55       	subi	r30, 0x5F	; 95
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	60 81       	ld	r22, Z
    2e1e:	71 81       	ldd	r23, Z+1	; 0x01
    2e20:	82 81       	ldd	r24, Z+2	; 0x02
    2e22:	93 81       	ldd	r25, Z+3	; 0x03
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	80 83       	st	Z, r24
    2e30:	de 01       	movw	r26, r28
    2e32:	af 56       	subi	r26, 0x6F	; 111
    2e34:	bf 4f       	sbci	r27, 0xFF	; 255
    2e36:	fe 01       	movw	r30, r28
    2e38:	e0 56       	subi	r30, 0x60	; 96
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e40:	fe 01       	movw	r30, r28
    2e42:	ef 56       	subi	r30, 0x6F	; 111
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 81       	ld	r24, Z
    2e48:	8a 95       	dec	r24
    2e4a:	f1 f7       	brne	.-4      	; 0x2e48 <LCD_function_Set_4bit+0x270>
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ef 56       	subi	r30, 0x6F	; 111
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 83       	st	Z, r24
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e3 57       	subi	r30, 0x73	; 115
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e8       	ldi	r26, 0x80	; 128
    2e68:	bf e3       	ldi	r27, 0x3F	; 63
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	a2 83       	std	Z+2, r26	; 0x02
    2e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e72:	8e 01       	movw	r16, r28
    2e74:	07 57       	subi	r16, 0x77	; 119
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e3 57       	subi	r30, 0x73	; 115
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	2b ea       	ldi	r18, 0xAB	; 171
    2e88:	3a ea       	ldi	r19, 0xAA	; 170
    2e8a:	4a e2       	ldi	r20, 0x2A	; 42
    2e8c:	50 e4       	ldi	r21, 0x40	; 64
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e7 57       	subi	r30, 0x77	; 119
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	60 81       	ld	r22, Z
    2ea8:	71 81       	ldd	r23, Z+1	; 0x01
    2eaa:	82 81       	ldd	r24, Z+2	; 0x02
    2eac:	93 81       	ldd	r25, Z+3	; 0x03
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	34 f4       	brge	.+12     	; 0x2eca <LCD_function_Set_4bit+0x2f2>
		__ticks = 1;
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e8 57       	subi	r30, 0x78	; 120
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	80 83       	st	Z, r24
    2ec8:	e0 c0       	rjmp	.+448    	; 0x308a <LCD_function_Set_4bit+0x4b2>
	else if (__tmp > 255)
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e7 57       	subi	r30, 0x77	; 119
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	4f e7       	ldi	r20, 0x7F	; 127
    2ede:	53 e4       	ldi	r21, 0x43	; 67
    2ee0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee4:	18 16       	cp	r1, r24
    2ee6:	0c f0       	brlt	.+2      	; 0x2eea <LCD_function_Set_4bit+0x312>
    2ee8:	c0 c0       	rjmp	.+384    	; 0x306a <LCD_function_Set_4bit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2eea:	fe 01       	movw	r30, r28
    2eec:	e3 57       	subi	r30, 0x73	; 115
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	4a e7       	ldi	r20, 0x7A	; 122
    2efe:	54 e4       	ldi	r21, 0x44	; 68
    2f00:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ec 57       	subi	r30, 0x7C	; 124
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 83       	st	Z, r24
    2f10:	91 83       	std	Z+1, r25	; 0x01
    2f12:	a2 83       	std	Z+2, r26	; 0x02
    2f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f16:	8e 01       	movw	r16, r28
    2f18:	00 58       	subi	r16, 0x80	; 128
    2f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ec 57       	subi	r30, 0x7C	; 124
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4a ef       	ldi	r20, 0xFA	; 250
    2f30:	54 e4       	ldi	r21, 0x44	; 68
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	f8 01       	movw	r30, r16
    2f3c:	80 83       	st	Z, r24
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	a2 83       	std	Z+2, r26	; 0x02
    2f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f44:	fe 01       	movw	r30, r28
    2f46:	e0 58       	subi	r30, 0x80	; 128
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	44 f4       	brge	.+16     	; 0x2f72 <LCD_function_Set_4bit+0x39a>
		__ticks = 1;
    2f62:	fe 01       	movw	r30, r28
    2f64:	e2 58       	subi	r30, 0x82	; 130
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	64 c0       	rjmp	.+200    	; 0x303a <LCD_function_Set_4bit+0x462>
	else if (__tmp > 65535)
    2f72:	fe 01       	movw	r30, r28
    2f74:	e0 58       	subi	r30, 0x80	; 128
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	60 81       	ld	r22, Z
    2f7a:	71 81       	ldd	r23, Z+1	; 0x01
    2f7c:	82 81       	ldd	r24, Z+2	; 0x02
    2f7e:	93 81       	ldd	r25, Z+3	; 0x03
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <LCD_function_Set_4bit+0x3ba>
    2f90:	43 c0       	rjmp	.+134    	; 0x3018 <LCD_function_Set_4bit+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f92:	fe 01       	movw	r30, r28
    2f94:	ec 57       	subi	r30, 0x7C	; 124
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	02 58       	subi	r16, 0x82	; 130
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	91 83       	std	Z+1, r25	; 0x01
    2fc6:	80 83       	st	Z, r24
    2fc8:	1f c0       	rjmp	.+62     	; 0x3008 <LCD_function_Set_4bit+0x430>
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e4 58       	subi	r30, 0x84	; 132
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	88 ec       	ldi	r24, 0xC8	; 200
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e4 58       	subi	r30, 0x84	; 132
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <LCD_function_Set_4bit+0x40a>
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e4 58       	subi	r30, 0x84	; 132
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff0:	de 01       	movw	r26, r28
    2ff2:	a2 58       	subi	r26, 0x82	; 130
    2ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e2 58       	subi	r30, 0x82	; 130
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	11 96       	adiw	r26, 0x01	; 1
    3004:	9c 93       	st	X, r25
    3006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3008:	fe 01       	movw	r30, r28
    300a:	e2 58       	subi	r30, 0x82	; 130
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	d1 f6       	brne	.-76     	; 0x2fca <LCD_function_Set_4bit+0x3f2>
    3016:	4b c0       	rjmp	.+150    	; 0x30ae <LCD_function_Set_4bit+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3018:	8e 01       	movw	r16, r28
    301a:	02 58       	subi	r16, 0x82	; 130
    301c:	1f 4f       	sbci	r17, 0xFF	; 255
    301e:	fe 01       	movw	r30, r28
    3020:	e0 58       	subi	r30, 0x80	; 128
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	f8 01       	movw	r30, r16
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
    303a:	de 01       	movw	r26, r28
    303c:	a6 58       	subi	r26, 0x86	; 134
    303e:	bf 4f       	sbci	r27, 0xFF	; 255
    3040:	fe 01       	movw	r30, r28
    3042:	e2 58       	subi	r30, 0x82	; 130
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	11 96       	adiw	r26, 0x01	; 1
    304c:	9c 93       	st	X, r25
    304e:	8e 93       	st	-X, r24
    3050:	fe 01       	movw	r30, r28
    3052:	e6 58       	subi	r30, 0x86	; 134
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	f1 f7       	brne	.-4      	; 0x305a <LCD_function_Set_4bit+0x482>
    305e:	fe 01       	movw	r30, r28
    3060:	e6 58       	subi	r30, 0x86	; 134
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	80 83       	st	Z, r24
    3068:	22 c0       	rjmp	.+68     	; 0x30ae <LCD_function_Set_4bit+0x4d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    306a:	8e 01       	movw	r16, r28
    306c:	08 57       	subi	r16, 0x78	; 120
    306e:	1f 4f       	sbci	r17, 0xFF	; 255
    3070:	fe 01       	movw	r30, r28
    3072:	e7 57       	subi	r30, 0x77	; 119
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	f8 01       	movw	r30, r16
    3088:	80 83       	st	Z, r24
    308a:	de 01       	movw	r26, r28
    308c:	a7 58       	subi	r26, 0x87	; 135
    308e:	bf 4f       	sbci	r27, 0xFF	; 255
    3090:	fe 01       	movw	r30, r28
    3092:	e8 57       	subi	r30, 0x78	; 120
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	80 81       	ld	r24, Z
    3098:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    309a:	fe 01       	movw	r30, r28
    309c:	e7 58       	subi	r30, 0x87	; 135
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	8a 95       	dec	r24
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <LCD_function_Set_4bit+0x4ca>
    30a6:	fe 01       	movw	r30, r28
    30a8:	e7 58       	subi	r30, 0x87	; 135
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    30ae:	fe 01       	movw	r30, r28
    30b0:	e5 55       	subi	r30, 0x55	; 85
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	10 82       	st	Z, r1
    30b6:	23 c0       	rjmp	.+70     	; 0x30fe <LCD_function_Set_4bit+0x526>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    30b8:	fe 01       	movw	r30, r28
    30ba:	e5 55       	subi	r30, 0x55	; 85
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 81       	ld	r24, Z
    30c0:	48 2f       	mov	r20, r24
    30c2:	4c 5f       	subi	r20, 0xFC	; 252
    30c4:	fe 01       	movw	r30, r28
    30c6:	e5 55       	subi	r30, 0x55	; 85
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	80 81       	ld	r24, Z
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <LCD_function_Set_4bit+0x502>
    30d6:	95 95       	asr	r25
    30d8:	87 95       	ror	r24
    30da:	2a 95       	dec	r18
    30dc:	e2 f7       	brpl	.-8      	; 0x30d6 <LCD_function_Set_4bit+0x4fe>
    30de:	98 2f       	mov	r25, r24
    30e0:	91 70       	andi	r25, 0x01	; 1
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	64 2f       	mov	r22, r20
    30e6:	49 2f       	mov	r20, r25
    30e8:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_void_assign_pin>
	_delay_us(1);
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    30ec:	de 01       	movw	r26, r28
    30ee:	a5 55       	subi	r26, 0x55	; 85
    30f0:	bf 4f       	sbci	r27, 0xFF	; 255
    30f2:	fe 01       	movw	r30, r28
    30f4:	e5 55       	subi	r30, 0x55	; 85
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	8f 5f       	subi	r24, 0xFF	; 255
    30fc:	8c 93       	st	X, r24
    30fe:	fe 01       	movw	r30, r28
    3100:	e5 55       	subi	r30, 0x55	; 85
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	80 81       	ld	r24, Z
    3106:	84 30       	cpi	r24, 0x04	; 4
    3108:	b8 f2       	brcs	.-82     	; 0x30b8 <LCD_function_Set_4bit+0x4e0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    3112:	fe 01       	movw	r30, r28
    3114:	eb 58       	subi	r30, 0x8B	; 139
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a0 e2       	ldi	r26, 0x20	; 32
    311e:	b1 e4       	ldi	r27, 0x41	; 65
    3120:	80 83       	st	Z, r24
    3122:	91 83       	std	Z+1, r25	; 0x01
    3124:	a2 83       	std	Z+2, r26	; 0x02
    3126:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3128:	8e 01       	movw	r16, r28
    312a:	0f 58       	subi	r16, 0x8F	; 143
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	fe 01       	movw	r30, r28
    3130:	eb 58       	subi	r30, 0x8B	; 139
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	60 81       	ld	r22, Z
    3136:	71 81       	ldd	r23, Z+1	; 0x01
    3138:	82 81       	ldd	r24, Z+2	; 0x02
    313a:	93 81       	ldd	r25, Z+3	; 0x03
    313c:	2b ea       	ldi	r18, 0xAB	; 171
    313e:	3a ea       	ldi	r19, 0xAA	; 170
    3140:	4a e2       	ldi	r20, 0x2A	; 42
    3142:	50 e4       	ldi	r21, 0x40	; 64
    3144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	f8 01       	movw	r30, r16
    314e:	80 83       	st	Z, r24
    3150:	91 83       	std	Z+1, r25	; 0x01
    3152:	a2 83       	std	Z+2, r26	; 0x02
    3154:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3156:	fe 01       	movw	r30, r28
    3158:	ef 58       	subi	r30, 0x8F	; 143
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	34 f4       	brge	.+12     	; 0x3180 <LCD_function_Set_4bit+0x5a8>
		__ticks = 1;
    3174:	fe 01       	movw	r30, r28
    3176:	e0 59       	subi	r30, 0x90	; 144
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	80 83       	st	Z, r24
    317e:	e0 c0       	rjmp	.+448    	; 0x3340 <LCD_function_Set_4bit+0x768>
	else if (__tmp > 255)
    3180:	fe 01       	movw	r30, r28
    3182:	ef 58       	subi	r30, 0x8F	; 143
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4f e7       	ldi	r20, 0x7F	; 127
    3194:	53 e4       	ldi	r21, 0x43	; 67
    3196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319a:	18 16       	cp	r1, r24
    319c:	0c f0       	brlt	.+2      	; 0x31a0 <LCD_function_Set_4bit+0x5c8>
    319e:	c0 c0       	rjmp	.+384    	; 0x3320 <LCD_function_Set_4bit+0x748>
	{
		_delay_ms(__us / 1000.0);
    31a0:	fe 01       	movw	r30, r28
    31a2:	eb 58       	subi	r30, 0x8B	; 139
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	60 81       	ld	r22, Z
    31a8:	71 81       	ldd	r23, Z+1	; 0x01
    31aa:	82 81       	ldd	r24, Z+2	; 0x02
    31ac:	93 81       	ldd	r25, Z+3	; 0x03
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	4a e7       	ldi	r20, 0x7A	; 122
    31b4:	54 e4       	ldi	r21, 0x44	; 68
    31b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	fe 01       	movw	r30, r28
    31c0:	e4 59       	subi	r30, 0x94	; 148
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	8e 01       	movw	r16, r28
    31ce:	08 59       	subi	r16, 0x98	; 152
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	e4 59       	subi	r30, 0x94	; 148
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a ef       	ldi	r20, 0xFA	; 250
    31e6:	54 e4       	ldi	r21, 0x44	; 68
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fa:	fe 01       	movw	r30, r28
    31fc:	e8 59       	subi	r30, 0x98	; 152
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	60 81       	ld	r22, Z
    3202:	71 81       	ldd	r23, Z+1	; 0x01
    3204:	82 81       	ldd	r24, Z+2	; 0x02
    3206:	93 81       	ldd	r25, Z+3	; 0x03
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	44 f4       	brge	.+16     	; 0x3228 <LCD_function_Set_4bit+0x650>
		__ticks = 1;
    3218:	fe 01       	movw	r30, r28
    321a:	ea 59       	subi	r30, 0x9A	; 154
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	80 83       	st	Z, r24
    3226:	64 c0       	rjmp	.+200    	; 0x32f0 <LCD_function_Set_4bit+0x718>
	else if (__tmp > 65535)
    3228:	fe 01       	movw	r30, r28
    322a:	e8 59       	subi	r30, 0x98	; 152
    322c:	ff 4f       	sbci	r31, 0xFF	; 255
    322e:	60 81       	ld	r22, Z
    3230:	71 81       	ldd	r23, Z+1	; 0x01
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	93 81       	ldd	r25, Z+3	; 0x03
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	0c f0       	brlt	.+2      	; 0x3248 <LCD_function_Set_4bit+0x670>
    3246:	43 c0       	rjmp	.+134    	; 0x32ce <LCD_function_Set_4bit+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3248:	fe 01       	movw	r30, r28
    324a:	e4 59       	subi	r30, 0x94	; 148
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	8e 01       	movw	r16, r28
    3268:	0a 59       	subi	r16, 0x9A	; 154
    326a:	1f 4f       	sbci	r17, 0xFF	; 255
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	f8 01       	movw	r30, r16
    327a:	91 83       	std	Z+1, r25	; 0x01
    327c:	80 83       	st	Z, r24
    327e:	1f c0       	rjmp	.+62     	; 0x32be <LCD_function_Set_4bit+0x6e6>
    3280:	fe 01       	movw	r30, r28
    3282:	ec 59       	subi	r30, 0x9C	; 156
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    328e:	fe 01       	movw	r30, r28
    3290:	ec 59       	subi	r30, 0x9C	; 156
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <LCD_function_Set_4bit+0x6c0>
    329c:	fe 01       	movw	r30, r28
    329e:	ec 59       	subi	r30, 0x9C	; 156
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	91 83       	std	Z+1, r25	; 0x01
    32a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	de 01       	movw	r26, r28
    32a8:	aa 59       	subi	r26, 0x9A	; 154
    32aa:	bf 4f       	sbci	r27, 0xFF	; 255
    32ac:	fe 01       	movw	r30, r28
    32ae:	ea 59       	subi	r30, 0x9A	; 154
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	11 96       	adiw	r26, 0x01	; 1
    32ba:	9c 93       	st	X, r25
    32bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32be:	fe 01       	movw	r30, r28
    32c0:	ea 59       	subi	r30, 0x9A	; 154
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	d1 f6       	brne	.-76     	; 0x3280 <LCD_function_Set_4bit+0x6a8>
    32cc:	4b c0       	rjmp	.+150    	; 0x3364 <LCD_function_Set_4bit+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ce:	8e 01       	movw	r16, r28
    32d0:	0a 59       	subi	r16, 0x9A	; 154
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	fe 01       	movw	r30, r28
    32d6:	e8 59       	subi	r30, 0x98	; 152
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	60 81       	ld	r22, Z
    32dc:	71 81       	ldd	r23, Z+1	; 0x01
    32de:	82 81       	ldd	r24, Z+2	; 0x02
    32e0:	93 81       	ldd	r25, Z+3	; 0x03
    32e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	f8 01       	movw	r30, r16
    32ec:	91 83       	std	Z+1, r25	; 0x01
    32ee:	80 83       	st	Z, r24
    32f0:	de 01       	movw	r26, r28
    32f2:	ae 59       	subi	r26, 0x9E	; 158
    32f4:	bf 4f       	sbci	r27, 0xFF	; 255
    32f6:	fe 01       	movw	r30, r28
    32f8:	ea 59       	subi	r30, 0x9A	; 154
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	80 81       	ld	r24, Z
    32fe:	91 81       	ldd	r25, Z+1	; 0x01
    3300:	11 96       	adiw	r26, 0x01	; 1
    3302:	9c 93       	st	X, r25
    3304:	8e 93       	st	-X, r24
    3306:	fe 01       	movw	r30, r28
    3308:	ee 59       	subi	r30, 0x9E	; 158
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	80 81       	ld	r24, Z
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	f1 f7       	brne	.-4      	; 0x3310 <LCD_function_Set_4bit+0x738>
    3314:	fe 01       	movw	r30, r28
    3316:	ee 59       	subi	r30, 0x9E	; 158
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	91 83       	std	Z+1, r25	; 0x01
    331c:	80 83       	st	Z, r24
    331e:	22 c0       	rjmp	.+68     	; 0x3364 <LCD_function_Set_4bit+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3320:	8e 01       	movw	r16, r28
    3322:	00 59       	subi	r16, 0x90	; 144
    3324:	1f 4f       	sbci	r17, 0xFF	; 255
    3326:	fe 01       	movw	r30, r28
    3328:	ef 58       	subi	r30, 0x8F	; 143
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	f8 01       	movw	r30, r16
    333e:	80 83       	st	Z, r24
    3340:	de 01       	movw	r26, r28
    3342:	af 59       	subi	r26, 0x9F	; 159
    3344:	bf 4f       	sbci	r27, 0xFF	; 255
    3346:	fe 01       	movw	r30, r28
    3348:	e0 59       	subi	r30, 0x90	; 144
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 81       	ld	r24, Z
    334e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3350:	fe 01       	movw	r30, r28
    3352:	ef 59       	subi	r30, 0x9F	; 159
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	80 81       	ld	r24, Z
    3358:	8a 95       	dec	r24
    335a:	f1 f7       	brne	.-4      	; 0x3358 <LCD_function_Set_4bit+0x780>
    335c:	fe 01       	movw	r30, r28
    335e:	ef 59       	subi	r30, 0x9F	; 159
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 83       	st	Z, r24
	_delay_us(10);
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    336c:	fe 01       	movw	r30, r28
    336e:	e3 5a       	subi	r30, 0xA3	; 163
    3370:	ff 4f       	sbci	r31, 0xFF	; 255
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	a0 e8       	ldi	r26, 0x80	; 128
    3378:	bf e3       	ldi	r27, 0x3F	; 63
    337a:	80 83       	st	Z, r24
    337c:	91 83       	std	Z+1, r25	; 0x01
    337e:	a2 83       	std	Z+2, r26	; 0x02
    3380:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3382:	8e 01       	movw	r16, r28
    3384:	07 5a       	subi	r16, 0xA7	; 167
    3386:	1f 4f       	sbci	r17, 0xFF	; 255
    3388:	fe 01       	movw	r30, r28
    338a:	e3 5a       	subi	r30, 0xA3	; 163
    338c:	ff 4f       	sbci	r31, 0xFF	; 255
    338e:	60 81       	ld	r22, Z
    3390:	71 81       	ldd	r23, Z+1	; 0x01
    3392:	82 81       	ldd	r24, Z+2	; 0x02
    3394:	93 81       	ldd	r25, Z+3	; 0x03
    3396:	2b ea       	ldi	r18, 0xAB	; 171
    3398:	3a ea       	ldi	r19, 0xAA	; 170
    339a:	4a e2       	ldi	r20, 0x2A	; 42
    339c:	50 e4       	ldi	r21, 0x40	; 64
    339e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	f8 01       	movw	r30, r16
    33a8:	80 83       	st	Z, r24
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	a2 83       	std	Z+2, r26	; 0x02
    33ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33b0:	fe 01       	movw	r30, r28
    33b2:	e7 5a       	subi	r30, 0xA7	; 167
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	60 81       	ld	r22, Z
    33b8:	71 81       	ldd	r23, Z+1	; 0x01
    33ba:	82 81       	ldd	r24, Z+2	; 0x02
    33bc:	93 81       	ldd	r25, Z+3	; 0x03
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	34 f4       	brge	.+12     	; 0x33da <LCD_function_Set_4bit+0x802>
		__ticks = 1;
    33ce:	fe 01       	movw	r30, r28
    33d0:	e8 5a       	subi	r30, 0xA8	; 168
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	80 83       	st	Z, r24
    33d8:	e0 c0       	rjmp	.+448    	; 0x359a <LCD_function_Set_4bit+0x9c2>
	else if (__tmp > 255)
    33da:	fe 01       	movw	r30, r28
    33dc:	e7 5a       	subi	r30, 0xA7	; 167
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	60 81       	ld	r22, Z
    33e2:	71 81       	ldd	r23, Z+1	; 0x01
    33e4:	82 81       	ldd	r24, Z+2	; 0x02
    33e6:	93 81       	ldd	r25, Z+3	; 0x03
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	4f e7       	ldi	r20, 0x7F	; 127
    33ee:	53 e4       	ldi	r21, 0x43	; 67
    33f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f4:	18 16       	cp	r1, r24
    33f6:	0c f0       	brlt	.+2      	; 0x33fa <LCD_function_Set_4bit+0x822>
    33f8:	c0 c0       	rjmp	.+384    	; 0x357a <LCD_function_Set_4bit+0x9a2>
	{
		_delay_ms(__us / 1000.0);
    33fa:	fe 01       	movw	r30, r28
    33fc:	e3 5a       	subi	r30, 0xA3	; 163
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	60 81       	ld	r22, Z
    3402:	71 81       	ldd	r23, Z+1	; 0x01
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	93 81       	ldd	r25, Z+3	; 0x03
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	4a e7       	ldi	r20, 0x7A	; 122
    340e:	54 e4       	ldi	r21, 0x44	; 68
    3410:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	fe 01       	movw	r30, r28
    341a:	ec 5a       	subi	r30, 0xAC	; 172
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 83       	st	Z, r24
    3420:	91 83       	std	Z+1, r25	; 0x01
    3422:	a2 83       	std	Z+2, r26	; 0x02
    3424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3426:	8e 01       	movw	r16, r28
    3428:	00 5b       	subi	r16, 0xB0	; 176
    342a:	1f 4f       	sbci	r17, 0xFF	; 255
    342c:	fe 01       	movw	r30, r28
    342e:	ec 5a       	subi	r30, 0xAC	; 172
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	60 81       	ld	r22, Z
    3434:	71 81       	ldd	r23, Z+1	; 0x01
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	93 81       	ldd	r25, Z+3	; 0x03
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	4a ef       	ldi	r20, 0xFA	; 250
    3440:	54 e4       	ldi	r21, 0x44	; 68
    3442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	f8 01       	movw	r30, r16
    344c:	80 83       	st	Z, r24
    344e:	91 83       	std	Z+1, r25	; 0x01
    3450:	a2 83       	std	Z+2, r26	; 0x02
    3452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3454:	fe 01       	movw	r30, r28
    3456:	e0 5b       	subi	r30, 0xB0	; 176
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	60 81       	ld	r22, Z
    345c:	71 81       	ldd	r23, Z+1	; 0x01
    345e:	82 81       	ldd	r24, Z+2	; 0x02
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e8       	ldi	r20, 0x80	; 128
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    346e:	88 23       	and	r24, r24
    3470:	44 f4       	brge	.+16     	; 0x3482 <LCD_function_Set_4bit+0x8aa>
		__ticks = 1;
    3472:	fe 01       	movw	r30, r28
    3474:	e2 5b       	subi	r30, 0xB2	; 178
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	64 c0       	rjmp	.+200    	; 0x354a <LCD_function_Set_4bit+0x972>
	else if (__tmp > 65535)
    3482:	fe 01       	movw	r30, r28
    3484:	e0 5b       	subi	r30, 0xB0	; 176
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	3f ef       	ldi	r19, 0xFF	; 255
    3494:	4f e7       	ldi	r20, 0x7F	; 127
    3496:	57 e4       	ldi	r21, 0x47	; 71
    3498:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    349c:	18 16       	cp	r1, r24
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <LCD_function_Set_4bit+0x8ca>
    34a0:	43 c0       	rjmp	.+134    	; 0x3528 <LCD_function_Set_4bit+0x950>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a2:	fe 01       	movw	r30, r28
    34a4:	ec 5a       	subi	r30, 0xAC	; 172
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e2       	ldi	r20, 0x20	; 32
    34b6:	51 e4       	ldi	r21, 0x41	; 65
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	8e 01       	movw	r16, r28
    34c2:	02 5b       	subi	r16, 0xB2	; 178
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	f8 01       	movw	r30, r16
    34d4:	91 83       	std	Z+1, r25	; 0x01
    34d6:	80 83       	st	Z, r24
    34d8:	1f c0       	rjmp	.+62     	; 0x3518 <LCD_function_Set_4bit+0x940>
    34da:	fe 01       	movw	r30, r28
    34dc:	e4 5b       	subi	r30, 0xB4	; 180
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	91 83       	std	Z+1, r25	; 0x01
    34e6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34e8:	fe 01       	movw	r30, r28
    34ea:	e4 5b       	subi	r30, 0xB4	; 180
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	f1 f7       	brne	.-4      	; 0x34f2 <LCD_function_Set_4bit+0x91a>
    34f6:	fe 01       	movw	r30, r28
    34f8:	e4 5b       	subi	r30, 0xB4	; 180
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3500:	de 01       	movw	r26, r28
    3502:	a2 5b       	subi	r26, 0xB2	; 178
    3504:	bf 4f       	sbci	r27, 0xFF	; 255
    3506:	fe 01       	movw	r30, r28
    3508:	e2 5b       	subi	r30, 0xB2	; 178
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	11 96       	adiw	r26, 0x01	; 1
    3514:	9c 93       	st	X, r25
    3516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3518:	fe 01       	movw	r30, r28
    351a:	e2 5b       	subi	r30, 0xB2	; 178
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	d1 f6       	brne	.-76     	; 0x34da <LCD_function_Set_4bit+0x902>
    3526:	4b c0       	rjmp	.+150    	; 0x35be <LCD_function_Set_4bit+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	8e 01       	movw	r16, r28
    352a:	02 5b       	subi	r16, 0xB2	; 178
    352c:	1f 4f       	sbci	r17, 0xFF	; 255
    352e:	fe 01       	movw	r30, r28
    3530:	e0 5b       	subi	r30, 0xB0	; 176
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	60 81       	ld	r22, Z
    3536:	71 81       	ldd	r23, Z+1	; 0x01
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	93 81       	ldd	r25, Z+3	; 0x03
    353c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	f8 01       	movw	r30, r16
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    354a:	de 01       	movw	r26, r28
    354c:	a6 5b       	subi	r26, 0xB6	; 182
    354e:	bf 4f       	sbci	r27, 0xFF	; 255
    3550:	fe 01       	movw	r30, r28
    3552:	e2 5b       	subi	r30, 0xB2	; 178
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	11 96       	adiw	r26, 0x01	; 1
    355c:	9c 93       	st	X, r25
    355e:	8e 93       	st	-X, r24
    3560:	fe 01       	movw	r30, r28
    3562:	e6 5b       	subi	r30, 0xB6	; 182
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	80 81       	ld	r24, Z
    3568:	91 81       	ldd	r25, Z+1	; 0x01
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	f1 f7       	brne	.-4      	; 0x356a <LCD_function_Set_4bit+0x992>
    356e:	fe 01       	movw	r30, r28
    3570:	e6 5b       	subi	r30, 0xB6	; 182
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	80 83       	st	Z, r24
    3578:	22 c0       	rjmp	.+68     	; 0x35be <LCD_function_Set_4bit+0x9e6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    357a:	8e 01       	movw	r16, r28
    357c:	08 5a       	subi	r16, 0xA8	; 168
    357e:	1f 4f       	sbci	r17, 0xFF	; 255
    3580:	fe 01       	movw	r30, r28
    3582:	e7 5a       	subi	r30, 0xA7	; 167
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	60 81       	ld	r22, Z
    3588:	71 81       	ldd	r23, Z+1	; 0x01
    358a:	82 81       	ldd	r24, Z+2	; 0x02
    358c:	93 81       	ldd	r25, Z+3	; 0x03
    358e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	f8 01       	movw	r30, r16
    3598:	80 83       	st	Z, r24
    359a:	de 01       	movw	r26, r28
    359c:	a7 5b       	subi	r26, 0xB7	; 183
    359e:	bf 4f       	sbci	r27, 0xFF	; 255
    35a0:	fe 01       	movw	r30, r28
    35a2:	e8 5a       	subi	r30, 0xA8	; 168
    35a4:	ff 4f       	sbci	r31, 0xFF	; 255
    35a6:	80 81       	ld	r24, Z
    35a8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35aa:	fe 01       	movw	r30, r28
    35ac:	e7 5b       	subi	r30, 0xB7	; 183
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 81       	ld	r24, Z
    35b2:	8a 95       	dec	r24
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <LCD_function_Set_4bit+0x9da>
    35b6:	fe 01       	movw	r30, r28
    35b8:	e7 5b       	subi	r30, 0xB7	; 183
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	80 83       	st	Z, r24
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    35be:	fe 01       	movw	r30, r28
    35c0:	e6 55       	subi	r30, 0x56	; 86
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	10 82       	st	Z, r1
    35c6:	23 c0       	rjmp	.+70     	; 0x360e <LCD_function_Set_4bit+0xa36>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
    35c8:	fe 01       	movw	r30, r28
    35ca:	e6 55       	subi	r30, 0x56	; 86
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	48 2f       	mov	r20, r24
    35d2:	4c 5f       	subi	r20, 0xFC	; 252
    35d4:	fe 01       	movw	r30, r28
    35d6:	e6 55       	subi	r30, 0x56	; 86
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	80 81       	ld	r24, Z
    35dc:	28 2f       	mov	r18, r24
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <LCD_function_Set_4bit+0xa12>
    35e6:	95 95       	asr	r25
    35e8:	87 95       	ror	r24
    35ea:	2a 95       	dec	r18
    35ec:	e2 f7       	brpl	.-8      	; 0x35e6 <LCD_function_Set_4bit+0xa0e>
    35ee:	98 2f       	mov	r25, r24
    35f0:	91 70       	andi	r25, 0x01	; 1
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	64 2f       	mov	r22, r20
    35f6:	49 2f       	mov	r20, r25
    35f8:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_void_assign_pin>
	//send again high nibble to make sure
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    35fc:	de 01       	movw	r26, r28
    35fe:	a6 55       	subi	r26, 0x56	; 86
    3600:	bf 4f       	sbci	r27, 0xFF	; 255
    3602:	fe 01       	movw	r30, r28
    3604:	e6 55       	subi	r30, 0x56	; 86
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	80 81       	ld	r24, Z
    360a:	8f 5f       	subi	r24, 0xFF	; 255
    360c:	8c 93       	st	X, r24
    360e:	fe 01       	movw	r30, r28
    3610:	e6 55       	subi	r30, 0x56	; 86
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 81       	ld	r24, Z
    3616:	84 30       	cpi	r24, 0x04	; 4
    3618:	b8 f2       	brcs	.-82     	; 0x35c8 <LCD_function_Set_4bit+0x9f0>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b0010,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    3622:	fe 01       	movw	r30, r28
    3624:	eb 5b       	subi	r30, 0xBB	; 187
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	a0 e2       	ldi	r26, 0x20	; 32
    362e:	b1 e4       	ldi	r27, 0x41	; 65
    3630:	80 83       	st	Z, r24
    3632:	91 83       	std	Z+1, r25	; 0x01
    3634:	a2 83       	std	Z+2, r26	; 0x02
    3636:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3638:	8e 01       	movw	r16, r28
    363a:	0f 5b       	subi	r16, 0xBF	; 191
    363c:	1f 4f       	sbci	r17, 0xFF	; 255
    363e:	fe 01       	movw	r30, r28
    3640:	eb 5b       	subi	r30, 0xBB	; 187
    3642:	ff 4f       	sbci	r31, 0xFF	; 255
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	82 81       	ldd	r24, Z+2	; 0x02
    364a:	93 81       	ldd	r25, Z+3	; 0x03
    364c:	2b ea       	ldi	r18, 0xAB	; 171
    364e:	3a ea       	ldi	r19, 0xAA	; 170
    3650:	4a e2       	ldi	r20, 0x2A	; 42
    3652:	50 e4       	ldi	r21, 0x40	; 64
    3654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3658:	dc 01       	movw	r26, r24
    365a:	cb 01       	movw	r24, r22
    365c:	f8 01       	movw	r30, r16
    365e:	80 83       	st	Z, r24
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	a2 83       	std	Z+2, r26	; 0x02
    3664:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3666:	fe 01       	movw	r30, r28
    3668:	ef 5b       	subi	r30, 0xBF	; 191
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	60 81       	ld	r22, Z
    366e:	71 81       	ldd	r23, Z+1	; 0x01
    3670:	82 81       	ldd	r24, Z+2	; 0x02
    3672:	93 81       	ldd	r25, Z+3	; 0x03
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	40 e8       	ldi	r20, 0x80	; 128
    367a:	5f e3       	ldi	r21, 0x3F	; 63
    367c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3680:	88 23       	and	r24, r24
    3682:	34 f4       	brge	.+12     	; 0x3690 <LCD_function_Set_4bit+0xab8>
		__ticks = 1;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	fe 01       	movw	r30, r28
    3688:	e0 5c       	subi	r30, 0xC0	; 192
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	80 83       	st	Z, r24
    368e:	9d c0       	rjmp	.+314    	; 0x37ca <LCD_function_Set_4bit+0xbf2>
	else if (__tmp > 255)
    3690:	fe 01       	movw	r30, r28
    3692:	ef 5b       	subi	r30, 0xBF	; 191
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	60 81       	ld	r22, Z
    3698:	71 81       	ldd	r23, Z+1	; 0x01
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	93 81       	ldd	r25, Z+3	; 0x03
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	4f e7       	ldi	r20, 0x7F	; 127
    36a4:	53 e4       	ldi	r21, 0x43	; 67
    36a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36aa:	18 16       	cp	r1, r24
    36ac:	0c f0       	brlt	.+2      	; 0x36b0 <LCD_function_Set_4bit+0xad8>
    36ae:	7e c0       	rjmp	.+252    	; 0x37ac <LCD_function_Set_4bit+0xbd4>
	{
		_delay_ms(__us / 1000.0);
    36b0:	fe 01       	movw	r30, r28
    36b2:	eb 5b       	subi	r30, 0xBB	; 187
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	60 81       	ld	r22, Z
    36b8:	71 81       	ldd	r23, Z+1	; 0x01
    36ba:	82 81       	ldd	r24, Z+2	; 0x02
    36bc:	93 81       	ldd	r25, Z+3	; 0x03
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	4a e7       	ldi	r20, 0x7A	; 122
    36c4:	54 e4       	ldi	r21, 0x44	; 68
    36c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	8c af       	std	Y+60, r24	; 0x3c
    36d0:	9d af       	std	Y+61, r25	; 0x3d
    36d2:	ae af       	std	Y+62, r26	; 0x3e
    36d4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d6:	6c ad       	ldd	r22, Y+60	; 0x3c
    36d8:	7d ad       	ldd	r23, Y+61	; 0x3d
    36da:	8e ad       	ldd	r24, Y+62	; 0x3e
    36dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	4a ef       	ldi	r20, 0xFA	; 250
    36e4:	54 e4       	ldi	r21, 0x44	; 68
    36e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	88 af       	std	Y+56, r24	; 0x38
    36f0:	99 af       	std	Y+57, r25	; 0x39
    36f2:	aa af       	std	Y+58, r26	; 0x3a
    36f4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    36f6:	68 ad       	ldd	r22, Y+56	; 0x38
    36f8:	79 ad       	ldd	r23, Y+57	; 0x39
    36fa:	8a ad       	ldd	r24, Y+58	; 0x3a
    36fc:	9b ad       	ldd	r25, Y+59	; 0x3b
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e8       	ldi	r20, 0x80	; 128
    3704:	5f e3       	ldi	r21, 0x3F	; 63
    3706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370a:	88 23       	and	r24, r24
    370c:	2c f4       	brge	.+10     	; 0x3718 <LCD_function_Set_4bit+0xb40>
		__ticks = 1;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	9f ab       	std	Y+55, r25	; 0x37
    3714:	8e ab       	std	Y+54, r24	; 0x36
    3716:	3f c0       	rjmp	.+126    	; 0x3796 <LCD_function_Set_4bit+0xbbe>
	else if (__tmp > 65535)
    3718:	68 ad       	ldd	r22, Y+56	; 0x38
    371a:	79 ad       	ldd	r23, Y+57	; 0x39
    371c:	8a ad       	ldd	r24, Y+58	; 0x3a
    371e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	3f ef       	ldi	r19, 0xFF	; 255
    3724:	4f e7       	ldi	r20, 0x7F	; 127
    3726:	57 e4       	ldi	r21, 0x47	; 71
    3728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    372c:	18 16       	cp	r1, r24
    372e:	4c f5       	brge	.+82     	; 0x3782 <LCD_function_Set_4bit+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3730:	6c ad       	ldd	r22, Y+60	; 0x3c
    3732:	7d ad       	ldd	r23, Y+61	; 0x3d
    3734:	8e ad       	ldd	r24, Y+62	; 0x3e
    3736:	9f ad       	ldd	r25, Y+63	; 0x3f
    3738:	20 e0       	ldi	r18, 0x00	; 0
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	40 e2       	ldi	r20, 0x20	; 32
    373e:	51 e4       	ldi	r21, 0x41	; 65
    3740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	9f ab       	std	Y+55, r25	; 0x37
    3756:	8e ab       	std	Y+54, r24	; 0x36
    3758:	0f c0       	rjmp	.+30     	; 0x3778 <LCD_function_Set_4bit+0xba0>
    375a:	88 ec       	ldi	r24, 0xC8	; 200
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	9d ab       	std	Y+53, r25	; 0x35
    3760:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3762:	8c a9       	ldd	r24, Y+52	; 0x34
    3764:	9d a9       	ldd	r25, Y+53	; 0x35
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <LCD_function_Set_4bit+0xb8e>
    376a:	9d ab       	std	Y+53, r25	; 0x35
    376c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376e:	8e a9       	ldd	r24, Y+54	; 0x36
    3770:	9f a9       	ldd	r25, Y+55	; 0x37
    3772:	01 97       	sbiw	r24, 0x01	; 1
    3774:	9f ab       	std	Y+55, r25	; 0x37
    3776:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3778:	8e a9       	ldd	r24, Y+54	; 0x36
    377a:	9f a9       	ldd	r25, Y+55	; 0x37
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	69 f7       	brne	.-38     	; 0x375a <LCD_function_Set_4bit+0xb82>
    3780:	2d c0       	rjmp	.+90     	; 0x37dc <LCD_function_Set_4bit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3782:	68 ad       	ldd	r22, Y+56	; 0x38
    3784:	79 ad       	ldd	r23, Y+57	; 0x39
    3786:	8a ad       	ldd	r24, Y+58	; 0x3a
    3788:	9b ad       	ldd	r25, Y+59	; 0x3b
    378a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	9f ab       	std	Y+55, r25	; 0x37
    3794:	8e ab       	std	Y+54, r24	; 0x36
    3796:	8e a9       	ldd	r24, Y+54	; 0x36
    3798:	9f a9       	ldd	r25, Y+55	; 0x37
    379a:	9b ab       	std	Y+51, r25	; 0x33
    379c:	8a ab       	std	Y+50, r24	; 0x32
    379e:	8a a9       	ldd	r24, Y+50	; 0x32
    37a0:	9b a9       	ldd	r25, Y+51	; 0x33
    37a2:	01 97       	sbiw	r24, 0x01	; 1
    37a4:	f1 f7       	brne	.-4      	; 0x37a2 <LCD_function_Set_4bit+0xbca>
    37a6:	9b ab       	std	Y+51, r25	; 0x33
    37a8:	8a ab       	std	Y+50, r24	; 0x32
    37aa:	18 c0       	rjmp	.+48     	; 0x37dc <LCD_function_Set_4bit+0xc04>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37ac:	fe 01       	movw	r30, r28
    37ae:	ef 5b       	subi	r30, 0xBF	; 191
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	60 81       	ld	r22, Z
    37b4:	71 81       	ldd	r23, Z+1	; 0x01
    37b6:	82 81       	ldd	r24, Z+2	; 0x02
    37b8:	93 81       	ldd	r25, Z+3	; 0x03
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	fe 01       	movw	r30, r28
    37c4:	e0 5c       	subi	r30, 0xC0	; 192
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	80 83       	st	Z, r24
    37ca:	fe 01       	movw	r30, r28
    37cc:	e0 5c       	subi	r30, 0xC0	; 192
    37ce:	ff 4f       	sbci	r31, 0xFF	; 255
    37d0:	80 81       	ld	r24, Z
    37d2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37d4:	89 a9       	ldd	r24, Y+49	; 0x31
    37d6:	8a 95       	dec	r24
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <LCD_function_Set_4bit+0xbfe>
    37da:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	60 e0       	ldi	r22, 0x00	; 0
    37e0:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a0 e8       	ldi	r26, 0x80	; 128
    37ea:	bf e3       	ldi	r27, 0x3F	; 63
    37ec:	8d a7       	std	Y+45, r24	; 0x2d
    37ee:	9e a7       	std	Y+46, r25	; 0x2e
    37f0:	af a7       	std	Y+47, r26	; 0x2f
    37f2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    37f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    37f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37fa:	98 a9       	ldd	r25, Y+48	; 0x30
    37fc:	2b ea       	ldi	r18, 0xAB	; 171
    37fe:	3a ea       	ldi	r19, 0xAA	; 170
    3800:	4a e2       	ldi	r20, 0x2A	; 42
    3802:	50 e4       	ldi	r21, 0x40	; 64
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	89 a7       	std	Y+41, r24	; 0x29
    380e:	9a a7       	std	Y+42, r25	; 0x2a
    3810:	ab a7       	std	Y+43, r26	; 0x2b
    3812:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3814:	69 a5       	ldd	r22, Y+41	; 0x29
    3816:	7a a5       	ldd	r23, Y+42	; 0x2a
    3818:	8b a5       	ldd	r24, Y+43	; 0x2b
    381a:	9c a5       	ldd	r25, Y+44	; 0x2c
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	1c f4       	brge	.+6      	; 0x3832 <LCD_function_Set_4bit+0xc5a>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	88 a7       	std	Y+40, r24	; 0x28
    3830:	91 c0       	rjmp	.+290    	; 0x3954 <LCD_function_Set_4bit+0xd7c>
	else if (__tmp > 255)
    3832:	69 a5       	ldd	r22, Y+41	; 0x29
    3834:	7a a5       	ldd	r23, Y+42	; 0x2a
    3836:	8b a5       	ldd	r24, Y+43	; 0x2b
    3838:	9c a5       	ldd	r25, Y+44	; 0x2c
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4f e7       	ldi	r20, 0x7F	; 127
    3840:	53 e4       	ldi	r21, 0x43	; 67
    3842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3846:	18 16       	cp	r1, r24
    3848:	0c f0       	brlt	.+2      	; 0x384c <LCD_function_Set_4bit+0xc74>
    384a:	7b c0       	rjmp	.+246    	; 0x3942 <LCD_function_Set_4bit+0xd6a>
	{
		_delay_ms(__us / 1000.0);
    384c:	6d a5       	ldd	r22, Y+45	; 0x2d
    384e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3850:	8f a5       	ldd	r24, Y+47	; 0x2f
    3852:	98 a9       	ldd	r25, Y+48	; 0x30
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	4a e7       	ldi	r20, 0x7A	; 122
    385a:	54 e4       	ldi	r21, 0x44	; 68
    385c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	8c a3       	std	Y+36, r24	; 0x24
    3866:	9d a3       	std	Y+37, r25	; 0x25
    3868:	ae a3       	std	Y+38, r26	; 0x26
    386a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386c:	6c a1       	ldd	r22, Y+36	; 0x24
    386e:	7d a1       	ldd	r23, Y+37	; 0x25
    3870:	8e a1       	ldd	r24, Y+38	; 0x26
    3872:	9f a1       	ldd	r25, Y+39	; 0x27
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a ef       	ldi	r20, 0xFA	; 250
    387a:	54 e4       	ldi	r21, 0x44	; 68
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	88 a3       	std	Y+32, r24	; 0x20
    3886:	99 a3       	std	Y+33, r25	; 0x21
    3888:	aa a3       	std	Y+34, r26	; 0x22
    388a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    388c:	68 a1       	ldd	r22, Y+32	; 0x20
    388e:	79 a1       	ldd	r23, Y+33	; 0x21
    3890:	8a a1       	ldd	r24, Y+34	; 0x22
    3892:	9b a1       	ldd	r25, Y+35	; 0x23
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	2c f4       	brge	.+10     	; 0x38ae <LCD_function_Set_4bit+0xcd6>
		__ticks = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9f 8f       	std	Y+31, r25	; 0x1f
    38aa:	8e 8f       	std	Y+30, r24	; 0x1e
    38ac:	3f c0       	rjmp	.+126    	; 0x392c <LCD_function_Set_4bit+0xd54>
	else if (__tmp > 65535)
    38ae:	68 a1       	ldd	r22, Y+32	; 0x20
    38b0:	79 a1       	ldd	r23, Y+33	; 0x21
    38b2:	8a a1       	ldd	r24, Y+34	; 0x22
    38b4:	9b a1       	ldd	r25, Y+35	; 0x23
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	3f ef       	ldi	r19, 0xFF	; 255
    38ba:	4f e7       	ldi	r20, 0x7F	; 127
    38bc:	57 e4       	ldi	r21, 0x47	; 71
    38be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c2:	18 16       	cp	r1, r24
    38c4:	4c f5       	brge	.+82     	; 0x3918 <LCD_function_Set_4bit+0xd40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c6:	6c a1       	ldd	r22, Y+36	; 0x24
    38c8:	7d a1       	ldd	r23, Y+37	; 0x25
    38ca:	8e a1       	ldd	r24, Y+38	; 0x26
    38cc:	9f a1       	ldd	r25, Y+39	; 0x27
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e2       	ldi	r20, 0x20	; 32
    38d4:	51 e4       	ldi	r21, 0x41	; 65
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9f 8f       	std	Y+31, r25	; 0x1f
    38ec:	8e 8f       	std	Y+30, r24	; 0x1e
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <LCD_function_Set_4bit+0xd36>
    38f0:	88 ec       	ldi	r24, 0xC8	; 200
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	9d 8f       	std	Y+29, r25	; 0x1d
    38f6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <LCD_function_Set_4bit+0xd24>
    3900:	9d 8f       	std	Y+29, r25	; 0x1d
    3902:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3904:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3906:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	9f 8f       	std	Y+31, r25	; 0x1f
    390c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3910:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	69 f7       	brne	.-38     	; 0x38f0 <LCD_function_Set_4bit+0xd18>
    3916:	24 c0       	rjmp	.+72     	; 0x3960 <LCD_function_Set_4bit+0xd88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3918:	68 a1       	ldd	r22, Y+32	; 0x20
    391a:	79 a1       	ldd	r23, Y+33	; 0x21
    391c:	8a a1       	ldd	r24, Y+34	; 0x22
    391e:	9b a1       	ldd	r25, Y+35	; 0x23
    3920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9f 8f       	std	Y+31, r25	; 0x1f
    392a:	8e 8f       	std	Y+30, r24	; 0x1e
    392c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    392e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3930:	9b 8f       	std	Y+27, r25	; 0x1b
    3932:	8a 8f       	std	Y+26, r24	; 0x1a
    3934:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3936:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <LCD_function_Set_4bit+0xd60>
    393c:	9b 8f       	std	Y+27, r25	; 0x1b
    393e:	8a 8f       	std	Y+26, r24	; 0x1a
    3940:	0f c0       	rjmp	.+30     	; 0x3960 <LCD_function_Set_4bit+0xd88>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3942:	69 a5       	ldd	r22, Y+41	; 0x29
    3944:	7a a5       	ldd	r23, Y+42	; 0x2a
    3946:	8b a5       	ldd	r24, Y+43	; 0x2b
    3948:	9c a5       	ldd	r25, Y+44	; 0x2c
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	88 a7       	std	Y+40, r24	; 0x28
    3954:	88 a5       	ldd	r24, Y+40	; 0x28
    3956:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3958:	89 8d       	ldd	r24, Y+25	; 0x19
    395a:	8a 95       	dec	r24
    395c:	f1 f7       	brne	.-4      	; 0x395a <LCD_function_Set_4bit+0xd82>
    395e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    3960:	fe 01       	movw	r30, r28
    3962:	e7 55       	subi	r30, 0x57	; 87
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	10 82       	st	Z, r1
    3968:	23 c0       	rjmp	.+70     	; 0x39b0 <LCD_function_Set_4bit+0xdd8>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
    396a:	fe 01       	movw	r30, r28
    396c:	e7 55       	subi	r30, 0x57	; 87
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	80 81       	ld	r24, Z
    3972:	48 2f       	mov	r20, r24
    3974:	4c 5f       	subi	r20, 0xFC	; 252
    3976:	fe 01       	movw	r30, r28
    3978:	e7 55       	subi	r30, 0x57	; 87
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	80 81       	ld	r24, Z
    397e:	28 2f       	mov	r18, r24
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	88 e0       	ldi	r24, 0x08	; 8
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	02 c0       	rjmp	.+4      	; 0x398c <LCD_function_Set_4bit+0xdb4>
    3988:	95 95       	asr	r25
    398a:	87 95       	ror	r24
    398c:	2a 95       	dec	r18
    398e:	e2 f7       	brpl	.-8      	; 0x3988 <LCD_function_Set_4bit+0xdb0>
    3990:	98 2f       	mov	r25, r24
    3992:	91 70       	andi	r25, 0x01	; 1
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	64 2f       	mov	r22, r20
    3998:	49 2f       	mov	r20, r25
    399a:	0e 94 2a 09 	call	0x1254	; 0x1254 <DIO_void_assign_pin>
	//send the low nibble
	DIO_void_set_pin(lcd_control_port, lcd_enable); // enable high
	_delay_us(1);
	//send the high nibble

	for(u8 i=0; i<4;i++){
    399e:	de 01       	movw	r26, r28
    39a0:	a7 55       	subi	r26, 0x57	; 87
    39a2:	bf 4f       	sbci	r27, 0xFF	; 255
    39a4:	fe 01       	movw	r30, r28
    39a6:	e7 55       	subi	r30, 0x57	; 87
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 81       	ld	r24, Z
    39ac:	8f 5f       	subi	r24, 0xFF	; 255
    39ae:	8c 93       	st	X, r24
    39b0:	fe 01       	movw	r30, r28
    39b2:	e7 55       	subi	r30, 0x57	; 87
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	80 81       	ld	r24, Z
    39b8:	84 30       	cpi	r24, 0x04	; 4
    39ba:	b8 f2       	brcs	.-82     	; 0x396a <LCD_function_Set_4bit+0xd92>

		DIO_void_assign_pin(lcd_data_port, i+4, get_Bit(0b1000,i));
	}
	//enable pin low
	DIO_void_clear_pin(lcd_control_port, lcd_enable);
    39bc:	80 e0       	ldi	r24, 0x00	; 0
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a0 e2       	ldi	r26, 0x20	; 32
    39ca:	b1 e4       	ldi	r27, 0x41	; 65
    39cc:	8d 8b       	std	Y+21, r24	; 0x15
    39ce:	9e 8b       	std	Y+22, r25	; 0x16
    39d0:	af 8b       	std	Y+23, r26	; 0x17
    39d2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39d4:	6d 89       	ldd	r22, Y+21	; 0x15
    39d6:	7e 89       	ldd	r23, Y+22	; 0x16
    39d8:	8f 89       	ldd	r24, Y+23	; 0x17
    39da:	98 8d       	ldd	r25, Y+24	; 0x18
    39dc:	2b ea       	ldi	r18, 0xAB	; 171
    39de:	3a ea       	ldi	r19, 0xAA	; 170
    39e0:	4a e2       	ldi	r20, 0x2A	; 42
    39e2:	50 e4       	ldi	r21, 0x40	; 64
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	89 8b       	std	Y+17, r24	; 0x11
    39ee:	9a 8b       	std	Y+18, r25	; 0x12
    39f0:	ab 8b       	std	Y+19, r26	; 0x13
    39f2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    39f4:	69 89       	ldd	r22, Y+17	; 0x11
    39f6:	7a 89       	ldd	r23, Y+18	; 0x12
    39f8:	8b 89       	ldd	r24, Y+19	; 0x13
    39fa:	9c 89       	ldd	r25, Y+20	; 0x14
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	1c f4       	brge	.+6      	; 0x3a12 <LCD_function_Set_4bit+0xe3a>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	88 8b       	std	Y+16, r24	; 0x10
    3a10:	91 c0       	rjmp	.+290    	; 0x3b34 <LCD_function_Set_4bit+0xf5c>
	else if (__tmp > 255)
    3a12:	69 89       	ldd	r22, Y+17	; 0x11
    3a14:	7a 89       	ldd	r23, Y+18	; 0x12
    3a16:	8b 89       	ldd	r24, Y+19	; 0x13
    3a18:	9c 89       	ldd	r25, Y+20	; 0x14
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	4f e7       	ldi	r20, 0x7F	; 127
    3a20:	53 e4       	ldi	r21, 0x43	; 67
    3a22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a26:	18 16       	cp	r1, r24
    3a28:	0c f0       	brlt	.+2      	; 0x3a2c <LCD_function_Set_4bit+0xe54>
    3a2a:	7b c0       	rjmp	.+246    	; 0x3b22 <LCD_function_Set_4bit+0xf4a>
	{
		_delay_ms(__us / 1000.0);
    3a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3a30:	8f 89       	ldd	r24, Y+23	; 0x17
    3a32:	98 8d       	ldd	r25, Y+24	; 0x18
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	4a e7       	ldi	r20, 0x7A	; 122
    3a3a:	54 e4       	ldi	r21, 0x44	; 68
    3a3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	8c 87       	std	Y+12, r24	; 0x0c
    3a46:	9d 87       	std	Y+13, r25	; 0x0d
    3a48:	ae 87       	std	Y+14, r26	; 0x0e
    3a4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a50:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a52:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	4a ef       	ldi	r20, 0xFA	; 250
    3a5a:	54 e4       	ldi	r21, 0x44	; 68
    3a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	88 87       	std	Y+8, r24	; 0x08
    3a66:	99 87       	std	Y+9, r25	; 0x09
    3a68:	aa 87       	std	Y+10, r26	; 0x0a
    3a6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a6c:	68 85       	ldd	r22, Y+8	; 0x08
    3a6e:	79 85       	ldd	r23, Y+9	; 0x09
    3a70:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a72:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e8       	ldi	r20, 0x80	; 128
    3a7a:	5f e3       	ldi	r21, 0x3F	; 63
    3a7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a80:	88 23       	and	r24, r24
    3a82:	2c f4       	brge	.+10     	; 0x3a8e <LCD_function_Set_4bit+0xeb6>
		__ticks = 1;
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	9f 83       	std	Y+7, r25	; 0x07
    3a8a:	8e 83       	std	Y+6, r24	; 0x06
    3a8c:	3f c0       	rjmp	.+126    	; 0x3b0c <LCD_function_Set_4bit+0xf34>
	else if (__tmp > 65535)
    3a8e:	68 85       	ldd	r22, Y+8	; 0x08
    3a90:	79 85       	ldd	r23, Y+9	; 0x09
    3a92:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a94:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	3f ef       	ldi	r19, 0xFF	; 255
    3a9a:	4f e7       	ldi	r20, 0x7F	; 127
    3a9c:	57 e4       	ldi	r21, 0x47	; 71
    3a9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aa2:	18 16       	cp	r1, r24
    3aa4:	4c f5       	brge	.+82     	; 0x3af8 <LCD_function_Set_4bit+0xf20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa6:	6c 85       	ldd	r22, Y+12	; 0x0c
    3aa8:	7d 85       	ldd	r23, Y+13	; 0x0d
    3aaa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3aac:	9f 85       	ldd	r25, Y+15	; 0x0f
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	40 e2       	ldi	r20, 0x20	; 32
    3ab4:	51 e4       	ldi	r21, 0x41	; 65
    3ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	bc 01       	movw	r22, r24
    3ac0:	cd 01       	movw	r24, r26
    3ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	9f 83       	std	Y+7, r25	; 0x07
    3acc:	8e 83       	std	Y+6, r24	; 0x06
    3ace:	0f c0       	rjmp	.+30     	; 0x3aee <LCD_function_Set_4bit+0xf16>
    3ad0:	88 ec       	ldi	r24, 0xC8	; 200
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	9d 83       	std	Y+5, r25	; 0x05
    3ad6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    3ada:	9d 81       	ldd	r25, Y+5	; 0x05
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <LCD_function_Set_4bit+0xf04>
    3ae0:	9d 83       	std	Y+5, r25	; 0x05
    3ae2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ae8:	01 97       	sbiw	r24, 0x01	; 1
    3aea:	9f 83       	std	Y+7, r25	; 0x07
    3aec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aee:	8e 81       	ldd	r24, Y+6	; 0x06
    3af0:	9f 81       	ldd	r25, Y+7	; 0x07
    3af2:	00 97       	sbiw	r24, 0x00	; 0
    3af4:	69 f7       	brne	.-38     	; 0x3ad0 <LCD_function_Set_4bit+0xef8>
    3af6:	24 c0       	rjmp	.+72     	; 0x3b40 <LCD_function_Set_4bit+0xf68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af8:	68 85       	ldd	r22, Y+8	; 0x08
    3afa:	79 85       	ldd	r23, Y+9	; 0x09
    3afc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3afe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	9f 83       	std	Y+7, r25	; 0x07
    3b0a:	8e 83       	std	Y+6, r24	; 0x06
    3b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    3b10:	9b 83       	std	Y+3, r25	; 0x03
    3b12:	8a 83       	std	Y+2, r24	; 0x02
    3b14:	8a 81       	ldd	r24, Y+2	; 0x02
    3b16:	9b 81       	ldd	r25, Y+3	; 0x03
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <LCD_function_Set_4bit+0xf40>
    3b1c:	9b 83       	std	Y+3, r25	; 0x03
    3b1e:	8a 83       	std	Y+2, r24	; 0x02
    3b20:	0f c0       	rjmp	.+30     	; 0x3b40 <LCD_function_Set_4bit+0xf68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b22:	69 89       	ldd	r22, Y+17	; 0x11
    3b24:	7a 89       	ldd	r23, Y+18	; 0x12
    3b26:	8b 89       	ldd	r24, Y+19	; 0x13
    3b28:	9c 89       	ldd	r25, Y+20	; 0x14
    3b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	88 8b       	std	Y+16, r24	; 0x10
    3b34:	88 89       	ldd	r24, Y+16	; 0x10
    3b36:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	8a 95       	dec	r24
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <LCD_function_Set_4bit+0xf62>
    3b3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

}
    3b40:	c5 55       	subi	r28, 0x55	; 85
    3b42:	df 4f       	sbci	r29, 0xFF	; 255
    3b44:	0f b6       	in	r0, 0x3f	; 63
    3b46:	f8 94       	cli
    3b48:	de bf       	out	0x3e, r29	; 62
    3b4a:	0f be       	out	0x3f, r0	; 63
    3b4c:	cd bf       	out	0x3d, r28	; 61
    3b4e:	cf 91       	pop	r28
    3b50:	df 91       	pop	r29
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	08 95       	ret

00003b58 <LCD_init>:



/* Driver features functions for the user */

void LCD_init(){
    3b58:	0f 93       	push	r16
    3b5a:	1f 93       	push	r17
    3b5c:	df 93       	push	r29
    3b5e:	cf 93       	push	r28
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
    3b64:	cc 54       	subi	r28, 0x4C	; 76
    3b66:	d0 40       	sbci	r29, 0x00	; 0
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	de bf       	out	0x3e, r29	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	cd bf       	out	0x3d, r28	; 61

#elif LCD_interface_mode == interface_4bit


	// configure data pins direction
	DIO_void_set_pin_dir(lcd_data_port, B7, OUTPUT);
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	67 e0       	ldi	r22, 0x07	; 7
    3b76:	41 e0       	ldi	r20, 0x01	; 1
    3b78:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B6, OUTPUT);
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	66 e0       	ldi	r22, 0x06	; 6
    3b80:	41 e0       	ldi	r20, 0x01	; 1
    3b82:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B5, OUTPUT);
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	65 e0       	ldi	r22, 0x05	; 5
    3b8a:	41 e0       	ldi	r20, 0x01	; 1
    3b8c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_data_port, B4, OUTPUT);
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	64 e0       	ldi	r22, 0x04	; 4
    3b94:	41 e0       	ldi	r20, 0x01	; 1
    3b96:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
	// RS,RW,E as  output
	DIO_void_set_pin_dir(lcd_control_port, lcd_RS, OUTPUT);
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	62 e0       	ldi	r22, 0x02	; 2
    3b9e:	41 e0       	ldi	r20, 0x01	; 1
    3ba0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_RW, OUTPUT);
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	61 e0       	ldi	r22, 0x01	; 1
    3ba8:	41 e0       	ldi	r20, 0x01	; 1
    3baa:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
	DIO_void_set_pin_dir(lcd_control_port, lcd_enable, OUTPUT);
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	41 e0       	ldi	r20, 0x01	; 1
    3bb4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
    3bb8:	fe 01       	movw	r30, r28
    3bba:	e7 5b       	subi	r30, 0xB7	; 183
    3bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	a8 e4       	ldi	r26, 0x48	; 72
    3bc4:	b2 e4       	ldi	r27, 0x42	; 66
    3bc6:	80 83       	st	Z, r24
    3bc8:	91 83       	std	Z+1, r25	; 0x01
    3bca:	a2 83       	std	Z+2, r26	; 0x02
    3bcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bce:	8e 01       	movw	r16, r28
    3bd0:	0b 5b       	subi	r16, 0xBB	; 187
    3bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e7 5b       	subi	r30, 0xB7	; 183
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	60 81       	ld	r22, Z
    3bdc:	71 81       	ldd	r23, Z+1	; 0x01
    3bde:	82 81       	ldd	r24, Z+2	; 0x02
    3be0:	93 81       	ldd	r25, Z+3	; 0x03
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	4a ef       	ldi	r20, 0xFA	; 250
    3be8:	54 e4       	ldi	r21, 0x44	; 68
    3bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	f8 01       	movw	r30, r16
    3bf4:	80 83       	st	Z, r24
    3bf6:	91 83       	std	Z+1, r25	; 0x01
    3bf8:	a2 83       	std	Z+2, r26	; 0x02
    3bfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	eb 5b       	subi	r30, 0xBB	; 187
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	60 81       	ld	r22, Z
    3c04:	71 81       	ldd	r23, Z+1	; 0x01
    3c06:	82 81       	ldd	r24, Z+2	; 0x02
    3c08:	93 81       	ldd	r25, Z+3	; 0x03
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	40 e8       	ldi	r20, 0x80	; 128
    3c10:	5f e3       	ldi	r21, 0x3F	; 63
    3c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c16:	88 23       	and	r24, r24
    3c18:	44 f4       	brge	.+16     	; 0x3c2a <LCD_init+0xd2>
		__ticks = 1;
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	ed 5b       	subi	r30, 0xBD	; 189
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	91 83       	std	Z+1, r25	; 0x01
    3c26:	80 83       	st	Z, r24
    3c28:	64 c0       	rjmp	.+200    	; 0x3cf2 <LCD_init+0x19a>
	else if (__tmp > 65535)
    3c2a:	fe 01       	movw	r30, r28
    3c2c:	eb 5b       	subi	r30, 0xBB	; 187
    3c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c30:	60 81       	ld	r22, Z
    3c32:	71 81       	ldd	r23, Z+1	; 0x01
    3c34:	82 81       	ldd	r24, Z+2	; 0x02
    3c36:	93 81       	ldd	r25, Z+3	; 0x03
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	3f ef       	ldi	r19, 0xFF	; 255
    3c3c:	4f e7       	ldi	r20, 0x7F	; 127
    3c3e:	57 e4       	ldi	r21, 0x47	; 71
    3c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c44:	18 16       	cp	r1, r24
    3c46:	0c f0       	brlt	.+2      	; 0x3c4a <LCD_init+0xf2>
    3c48:	43 c0       	rjmp	.+134    	; 0x3cd0 <LCD_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e7 5b       	subi	r30, 0xB7	; 183
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	60 81       	ld	r22, Z
    3c52:	71 81       	ldd	r23, Z+1	; 0x01
    3c54:	82 81       	ldd	r24, Z+2	; 0x02
    3c56:	93 81       	ldd	r25, Z+3	; 0x03
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e2       	ldi	r20, 0x20	; 32
    3c5e:	51 e4       	ldi	r21, 0x41	; 65
    3c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	8e 01       	movw	r16, r28
    3c6a:	0d 5b       	subi	r16, 0xBD	; 189
    3c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6e:	bc 01       	movw	r22, r24
    3c70:	cd 01       	movw	r24, r26
    3c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	f8 01       	movw	r30, r16
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	80 83       	st	Z, r24
    3c80:	1f c0       	rjmp	.+62     	; 0x3cc0 <LCD_init+0x168>
    3c82:	fe 01       	movw	r30, r28
    3c84:	ef 5b       	subi	r30, 0xBF	; 191
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	88 ec       	ldi	r24, 0xC8	; 200
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	91 83       	std	Z+1, r25	; 0x01
    3c8e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3c90:	fe 01       	movw	r30, r28
    3c92:	ef 5b       	subi	r30, 0xBF	; 191
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 81       	ld	r24, Z
    3c98:	91 81       	ldd	r25, Z+1	; 0x01
    3c9a:	01 97       	sbiw	r24, 0x01	; 1
    3c9c:	f1 f7       	brne	.-4      	; 0x3c9a <LCD_init+0x142>
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	ef 5b       	subi	r30, 0xBF	; 191
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	91 83       	std	Z+1, r25	; 0x01
    3ca6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca8:	de 01       	movw	r26, r28
    3caa:	ad 5b       	subi	r26, 0xBD	; 189
    3cac:	bf 4f       	sbci	r27, 0xFF	; 255
    3cae:	fe 01       	movw	r30, r28
    3cb0:	ed 5b       	subi	r30, 0xBD	; 189
    3cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb4:	80 81       	ld	r24, Z
    3cb6:	91 81       	ldd	r25, Z+1	; 0x01
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	11 96       	adiw	r26, 0x01	; 1
    3cbc:	9c 93       	st	X, r25
    3cbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	ed 5b       	subi	r30, 0xBD	; 189
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	80 81       	ld	r24, Z
    3cc8:	91 81       	ldd	r25, Z+1	; 0x01
    3cca:	00 97       	sbiw	r24, 0x00	; 0
    3ccc:	d1 f6       	brne	.-76     	; 0x3c82 <LCD_init+0x12a>
    3cce:	24 c0       	rjmp	.+72     	; 0x3d18 <LCD_init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd0:	8e 01       	movw	r16, r28
    3cd2:	0d 5b       	subi	r16, 0xBD	; 189
    3cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	eb 5b       	subi	r30, 0xBB	; 187
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	60 81       	ld	r22, Z
    3cde:	71 81       	ldd	r23, Z+1	; 0x01
    3ce0:	82 81       	ldd	r24, Z+2	; 0x02
    3ce2:	93 81       	ldd	r25, Z+3	; 0x03
    3ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	f8 01       	movw	r30, r16
    3cee:	91 83       	std	Z+1, r25	; 0x01
    3cf0:	80 83       	st	Z, r24
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	ed 5b       	subi	r30, 0xBD	; 189
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	80 81       	ld	r24, Z
    3cfa:	91 81       	ldd	r25, Z+1	; 0x01
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	ff 96       	adiw	r30, 0x3f	; 63
    3d00:	91 83       	std	Z+1, r25	; 0x01
    3d02:	80 83       	st	Z, r24
    3d04:	fe 01       	movw	r30, r28
    3d06:	ff 96       	adiw	r30, 0x3f	; 63
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	f1 f7       	brne	.-4      	; 0x3d0c <LCD_init+0x1b4>
    3d10:	fe 01       	movw	r30, r28
    3d12:	ff 96       	adiw	r30, 0x3f	; 63
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	80 83       	st	Z, r24
	//wait for
	_delay_ms(50);
	// init 4bit
	LCD_function_Set_4bit();
    3d18:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <LCD_function_Set_4bit>
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	a8 e4       	ldi	r26, 0x48	; 72
    3d22:	b2 e4       	ldi	r27, 0x42	; 66
    3d24:	8b af       	std	Y+59, r24	; 0x3b
    3d26:	9c af       	std	Y+60, r25	; 0x3c
    3d28:	ad af       	std	Y+61, r26	; 0x3d
    3d2a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d2c:	6b ad       	ldd	r22, Y+59	; 0x3b
    3d2e:	7c ad       	ldd	r23, Y+60	; 0x3c
    3d30:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d32:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d34:	2b ea       	ldi	r18, 0xAB	; 171
    3d36:	3a ea       	ldi	r19, 0xAA	; 170
    3d38:	4a e2       	ldi	r20, 0x2A	; 42
    3d3a:	50 e4       	ldi	r21, 0x40	; 64
    3d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	8f ab       	std	Y+55, r24	; 0x37
    3d46:	98 af       	std	Y+56, r25	; 0x38
    3d48:	a9 af       	std	Y+57, r26	; 0x39
    3d4a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3d4c:	6f a9       	ldd	r22, Y+55	; 0x37
    3d4e:	78 ad       	ldd	r23, Y+56	; 0x38
    3d50:	89 ad       	ldd	r24, Y+57	; 0x39
    3d52:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e8       	ldi	r20, 0x80	; 128
    3d5a:	5f e3       	ldi	r21, 0x3F	; 63
    3d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d60:	88 23       	and	r24, r24
    3d62:	1c f4       	brge	.+6      	; 0x3d6a <LCD_init+0x212>
		__ticks = 1;
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	8e ab       	std	Y+54, r24	; 0x36
    3d68:	91 c0       	rjmp	.+290    	; 0x3e8c <LCD_init+0x334>
	else if (__tmp > 255)
    3d6a:	6f a9       	ldd	r22, Y+55	; 0x37
    3d6c:	78 ad       	ldd	r23, Y+56	; 0x38
    3d6e:	89 ad       	ldd	r24, Y+57	; 0x39
    3d70:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	4f e7       	ldi	r20, 0x7F	; 127
    3d78:	53 e4       	ldi	r21, 0x43	; 67
    3d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d7e:	18 16       	cp	r1, r24
    3d80:	0c f0       	brlt	.+2      	; 0x3d84 <LCD_init+0x22c>
    3d82:	7b c0       	rjmp	.+246    	; 0x3e7a <LCD_init+0x322>
	{
		_delay_ms(__us / 1000.0);
    3d84:	6b ad       	ldd	r22, Y+59	; 0x3b
    3d86:	7c ad       	ldd	r23, Y+60	; 0x3c
    3d88:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	4a e7       	ldi	r20, 0x7A	; 122
    3d92:	54 e4       	ldi	r21, 0x44	; 68
    3d94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	8a ab       	std	Y+50, r24	; 0x32
    3d9e:	9b ab       	std	Y+51, r25	; 0x33
    3da0:	ac ab       	std	Y+52, r26	; 0x34
    3da2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da4:	6a a9       	ldd	r22, Y+50	; 0x32
    3da6:	7b a9       	ldd	r23, Y+51	; 0x33
    3da8:	8c a9       	ldd	r24, Y+52	; 0x34
    3daa:	9d a9       	ldd	r25, Y+53	; 0x35
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	4a ef       	ldi	r20, 0xFA	; 250
    3db2:	54 e4       	ldi	r21, 0x44	; 68
    3db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	8e a7       	std	Y+46, r24	; 0x2e
    3dbe:	9f a7       	std	Y+47, r25	; 0x2f
    3dc0:	a8 ab       	std	Y+48, r26	; 0x30
    3dc2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3dc4:	6e a5       	ldd	r22, Y+46	; 0x2e
    3dc6:	7f a5       	ldd	r23, Y+47	; 0x2f
    3dc8:	88 a9       	ldd	r24, Y+48	; 0x30
    3dca:	99 a9       	ldd	r25, Y+49	; 0x31
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	40 e8       	ldi	r20, 0x80	; 128
    3dd2:	5f e3       	ldi	r21, 0x3F	; 63
    3dd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd8:	88 23       	and	r24, r24
    3dda:	2c f4       	brge	.+10     	; 0x3de6 <LCD_init+0x28e>
		__ticks = 1;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	9d a7       	std	Y+45, r25	; 0x2d
    3de2:	8c a7       	std	Y+44, r24	; 0x2c
    3de4:	3f c0       	rjmp	.+126    	; 0x3e64 <LCD_init+0x30c>
	else if (__tmp > 65535)
    3de6:	6e a5       	ldd	r22, Y+46	; 0x2e
    3de8:	7f a5       	ldd	r23, Y+47	; 0x2f
    3dea:	88 a9       	ldd	r24, Y+48	; 0x30
    3dec:	99 a9       	ldd	r25, Y+49	; 0x31
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	3f ef       	ldi	r19, 0xFF	; 255
    3df2:	4f e7       	ldi	r20, 0x7F	; 127
    3df4:	57 e4       	ldi	r21, 0x47	; 71
    3df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dfa:	18 16       	cp	r1, r24
    3dfc:	4c f5       	brge	.+82     	; 0x3e50 <LCD_init+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dfe:	6a a9       	ldd	r22, Y+50	; 0x32
    3e00:	7b a9       	ldd	r23, Y+51	; 0x33
    3e02:	8c a9       	ldd	r24, Y+52	; 0x34
    3e04:	9d a9       	ldd	r25, Y+53	; 0x35
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e2       	ldi	r20, 0x20	; 32
    3e0c:	51 e4       	ldi	r21, 0x41	; 65
    3e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	bc 01       	movw	r22, r24
    3e18:	cd 01       	movw	r24, r26
    3e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	9d a7       	std	Y+45, r25	; 0x2d
    3e24:	8c a7       	std	Y+44, r24	; 0x2c
    3e26:	0f c0       	rjmp	.+30     	; 0x3e46 <LCD_init+0x2ee>
    3e28:	88 ec       	ldi	r24, 0xC8	; 200
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	9b a7       	std	Y+43, r25	; 0x2b
    3e2e:	8a a7       	std	Y+42, r24	; 0x2a
    3e30:	8a a5       	ldd	r24, Y+42	; 0x2a
    3e32:	9b a5       	ldd	r25, Y+43	; 0x2b
    3e34:	01 97       	sbiw	r24, 0x01	; 1
    3e36:	f1 f7       	brne	.-4      	; 0x3e34 <LCD_init+0x2dc>
    3e38:	9b a7       	std	Y+43, r25	; 0x2b
    3e3a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3e40:	01 97       	sbiw	r24, 0x01	; 1
    3e42:	9d a7       	std	Y+45, r25	; 0x2d
    3e44:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e46:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e48:	9d a5       	ldd	r25, Y+45	; 0x2d
    3e4a:	00 97       	sbiw	r24, 0x00	; 0
    3e4c:	69 f7       	brne	.-38     	; 0x3e28 <LCD_init+0x2d0>
    3e4e:	24 c0       	rjmp	.+72     	; 0x3e98 <LCD_init+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e50:	6e a5       	ldd	r22, Y+46	; 0x2e
    3e52:	7f a5       	ldd	r23, Y+47	; 0x2f
    3e54:	88 a9       	ldd	r24, Y+48	; 0x30
    3e56:	99 a9       	ldd	r25, Y+49	; 0x31
    3e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	9d a7       	std	Y+45, r25	; 0x2d
    3e62:	8c a7       	std	Y+44, r24	; 0x2c
    3e64:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e66:	9d a5       	ldd	r25, Y+45	; 0x2d
    3e68:	99 a7       	std	Y+41, r25	; 0x29
    3e6a:	88 a7       	std	Y+40, r24	; 0x28
    3e6c:	88 a5       	ldd	r24, Y+40	; 0x28
    3e6e:	99 a5       	ldd	r25, Y+41	; 0x29
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <LCD_init+0x318>
    3e74:	99 a7       	std	Y+41, r25	; 0x29
    3e76:	88 a7       	std	Y+40, r24	; 0x28
    3e78:	0f c0       	rjmp	.+30     	; 0x3e98 <LCD_init+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3e7a:	6f a9       	ldd	r22, Y+55	; 0x37
    3e7c:	78 ad       	ldd	r23, Y+56	; 0x38
    3e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    3e80:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	8e ab       	std	Y+54, r24	; 0x36
    3e8c:	8e a9       	ldd	r24, Y+54	; 0x36
    3e8e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e90:	8f a1       	ldd	r24, Y+39	; 0x27
    3e92:	8a 95       	dec	r24
    3e94:	f1 f7       	brne	.-4      	; 0x3e92 <LCD_init+0x33a>
    3e96:	8f a3       	std	Y+39, r24	; 0x27
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(display_On);
    3e98:	8c e0       	ldi	r24, 0x0C	; 12
    3e9a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_write_command_4bit>
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	a8 e4       	ldi	r26, 0x48	; 72
    3ea4:	b2 e4       	ldi	r27, 0x42	; 66
    3ea6:	8b a3       	std	Y+35, r24	; 0x23
    3ea8:	9c a3       	std	Y+36, r25	; 0x24
    3eaa:	ad a3       	std	Y+37, r26	; 0x25
    3eac:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3eae:	6b a1       	ldd	r22, Y+35	; 0x23
    3eb0:	7c a1       	ldd	r23, Y+36	; 0x24
    3eb2:	8d a1       	ldd	r24, Y+37	; 0x25
    3eb4:	9e a1       	ldd	r25, Y+38	; 0x26
    3eb6:	2b ea       	ldi	r18, 0xAB	; 171
    3eb8:	3a ea       	ldi	r19, 0xAA	; 170
    3eba:	4a e2       	ldi	r20, 0x2A	; 42
    3ebc:	50 e4       	ldi	r21, 0x40	; 64
    3ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	8f 8f       	std	Y+31, r24	; 0x1f
    3ec8:	98 a3       	std	Y+32, r25	; 0x20
    3eca:	a9 a3       	std	Y+33, r26	; 0x21
    3ecc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3ece:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3ed0:	78 a1       	ldd	r23, Y+32	; 0x20
    3ed2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ed4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e8       	ldi	r20, 0x80	; 128
    3edc:	5f e3       	ldi	r21, 0x3F	; 63
    3ede:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ee2:	88 23       	and	r24, r24
    3ee4:	1c f4       	brge	.+6      	; 0x3eec <LCD_init+0x394>
		__ticks = 1;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	8e 8f       	std	Y+30, r24	; 0x1e
    3eea:	91 c0       	rjmp	.+290    	; 0x400e <LCD_init+0x4b6>
	else if (__tmp > 255)
    3eec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3eee:	78 a1       	ldd	r23, Y+32	; 0x20
    3ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	4f e7       	ldi	r20, 0x7F	; 127
    3efa:	53 e4       	ldi	r21, 0x43	; 67
    3efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f00:	18 16       	cp	r1, r24
    3f02:	0c f0       	brlt	.+2      	; 0x3f06 <LCD_init+0x3ae>
    3f04:	7b c0       	rjmp	.+246    	; 0x3ffc <LCD_init+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    3f06:	6b a1       	ldd	r22, Y+35	; 0x23
    3f08:	7c a1       	ldd	r23, Y+36	; 0x24
    3f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    3f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	4a e7       	ldi	r20, 0x7A	; 122
    3f14:	54 e4       	ldi	r21, 0x44	; 68
    3f16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	8a 8f       	std	Y+26, r24	; 0x1a
    3f20:	9b 8f       	std	Y+27, r25	; 0x1b
    3f22:	ac 8f       	std	Y+28, r26	; 0x1c
    3f24:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f26:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3f28:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3f2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f2e:	20 e0       	ldi	r18, 0x00	; 0
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	4a ef       	ldi	r20, 0xFA	; 250
    3f34:	54 e4       	ldi	r21, 0x44	; 68
    3f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	8e 8b       	std	Y+22, r24	; 0x16
    3f40:	9f 8b       	std	Y+23, r25	; 0x17
    3f42:	a8 8f       	std	Y+24, r26	; 0x18
    3f44:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3f46:	6e 89       	ldd	r22, Y+22	; 0x16
    3f48:	7f 89       	ldd	r23, Y+23	; 0x17
    3f4a:	88 8d       	ldd	r24, Y+24	; 0x18
    3f4c:	99 8d       	ldd	r25, Y+25	; 0x19
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	40 e8       	ldi	r20, 0x80	; 128
    3f54:	5f e3       	ldi	r21, 0x3F	; 63
    3f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f5a:	88 23       	and	r24, r24
    3f5c:	2c f4       	brge	.+10     	; 0x3f68 <LCD_init+0x410>
		__ticks = 1;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	9d 8b       	std	Y+21, r25	; 0x15
    3f64:	8c 8b       	std	Y+20, r24	; 0x14
    3f66:	3f c0       	rjmp	.+126    	; 0x3fe6 <LCD_init+0x48e>
	else if (__tmp > 65535)
    3f68:	6e 89       	ldd	r22, Y+22	; 0x16
    3f6a:	7f 89       	ldd	r23, Y+23	; 0x17
    3f6c:	88 8d       	ldd	r24, Y+24	; 0x18
    3f6e:	99 8d       	ldd	r25, Y+25	; 0x19
    3f70:	20 e0       	ldi	r18, 0x00	; 0
    3f72:	3f ef       	ldi	r19, 0xFF	; 255
    3f74:	4f e7       	ldi	r20, 0x7F	; 127
    3f76:	57 e4       	ldi	r21, 0x47	; 71
    3f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f7c:	18 16       	cp	r1, r24
    3f7e:	4c f5       	brge	.+82     	; 0x3fd2 <LCD_init+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f80:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3f82:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3f84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f88:	20 e0       	ldi	r18, 0x00	; 0
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e2       	ldi	r20, 0x20	; 32
    3f8e:	51 e4       	ldi	r21, 0x41	; 65
    3f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	bc 01       	movw	r22, r24
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9d 8b       	std	Y+21, r25	; 0x15
    3fa6:	8c 8b       	std	Y+20, r24	; 0x14
    3fa8:	0f c0       	rjmp	.+30     	; 0x3fc8 <LCD_init+0x470>
    3faa:	88 ec       	ldi	r24, 0xC8	; 200
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	9b 8b       	std	Y+19, r25	; 0x13
    3fb0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3fb2:	8a 89       	ldd	r24, Y+18	; 0x12
    3fb4:	9b 89       	ldd	r25, Y+19	; 0x13
    3fb6:	01 97       	sbiw	r24, 0x01	; 1
    3fb8:	f1 f7       	brne	.-4      	; 0x3fb6 <LCD_init+0x45e>
    3fba:	9b 8b       	std	Y+19, r25	; 0x13
    3fbc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fbe:	8c 89       	ldd	r24, Y+20	; 0x14
    3fc0:	9d 89       	ldd	r25, Y+21	; 0x15
    3fc2:	01 97       	sbiw	r24, 0x01	; 1
    3fc4:	9d 8b       	std	Y+21, r25	; 0x15
    3fc6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc8:	8c 89       	ldd	r24, Y+20	; 0x14
    3fca:	9d 89       	ldd	r25, Y+21	; 0x15
    3fcc:	00 97       	sbiw	r24, 0x00	; 0
    3fce:	69 f7       	brne	.-38     	; 0x3faa <LCD_init+0x452>
    3fd0:	24 c0       	rjmp	.+72     	; 0x401a <LCD_init+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd2:	6e 89       	ldd	r22, Y+22	; 0x16
    3fd4:	7f 89       	ldd	r23, Y+23	; 0x17
    3fd6:	88 8d       	ldd	r24, Y+24	; 0x18
    3fd8:	99 8d       	ldd	r25, Y+25	; 0x19
    3fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	9d 8b       	std	Y+21, r25	; 0x15
    3fe4:	8c 8b       	std	Y+20, r24	; 0x14
    3fe6:	8c 89       	ldd	r24, Y+20	; 0x14
    3fe8:	9d 89       	ldd	r25, Y+21	; 0x15
    3fea:	99 8b       	std	Y+17, r25	; 0x11
    3fec:	88 8b       	std	Y+16, r24	; 0x10
    3fee:	88 89       	ldd	r24, Y+16	; 0x10
    3ff0:	99 89       	ldd	r25, Y+17	; 0x11
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <LCD_init+0x49a>
    3ff6:	99 8b       	std	Y+17, r25	; 0x11
    3ff8:	88 8b       	std	Y+16, r24	; 0x10
    3ffa:	0f c0       	rjmp	.+30     	; 0x401a <LCD_init+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ffc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3ffe:	78 a1       	ldd	r23, Y+32	; 0x20
    4000:	89 a1       	ldd	r24, Y+33	; 0x21
    4002:	9a a1       	ldd	r25, Y+34	; 0x22
    4004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	8e 8f       	std	Y+30, r24	; 0x1e
    400e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4010:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4012:	8f 85       	ldd	r24, Y+15	; 0x0f
    4014:	8a 95       	dec	r24
    4016:	f1 f7       	brne	.-4      	; 0x4014 <LCD_init+0x4bc>
    4018:	8f 87       	std	Y+15, r24	; 0x0f
	// wait > 30 us
	_delay_us(50);
	LCD_write_command_4bit(clear_Display);
    401a:	81 e0       	ldi	r24, 0x01	; 1
    401c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_write_command_4bit>
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	a0 e0       	ldi	r26, 0x00	; 0
    4026:	b0 e4       	ldi	r27, 0x40	; 64
    4028:	8b 87       	std	Y+11, r24	; 0x0b
    402a:	9c 87       	std	Y+12, r25	; 0x0c
    402c:	ad 87       	std	Y+13, r26	; 0x0d
    402e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4030:	6b 85       	ldd	r22, Y+11	; 0x0b
    4032:	7c 85       	ldd	r23, Y+12	; 0x0c
    4034:	8d 85       	ldd	r24, Y+13	; 0x0d
    4036:	9e 85       	ldd	r25, Y+14	; 0x0e
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	4a ef       	ldi	r20, 0xFA	; 250
    403e:	54 e4       	ldi	r21, 0x44	; 68
    4040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4044:	dc 01       	movw	r26, r24
    4046:	cb 01       	movw	r24, r22
    4048:	8f 83       	std	Y+7, r24	; 0x07
    404a:	98 87       	std	Y+8, r25	; 0x08
    404c:	a9 87       	std	Y+9, r26	; 0x09
    404e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4050:	6f 81       	ldd	r22, Y+7	; 0x07
    4052:	78 85       	ldd	r23, Y+8	; 0x08
    4054:	89 85       	ldd	r24, Y+9	; 0x09
    4056:	9a 85       	ldd	r25, Y+10	; 0x0a
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e8       	ldi	r20, 0x80	; 128
    405e:	5f e3       	ldi	r21, 0x3F	; 63
    4060:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4064:	88 23       	and	r24, r24
    4066:	2c f4       	brge	.+10     	; 0x4072 <LCD_init+0x51a>
		__ticks = 1;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	9e 83       	std	Y+6, r25	; 0x06
    406e:	8d 83       	std	Y+5, r24	; 0x05
    4070:	3f c0       	rjmp	.+126    	; 0x40f0 <LCD_init+0x598>
	else if (__tmp > 65535)
    4072:	6f 81       	ldd	r22, Y+7	; 0x07
    4074:	78 85       	ldd	r23, Y+8	; 0x08
    4076:	89 85       	ldd	r24, Y+9	; 0x09
    4078:	9a 85       	ldd	r25, Y+10	; 0x0a
    407a:	20 e0       	ldi	r18, 0x00	; 0
    407c:	3f ef       	ldi	r19, 0xFF	; 255
    407e:	4f e7       	ldi	r20, 0x7F	; 127
    4080:	57 e4       	ldi	r21, 0x47	; 71
    4082:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4086:	18 16       	cp	r1, r24
    4088:	4c f5       	brge	.+82     	; 0x40dc <LCD_init+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    408a:	6b 85       	ldd	r22, Y+11	; 0x0b
    408c:	7c 85       	ldd	r23, Y+12	; 0x0c
    408e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4090:	9e 85       	ldd	r25, Y+14	; 0x0e
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	40 e2       	ldi	r20, 0x20	; 32
    4098:	51 e4       	ldi	r21, 0x41	; 65
    409a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	bc 01       	movw	r22, r24
    40a4:	cd 01       	movw	r24, r26
    40a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	9e 83       	std	Y+6, r25	; 0x06
    40b0:	8d 83       	std	Y+5, r24	; 0x05
    40b2:	0f c0       	rjmp	.+30     	; 0x40d2 <LCD_init+0x57a>
    40b4:	88 ec       	ldi	r24, 0xC8	; 200
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	9c 83       	std	Y+4, r25	; 0x04
    40ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40bc:	8b 81       	ldd	r24, Y+3	; 0x03
    40be:	9c 81       	ldd	r25, Y+4	; 0x04
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <LCD_init+0x568>
    40c4:	9c 83       	std	Y+4, r25	; 0x04
    40c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ca:	9e 81       	ldd	r25, Y+6	; 0x06
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	9e 83       	std	Y+6, r25	; 0x06
    40d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d2:	8d 81       	ldd	r24, Y+5	; 0x05
    40d4:	9e 81       	ldd	r25, Y+6	; 0x06
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	69 f7       	brne	.-38     	; 0x40b4 <LCD_init+0x55c>
    40da:	14 c0       	rjmp	.+40     	; 0x4104 <LCD_init+0x5ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40dc:	6f 81       	ldd	r22, Y+7	; 0x07
    40de:	78 85       	ldd	r23, Y+8	; 0x08
    40e0:	89 85       	ldd	r24, Y+9	; 0x09
    40e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40e8:	dc 01       	movw	r26, r24
    40ea:	cb 01       	movw	r24, r22
    40ec:	9e 83       	std	Y+6, r25	; 0x06
    40ee:	8d 83       	std	Y+5, r24	; 0x05
    40f0:	8d 81       	ldd	r24, Y+5	; 0x05
    40f2:	9e 81       	ldd	r25, Y+6	; 0x06
    40f4:	9a 83       	std	Y+2, r25	; 0x02
    40f6:	89 83       	std	Y+1, r24	; 0x01
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	9a 81       	ldd	r25, Y+2	; 0x02
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	f1 f7       	brne	.-4      	; 0x40fc <LCD_init+0x5a4>
    4100:	9a 83       	std	Y+2, r25	; 0x02
    4102:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
//	LCD_write_data_4bit(entry_Mode);

#endif

}
    4104:	c4 5b       	subi	r28, 0xB4	; 180
    4106:	df 4f       	sbci	r29, 0xFF	; 255
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	1f 91       	pop	r17
    4118:	0f 91       	pop	r16
    411a:	08 95       	ret

0000411c <LCD_set_cursor>:

void LCD_set_cursor(u8 copy_u8_row , u8 copy_u8_Column){
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
    4124:	6b 97       	sbiw	r28, 0x1b	; 27
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	8a 8f       	std	Y+26, r24	; 0x1a
    4132:	6b 8f       	std	Y+27, r22	; 0x1b
	//delay to smooth things out
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	u8 loc_Address = 128+(copy_u8_row*line2_Start)+(copy_u8_Column);
    4134:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4136:	88 2f       	mov	r24, r24
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	02 96       	adiw	r24, 0x02	; 2
    413c:	00 24       	eor	r0, r0
    413e:	96 95       	lsr	r25
    4140:	87 95       	ror	r24
    4142:	07 94       	ror	r0
    4144:	96 95       	lsr	r25
    4146:	87 95       	ror	r24
    4148:	07 94       	ror	r0
    414a:	98 2f       	mov	r25, r24
    414c:	80 2d       	mov	r24, r0
    414e:	98 2f       	mov	r25, r24
    4150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4152:	89 0f       	add	r24, r25
    4154:	89 8f       	std	Y+25, r24	; 0x19
		LCD_write_command_4bit(loc_Address);
    4156:	89 8d       	ldd	r24, Y+25	; 0x19
    4158:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_write_command_4bit>
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	a8 e4       	ldi	r26, 0x48	; 72
    4162:	b2 e4       	ldi	r27, 0x42	; 66
    4164:	8d 8b       	std	Y+21, r24	; 0x15
    4166:	9e 8b       	std	Y+22, r25	; 0x16
    4168:	af 8b       	std	Y+23, r26	; 0x17
    416a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    416c:	6d 89       	ldd	r22, Y+21	; 0x15
    416e:	7e 89       	ldd	r23, Y+22	; 0x16
    4170:	8f 89       	ldd	r24, Y+23	; 0x17
    4172:	98 8d       	ldd	r25, Y+24	; 0x18
    4174:	2b ea       	ldi	r18, 0xAB	; 171
    4176:	3a ea       	ldi	r19, 0xAA	; 170
    4178:	4a e2       	ldi	r20, 0x2A	; 42
    417a:	50 e4       	ldi	r21, 0x40	; 64
    417c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4180:	dc 01       	movw	r26, r24
    4182:	cb 01       	movw	r24, r22
    4184:	89 8b       	std	Y+17, r24	; 0x11
    4186:	9a 8b       	std	Y+18, r25	; 0x12
    4188:	ab 8b       	std	Y+19, r26	; 0x13
    418a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    418c:	69 89       	ldd	r22, Y+17	; 0x11
    418e:	7a 89       	ldd	r23, Y+18	; 0x12
    4190:	8b 89       	ldd	r24, Y+19	; 0x13
    4192:	9c 89       	ldd	r25, Y+20	; 0x14
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	30 e0       	ldi	r19, 0x00	; 0
    4198:	40 e8       	ldi	r20, 0x80	; 128
    419a:	5f e3       	ldi	r21, 0x3F	; 63
    419c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41a0:	88 23       	and	r24, r24
    41a2:	1c f4       	brge	.+6      	; 0x41aa <LCD_set_cursor+0x8e>
		__ticks = 1;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	88 8b       	std	Y+16, r24	; 0x10
    41a8:	91 c0       	rjmp	.+290    	; 0x42cc <LCD_set_cursor+0x1b0>
	else if (__tmp > 255)
    41aa:	69 89       	ldd	r22, Y+17	; 0x11
    41ac:	7a 89       	ldd	r23, Y+18	; 0x12
    41ae:	8b 89       	ldd	r24, Y+19	; 0x13
    41b0:	9c 89       	ldd	r25, Y+20	; 0x14
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	53 e4       	ldi	r21, 0x43	; 67
    41ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	0c f0       	brlt	.+2      	; 0x41c4 <LCD_set_cursor+0xa8>
    41c2:	7b c0       	rjmp	.+246    	; 0x42ba <LCD_set_cursor+0x19e>
	{
		_delay_ms(__us / 1000.0);
    41c4:	6d 89       	ldd	r22, Y+21	; 0x15
    41c6:	7e 89       	ldd	r23, Y+22	; 0x16
    41c8:	8f 89       	ldd	r24, Y+23	; 0x17
    41ca:	98 8d       	ldd	r25, Y+24	; 0x18
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	4a e7       	ldi	r20, 0x7A	; 122
    41d2:	54 e4       	ldi	r21, 0x44	; 68
    41d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	8c 87       	std	Y+12, r24	; 0x0c
    41de:	9d 87       	std	Y+13, r25	; 0x0d
    41e0:	ae 87       	std	Y+14, r26	; 0x0e
    41e2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    41e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    41e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    41ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	4a ef       	ldi	r20, 0xFA	; 250
    41f2:	54 e4       	ldi	r21, 0x44	; 68
    41f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	88 87       	std	Y+8, r24	; 0x08
    41fe:	99 87       	std	Y+9, r25	; 0x09
    4200:	aa 87       	std	Y+10, r26	; 0x0a
    4202:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4204:	68 85       	ldd	r22, Y+8	; 0x08
    4206:	79 85       	ldd	r23, Y+9	; 0x09
    4208:	8a 85       	ldd	r24, Y+10	; 0x0a
    420a:	9b 85       	ldd	r25, Y+11	; 0x0b
    420c:	20 e0       	ldi	r18, 0x00	; 0
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	40 e8       	ldi	r20, 0x80	; 128
    4212:	5f e3       	ldi	r21, 0x3F	; 63
    4214:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4218:	88 23       	and	r24, r24
    421a:	2c f4       	brge	.+10     	; 0x4226 <LCD_set_cursor+0x10a>
		__ticks = 1;
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	9f 83       	std	Y+7, r25	; 0x07
    4222:	8e 83       	std	Y+6, r24	; 0x06
    4224:	3f c0       	rjmp	.+126    	; 0x42a4 <LCD_set_cursor+0x188>
	else if (__tmp > 65535)
    4226:	68 85       	ldd	r22, Y+8	; 0x08
    4228:	79 85       	ldd	r23, Y+9	; 0x09
    422a:	8a 85       	ldd	r24, Y+10	; 0x0a
    422c:	9b 85       	ldd	r25, Y+11	; 0x0b
    422e:	20 e0       	ldi	r18, 0x00	; 0
    4230:	3f ef       	ldi	r19, 0xFF	; 255
    4232:	4f e7       	ldi	r20, 0x7F	; 127
    4234:	57 e4       	ldi	r21, 0x47	; 71
    4236:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    423a:	18 16       	cp	r1, r24
    423c:	4c f5       	brge	.+82     	; 0x4290 <LCD_set_cursor+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    423e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4240:	7d 85       	ldd	r23, Y+13	; 0x0d
    4242:	8e 85       	ldd	r24, Y+14	; 0x0e
    4244:	9f 85       	ldd	r25, Y+15	; 0x0f
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	40 e2       	ldi	r20, 0x20	; 32
    424c:	51 e4       	ldi	r21, 0x41	; 65
    424e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4252:	dc 01       	movw	r26, r24
    4254:	cb 01       	movw	r24, r22
    4256:	bc 01       	movw	r22, r24
    4258:	cd 01       	movw	r24, r26
    425a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	9f 83       	std	Y+7, r25	; 0x07
    4264:	8e 83       	std	Y+6, r24	; 0x06
    4266:	0f c0       	rjmp	.+30     	; 0x4286 <LCD_set_cursor+0x16a>
    4268:	88 ec       	ldi	r24, 0xC8	; 200
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	9d 83       	std	Y+5, r25	; 0x05
    426e:	8c 83       	std	Y+4, r24	; 0x04
    4270:	8c 81       	ldd	r24, Y+4	; 0x04
    4272:	9d 81       	ldd	r25, Y+5	; 0x05
    4274:	01 97       	sbiw	r24, 0x01	; 1
    4276:	f1 f7       	brne	.-4      	; 0x4274 <LCD_set_cursor+0x158>
    4278:	9d 83       	std	Y+5, r25	; 0x05
    427a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    427c:	8e 81       	ldd	r24, Y+6	; 0x06
    427e:	9f 81       	ldd	r25, Y+7	; 0x07
    4280:	01 97       	sbiw	r24, 0x01	; 1
    4282:	9f 83       	std	Y+7, r25	; 0x07
    4284:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4286:	8e 81       	ldd	r24, Y+6	; 0x06
    4288:	9f 81       	ldd	r25, Y+7	; 0x07
    428a:	00 97       	sbiw	r24, 0x00	; 0
    428c:	69 f7       	brne	.-38     	; 0x4268 <LCD_set_cursor+0x14c>
    428e:	24 c0       	rjmp	.+72     	; 0x42d8 <LCD_set_cursor+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4290:	68 85       	ldd	r22, Y+8	; 0x08
    4292:	79 85       	ldd	r23, Y+9	; 0x09
    4294:	8a 85       	ldd	r24, Y+10	; 0x0a
    4296:	9b 85       	ldd	r25, Y+11	; 0x0b
    4298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	9f 83       	std	Y+7, r25	; 0x07
    42a2:	8e 83       	std	Y+6, r24	; 0x06
    42a4:	8e 81       	ldd	r24, Y+6	; 0x06
    42a6:	9f 81       	ldd	r25, Y+7	; 0x07
    42a8:	9b 83       	std	Y+3, r25	; 0x03
    42aa:	8a 83       	std	Y+2, r24	; 0x02
    42ac:	8a 81       	ldd	r24, Y+2	; 0x02
    42ae:	9b 81       	ldd	r25, Y+3	; 0x03
    42b0:	01 97       	sbiw	r24, 0x01	; 1
    42b2:	f1 f7       	brne	.-4      	; 0x42b0 <LCD_set_cursor+0x194>
    42b4:	9b 83       	std	Y+3, r25	; 0x03
    42b6:	8a 83       	std	Y+2, r24	; 0x02
    42b8:	0f c0       	rjmp	.+30     	; 0x42d8 <LCD_set_cursor+0x1bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    42ba:	69 89       	ldd	r22, Y+17	; 0x11
    42bc:	7a 89       	ldd	r23, Y+18	; 0x12
    42be:	8b 89       	ldd	r24, Y+19	; 0x13
    42c0:	9c 89       	ldd	r25, Y+20	; 0x14
    42c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	88 8b       	std	Y+16, r24	; 0x10
    42cc:	88 89       	ldd	r24, Y+16	; 0x10
    42ce:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	8a 95       	dec	r24
    42d4:	f1 f7       	brne	.-4      	; 0x42d2 <LCD_set_cursor+0x1b6>
    42d6:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    42d8:	6b 96       	adiw	r28, 0x1b	; 27
    42da:	0f b6       	in	r0, 0x3f	; 63
    42dc:	f8 94       	cli
    42de:	de bf       	out	0x3e, r29	; 62
    42e0:	0f be       	out	0x3f, r0	; 63
    42e2:	cd bf       	out	0x3d, r28	; 61
    42e4:	cf 91       	pop	r28
    42e6:	df 91       	pop	r29
    42e8:	08 95       	ret

000042ea <LCD_on>:

void LCD_on(){
    42ea:	df 93       	push	r29
    42ec:	cf 93       	push	r28
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62
    42f2:	68 97       	sbiw	r28, 0x18	; 24
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_On);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_On);
    42fe:	8c e0       	ldi	r24, 0x0C	; 12
    4300:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_write_command_4bit>
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	a8 e4       	ldi	r26, 0x48	; 72
    430a:	b2 e4       	ldi	r27, 0x42	; 66
    430c:	8d 8b       	std	Y+21, r24	; 0x15
    430e:	9e 8b       	std	Y+22, r25	; 0x16
    4310:	af 8b       	std	Y+23, r26	; 0x17
    4312:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4314:	6d 89       	ldd	r22, Y+21	; 0x15
    4316:	7e 89       	ldd	r23, Y+22	; 0x16
    4318:	8f 89       	ldd	r24, Y+23	; 0x17
    431a:	98 8d       	ldd	r25, Y+24	; 0x18
    431c:	2b ea       	ldi	r18, 0xAB	; 171
    431e:	3a ea       	ldi	r19, 0xAA	; 170
    4320:	4a e2       	ldi	r20, 0x2A	; 42
    4322:	50 e4       	ldi	r21, 0x40	; 64
    4324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	89 8b       	std	Y+17, r24	; 0x11
    432e:	9a 8b       	std	Y+18, r25	; 0x12
    4330:	ab 8b       	std	Y+19, r26	; 0x13
    4332:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4334:	69 89       	ldd	r22, Y+17	; 0x11
    4336:	7a 89       	ldd	r23, Y+18	; 0x12
    4338:	8b 89       	ldd	r24, Y+19	; 0x13
    433a:	9c 89       	ldd	r25, Y+20	; 0x14
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	40 e8       	ldi	r20, 0x80	; 128
    4342:	5f e3       	ldi	r21, 0x3F	; 63
    4344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4348:	88 23       	and	r24, r24
    434a:	1c f4       	brge	.+6      	; 0x4352 <LCD_on+0x68>
		__ticks = 1;
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	88 8b       	std	Y+16, r24	; 0x10
    4350:	91 c0       	rjmp	.+290    	; 0x4474 <LCD_on+0x18a>
	else if (__tmp > 255)
    4352:	69 89       	ldd	r22, Y+17	; 0x11
    4354:	7a 89       	ldd	r23, Y+18	; 0x12
    4356:	8b 89       	ldd	r24, Y+19	; 0x13
    4358:	9c 89       	ldd	r25, Y+20	; 0x14
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	4f e7       	ldi	r20, 0x7F	; 127
    4360:	53 e4       	ldi	r21, 0x43	; 67
    4362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4366:	18 16       	cp	r1, r24
    4368:	0c f0       	brlt	.+2      	; 0x436c <LCD_on+0x82>
    436a:	7b c0       	rjmp	.+246    	; 0x4462 <LCD_on+0x178>
	{
		_delay_ms(__us / 1000.0);
    436c:	6d 89       	ldd	r22, Y+21	; 0x15
    436e:	7e 89       	ldd	r23, Y+22	; 0x16
    4370:	8f 89       	ldd	r24, Y+23	; 0x17
    4372:	98 8d       	ldd	r25, Y+24	; 0x18
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	4a e7       	ldi	r20, 0x7A	; 122
    437a:	54 e4       	ldi	r21, 0x44	; 68
    437c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	8c 87       	std	Y+12, r24	; 0x0c
    4386:	9d 87       	std	Y+13, r25	; 0x0d
    4388:	ae 87       	std	Y+14, r26	; 0x0e
    438a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    438c:	6c 85       	ldd	r22, Y+12	; 0x0c
    438e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4390:	8e 85       	ldd	r24, Y+14	; 0x0e
    4392:	9f 85       	ldd	r25, Y+15	; 0x0f
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	4a ef       	ldi	r20, 0xFA	; 250
    439a:	54 e4       	ldi	r21, 0x44	; 68
    439c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	88 87       	std	Y+8, r24	; 0x08
    43a6:	99 87       	std	Y+9, r25	; 0x09
    43a8:	aa 87       	std	Y+10, r26	; 0x0a
    43aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    43ac:	68 85       	ldd	r22, Y+8	; 0x08
    43ae:	79 85       	ldd	r23, Y+9	; 0x09
    43b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    43b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e8       	ldi	r20, 0x80	; 128
    43ba:	5f e3       	ldi	r21, 0x3F	; 63
    43bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43c0:	88 23       	and	r24, r24
    43c2:	2c f4       	brge	.+10     	; 0x43ce <LCD_on+0xe4>
		__ticks = 1;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	9f 83       	std	Y+7, r25	; 0x07
    43ca:	8e 83       	std	Y+6, r24	; 0x06
    43cc:	3f c0       	rjmp	.+126    	; 0x444c <LCD_on+0x162>
	else if (__tmp > 65535)
    43ce:	68 85       	ldd	r22, Y+8	; 0x08
    43d0:	79 85       	ldd	r23, Y+9	; 0x09
    43d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    43d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	3f ef       	ldi	r19, 0xFF	; 255
    43da:	4f e7       	ldi	r20, 0x7F	; 127
    43dc:	57 e4       	ldi	r21, 0x47	; 71
    43de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43e2:	18 16       	cp	r1, r24
    43e4:	4c f5       	brge	.+82     	; 0x4438 <LCD_on+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    43e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    43ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    43ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	40 e2       	ldi	r20, 0x20	; 32
    43f4:	51 e4       	ldi	r21, 0x41	; 65
    43f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	9f 83       	std	Y+7, r25	; 0x07
    440c:	8e 83       	std	Y+6, r24	; 0x06
    440e:	0f c0       	rjmp	.+30     	; 0x442e <LCD_on+0x144>
    4410:	88 ec       	ldi	r24, 0xC8	; 200
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	9d 83       	std	Y+5, r25	; 0x05
    4416:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4418:	8c 81       	ldd	r24, Y+4	; 0x04
    441a:	9d 81       	ldd	r25, Y+5	; 0x05
    441c:	01 97       	sbiw	r24, 0x01	; 1
    441e:	f1 f7       	brne	.-4      	; 0x441c <LCD_on+0x132>
    4420:	9d 83       	std	Y+5, r25	; 0x05
    4422:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4424:	8e 81       	ldd	r24, Y+6	; 0x06
    4426:	9f 81       	ldd	r25, Y+7	; 0x07
    4428:	01 97       	sbiw	r24, 0x01	; 1
    442a:	9f 83       	std	Y+7, r25	; 0x07
    442c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    442e:	8e 81       	ldd	r24, Y+6	; 0x06
    4430:	9f 81       	ldd	r25, Y+7	; 0x07
    4432:	00 97       	sbiw	r24, 0x00	; 0
    4434:	69 f7       	brne	.-38     	; 0x4410 <LCD_on+0x126>
    4436:	24 c0       	rjmp	.+72     	; 0x4480 <LCD_on+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4438:	68 85       	ldd	r22, Y+8	; 0x08
    443a:	79 85       	ldd	r23, Y+9	; 0x09
    443c:	8a 85       	ldd	r24, Y+10	; 0x0a
    443e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	9f 83       	std	Y+7, r25	; 0x07
    444a:	8e 83       	std	Y+6, r24	; 0x06
    444c:	8e 81       	ldd	r24, Y+6	; 0x06
    444e:	9f 81       	ldd	r25, Y+7	; 0x07
    4450:	9b 83       	std	Y+3, r25	; 0x03
    4452:	8a 83       	std	Y+2, r24	; 0x02
    4454:	8a 81       	ldd	r24, Y+2	; 0x02
    4456:	9b 81       	ldd	r25, Y+3	; 0x03
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	f1 f7       	brne	.-4      	; 0x4458 <LCD_on+0x16e>
    445c:	9b 83       	std	Y+3, r25	; 0x03
    445e:	8a 83       	std	Y+2, r24	; 0x02
    4460:	0f c0       	rjmp	.+30     	; 0x4480 <LCD_on+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4462:	69 89       	ldd	r22, Y+17	; 0x11
    4464:	7a 89       	ldd	r23, Y+18	; 0x12
    4466:	8b 89       	ldd	r24, Y+19	; 0x13
    4468:	9c 89       	ldd	r25, Y+20	; 0x14
    446a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    446e:	dc 01       	movw	r26, r24
    4470:	cb 01       	movw	r24, r22
    4472:	88 8b       	std	Y+16, r24	; 0x10
    4474:	88 89       	ldd	r24, Y+16	; 0x10
    4476:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4478:	89 81       	ldd	r24, Y+1	; 0x01
    447a:	8a 95       	dec	r24
    447c:	f1 f7       	brne	.-4      	; 0x447a <LCD_on+0x190>
    447e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    4480:	68 96       	adiw	r28, 0x18	; 24
    4482:	0f b6       	in	r0, 0x3f	; 63
    4484:	f8 94       	cli
    4486:	de bf       	out	0x3e, r29	; 62
    4488:	0f be       	out	0x3f, r0	; 63
    448a:	cd bf       	out	0x3d, r28	; 61
    448c:	cf 91       	pop	r28
    448e:	df 91       	pop	r29
    4490:	08 95       	ret

00004492 <LCD_off>:

void LCD_off(){
    4492:	df 93       	push	r29
    4494:	cf 93       	push	r28
    4496:	cd b7       	in	r28, 0x3d	; 61
    4498:	de b7       	in	r29, 0x3e	; 62
    449a:	68 97       	sbiw	r28, 0x18	; 24
    449c:	0f b6       	in	r0, 0x3f	; 63
    449e:	f8 94       	cli
    44a0:	de bf       	out	0x3e, r29	; 62
    44a2:	0f be       	out	0x3f, r0	; 63
    44a4:	cd bf       	out	0x3d, r28	; 61
	LCD_write_command_8bit(display_Off);
	_delay_us(50);

#elif LCD_interface_mode == interface_4bit

	LCD_write_command_4bit(display_Off);
    44a6:	88 e0       	ldi	r24, 0x08	; 8
    44a8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_write_command_4bit>
    44ac:	80 e0       	ldi	r24, 0x00	; 0
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	a8 e4       	ldi	r26, 0x48	; 72
    44b2:	b2 e4       	ldi	r27, 0x42	; 66
    44b4:	8d 8b       	std	Y+21, r24	; 0x15
    44b6:	9e 8b       	std	Y+22, r25	; 0x16
    44b8:	af 8b       	std	Y+23, r26	; 0x17
    44ba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    44bc:	6d 89       	ldd	r22, Y+21	; 0x15
    44be:	7e 89       	ldd	r23, Y+22	; 0x16
    44c0:	8f 89       	ldd	r24, Y+23	; 0x17
    44c2:	98 8d       	ldd	r25, Y+24	; 0x18
    44c4:	2b ea       	ldi	r18, 0xAB	; 171
    44c6:	3a ea       	ldi	r19, 0xAA	; 170
    44c8:	4a e2       	ldi	r20, 0x2A	; 42
    44ca:	50 e4       	ldi	r21, 0x40	; 64
    44cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	89 8b       	std	Y+17, r24	; 0x11
    44d6:	9a 8b       	std	Y+18, r25	; 0x12
    44d8:	ab 8b       	std	Y+19, r26	; 0x13
    44da:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    44dc:	69 89       	ldd	r22, Y+17	; 0x11
    44de:	7a 89       	ldd	r23, Y+18	; 0x12
    44e0:	8b 89       	ldd	r24, Y+19	; 0x13
    44e2:	9c 89       	ldd	r25, Y+20	; 0x14
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	40 e8       	ldi	r20, 0x80	; 128
    44ea:	5f e3       	ldi	r21, 0x3F	; 63
    44ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f0:	88 23       	and	r24, r24
    44f2:	1c f4       	brge	.+6      	; 0x44fa <LCD_off+0x68>
		__ticks = 1;
    44f4:	81 e0       	ldi	r24, 0x01	; 1
    44f6:	88 8b       	std	Y+16, r24	; 0x10
    44f8:	91 c0       	rjmp	.+290    	; 0x461c <LCD_off+0x18a>
	else if (__tmp > 255)
    44fa:	69 89       	ldd	r22, Y+17	; 0x11
    44fc:	7a 89       	ldd	r23, Y+18	; 0x12
    44fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4500:	9c 89       	ldd	r25, Y+20	; 0x14
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	4f e7       	ldi	r20, 0x7F	; 127
    4508:	53 e4       	ldi	r21, 0x43	; 67
    450a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    450e:	18 16       	cp	r1, r24
    4510:	0c f0       	brlt	.+2      	; 0x4514 <LCD_off+0x82>
    4512:	7b c0       	rjmp	.+246    	; 0x460a <LCD_off+0x178>
	{
		_delay_ms(__us / 1000.0);
    4514:	6d 89       	ldd	r22, Y+21	; 0x15
    4516:	7e 89       	ldd	r23, Y+22	; 0x16
    4518:	8f 89       	ldd	r24, Y+23	; 0x17
    451a:	98 8d       	ldd	r25, Y+24	; 0x18
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	30 e0       	ldi	r19, 0x00	; 0
    4520:	4a e7       	ldi	r20, 0x7A	; 122
    4522:	54 e4       	ldi	r21, 0x44	; 68
    4524:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	8c 87       	std	Y+12, r24	; 0x0c
    452e:	9d 87       	std	Y+13, r25	; 0x0d
    4530:	ae 87       	std	Y+14, r26	; 0x0e
    4532:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4534:	6c 85       	ldd	r22, Y+12	; 0x0c
    4536:	7d 85       	ldd	r23, Y+13	; 0x0d
    4538:	8e 85       	ldd	r24, Y+14	; 0x0e
    453a:	9f 85       	ldd	r25, Y+15	; 0x0f
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	4a ef       	ldi	r20, 0xFA	; 250
    4542:	54 e4       	ldi	r21, 0x44	; 68
    4544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	88 87       	std	Y+8, r24	; 0x08
    454e:	99 87       	std	Y+9, r25	; 0x09
    4550:	aa 87       	std	Y+10, r26	; 0x0a
    4552:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4554:	68 85       	ldd	r22, Y+8	; 0x08
    4556:	79 85       	ldd	r23, Y+9	; 0x09
    4558:	8a 85       	ldd	r24, Y+10	; 0x0a
    455a:	9b 85       	ldd	r25, Y+11	; 0x0b
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	40 e8       	ldi	r20, 0x80	; 128
    4562:	5f e3       	ldi	r21, 0x3F	; 63
    4564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4568:	88 23       	and	r24, r24
    456a:	2c f4       	brge	.+10     	; 0x4576 <LCD_off+0xe4>
		__ticks = 1;
    456c:	81 e0       	ldi	r24, 0x01	; 1
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	9f 83       	std	Y+7, r25	; 0x07
    4572:	8e 83       	std	Y+6, r24	; 0x06
    4574:	3f c0       	rjmp	.+126    	; 0x45f4 <LCD_off+0x162>
	else if (__tmp > 65535)
    4576:	68 85       	ldd	r22, Y+8	; 0x08
    4578:	79 85       	ldd	r23, Y+9	; 0x09
    457a:	8a 85       	ldd	r24, Y+10	; 0x0a
    457c:	9b 85       	ldd	r25, Y+11	; 0x0b
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	3f ef       	ldi	r19, 0xFF	; 255
    4582:	4f e7       	ldi	r20, 0x7F	; 127
    4584:	57 e4       	ldi	r21, 0x47	; 71
    4586:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    458a:	18 16       	cp	r1, r24
    458c:	4c f5       	brge	.+82     	; 0x45e0 <LCD_off+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    458e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4590:	7d 85       	ldd	r23, Y+13	; 0x0d
    4592:	8e 85       	ldd	r24, Y+14	; 0x0e
    4594:	9f 85       	ldd	r25, Y+15	; 0x0f
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	40 e2       	ldi	r20, 0x20	; 32
    459c:	51 e4       	ldi	r21, 0x41	; 65
    459e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	bc 01       	movw	r22, r24
    45a8:	cd 01       	movw	r24, r26
    45aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ae:	dc 01       	movw	r26, r24
    45b0:	cb 01       	movw	r24, r22
    45b2:	9f 83       	std	Y+7, r25	; 0x07
    45b4:	8e 83       	std	Y+6, r24	; 0x06
    45b6:	0f c0       	rjmp	.+30     	; 0x45d6 <LCD_off+0x144>
    45b8:	88 ec       	ldi	r24, 0xC8	; 200
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	9d 83       	std	Y+5, r25	; 0x05
    45be:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45c0:	8c 81       	ldd	r24, Y+4	; 0x04
    45c2:	9d 81       	ldd	r25, Y+5	; 0x05
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	f1 f7       	brne	.-4      	; 0x45c4 <LCD_off+0x132>
    45c8:	9d 83       	std	Y+5, r25	; 0x05
    45ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45cc:	8e 81       	ldd	r24, Y+6	; 0x06
    45ce:	9f 81       	ldd	r25, Y+7	; 0x07
    45d0:	01 97       	sbiw	r24, 0x01	; 1
    45d2:	9f 83       	std	Y+7, r25	; 0x07
    45d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45d6:	8e 81       	ldd	r24, Y+6	; 0x06
    45d8:	9f 81       	ldd	r25, Y+7	; 0x07
    45da:	00 97       	sbiw	r24, 0x00	; 0
    45dc:	69 f7       	brne	.-38     	; 0x45b8 <LCD_off+0x126>
    45de:	24 c0       	rjmp	.+72     	; 0x4628 <LCD_off+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e0:	68 85       	ldd	r22, Y+8	; 0x08
    45e2:	79 85       	ldd	r23, Y+9	; 0x09
    45e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    45e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    45e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	9f 83       	std	Y+7, r25	; 0x07
    45f2:	8e 83       	std	Y+6, r24	; 0x06
    45f4:	8e 81       	ldd	r24, Y+6	; 0x06
    45f6:	9f 81       	ldd	r25, Y+7	; 0x07
    45f8:	9b 83       	std	Y+3, r25	; 0x03
    45fa:	8a 83       	std	Y+2, r24	; 0x02
    45fc:	8a 81       	ldd	r24, Y+2	; 0x02
    45fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	f1 f7       	brne	.-4      	; 0x4600 <LCD_off+0x16e>
    4604:	9b 83       	std	Y+3, r25	; 0x03
    4606:	8a 83       	std	Y+2, r24	; 0x02
    4608:	0f c0       	rjmp	.+30     	; 0x4628 <LCD_off+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    460a:	69 89       	ldd	r22, Y+17	; 0x11
    460c:	7a 89       	ldd	r23, Y+18	; 0x12
    460e:	8b 89       	ldd	r24, Y+19	; 0x13
    4610:	9c 89       	ldd	r25, Y+20	; 0x14
    4612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4616:	dc 01       	movw	r26, r24
    4618:	cb 01       	movw	r24, r22
    461a:	88 8b       	std	Y+16, r24	; 0x10
    461c:	88 89       	ldd	r24, Y+16	; 0x10
    461e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4620:	89 81       	ldd	r24, Y+1	; 0x01
    4622:	8a 95       	dec	r24
    4624:	f1 f7       	brne	.-4      	; 0x4622 <LCD_off+0x190>
    4626:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

#endif


}
    4628:	68 96       	adiw	r28, 0x18	; 24
    462a:	0f b6       	in	r0, 0x3f	; 63
    462c:	f8 94       	cli
    462e:	de bf       	out	0x3e, r29	; 62
    4630:	0f be       	out	0x3f, r0	; 63
    4632:	cd bf       	out	0x3d, r28	; 61
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	08 95       	ret

0000463a <LCD_clear_display>:

void LCD_clear_display(){
    463a:	df 93       	push	r29
    463c:	cf 93       	push	r28
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
    4642:	6c 97       	sbiw	r28, 0x1c	; 28
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	cd bf       	out	0x3d, r28	; 61
	//return home
	LCD_write_command_8bit(return_Home);
	_delay_ms(2);

#elif LCD_interface_mode == interface_4bit
	LCD_write_command_4bit(clear_Display);
    464e:	81 e0       	ldi	r24, 0x01	; 1
    4650:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_write_command_4bit>
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	a0 e0       	ldi	r26, 0x00	; 0
    465a:	b0 e4       	ldi	r27, 0x40	; 64
    465c:	89 8f       	std	Y+25, r24	; 0x19
    465e:	9a 8f       	std	Y+26, r25	; 0x1a
    4660:	ab 8f       	std	Y+27, r26	; 0x1b
    4662:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4664:	69 8d       	ldd	r22, Y+25	; 0x19
    4666:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4668:	8b 8d       	ldd	r24, Y+27	; 0x1b
    466a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	4a ef       	ldi	r20, 0xFA	; 250
    4672:	54 e4       	ldi	r21, 0x44	; 68
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	8d 8b       	std	Y+21, r24	; 0x15
    467e:	9e 8b       	std	Y+22, r25	; 0x16
    4680:	af 8b       	std	Y+23, r26	; 0x17
    4682:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4684:	6d 89       	ldd	r22, Y+21	; 0x15
    4686:	7e 89       	ldd	r23, Y+22	; 0x16
    4688:	8f 89       	ldd	r24, Y+23	; 0x17
    468a:	98 8d       	ldd	r25, Y+24	; 0x18
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e8       	ldi	r20, 0x80	; 128
    4692:	5f e3       	ldi	r21, 0x3F	; 63
    4694:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4698:	88 23       	and	r24, r24
    469a:	2c f4       	brge	.+10     	; 0x46a6 <LCD_clear_display+0x6c>
		__ticks = 1;
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	9c 8b       	std	Y+20, r25	; 0x14
    46a2:	8b 8b       	std	Y+19, r24	; 0x13
    46a4:	3f c0       	rjmp	.+126    	; 0x4724 <LCD_clear_display+0xea>
	else if (__tmp > 65535)
    46a6:	6d 89       	ldd	r22, Y+21	; 0x15
    46a8:	7e 89       	ldd	r23, Y+22	; 0x16
    46aa:	8f 89       	ldd	r24, Y+23	; 0x17
    46ac:	98 8d       	ldd	r25, Y+24	; 0x18
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	3f ef       	ldi	r19, 0xFF	; 255
    46b2:	4f e7       	ldi	r20, 0x7F	; 127
    46b4:	57 e4       	ldi	r21, 0x47	; 71
    46b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ba:	18 16       	cp	r1, r24
    46bc:	4c f5       	brge	.+82     	; 0x4710 <LCD_clear_display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46be:	69 8d       	ldd	r22, Y+25	; 0x19
    46c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	30 e0       	ldi	r19, 0x00	; 0
    46ca:	40 e2       	ldi	r20, 0x20	; 32
    46cc:	51 e4       	ldi	r21, 0x41	; 65
    46ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	bc 01       	movw	r22, r24
    46d8:	cd 01       	movw	r24, r26
    46da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	9c 8b       	std	Y+20, r25	; 0x14
    46e4:	8b 8b       	std	Y+19, r24	; 0x13
    46e6:	0f c0       	rjmp	.+30     	; 0x4706 <LCD_clear_display+0xcc>
    46e8:	88 ec       	ldi	r24, 0xC8	; 200
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	9a 8b       	std	Y+18, r25	; 0x12
    46ee:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    46f0:	89 89       	ldd	r24, Y+17	; 0x11
    46f2:	9a 89       	ldd	r25, Y+18	; 0x12
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <LCD_clear_display+0xba>
    46f8:	9a 8b       	std	Y+18, r25	; 0x12
    46fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46fc:	8b 89       	ldd	r24, Y+19	; 0x13
    46fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	9c 8b       	std	Y+20, r25	; 0x14
    4704:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4706:	8b 89       	ldd	r24, Y+19	; 0x13
    4708:	9c 89       	ldd	r25, Y+20	; 0x14
    470a:	00 97       	sbiw	r24, 0x00	; 0
    470c:	69 f7       	brne	.-38     	; 0x46e8 <LCD_clear_display+0xae>
    470e:	14 c0       	rjmp	.+40     	; 0x4738 <LCD_clear_display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4710:	6d 89       	ldd	r22, Y+21	; 0x15
    4712:	7e 89       	ldd	r23, Y+22	; 0x16
    4714:	8f 89       	ldd	r24, Y+23	; 0x17
    4716:	98 8d       	ldd	r25, Y+24	; 0x18
    4718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	9c 8b       	std	Y+20, r25	; 0x14
    4722:	8b 8b       	std	Y+19, r24	; 0x13
    4724:	8b 89       	ldd	r24, Y+19	; 0x13
    4726:	9c 89       	ldd	r25, Y+20	; 0x14
    4728:	98 8b       	std	Y+16, r25	; 0x10
    472a:	8f 87       	std	Y+15, r24	; 0x0f
    472c:	8f 85       	ldd	r24, Y+15	; 0x0f
    472e:	98 89       	ldd	r25, Y+16	; 0x10
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	f1 f7       	brne	.-4      	; 0x4730 <LCD_clear_display+0xf6>
    4734:	98 8b       	std	Y+16, r25	; 0x10
    4736:	8f 87       	std	Y+15, r24	; 0x0f
	//wait more than 1.53 ms
	_delay_ms(2);
	//return home
	LCD_write_command_4bit(return_Home);
    4738:	82 e0       	ldi	r24, 0x02	; 2
    473a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_write_command_4bit>
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	a0 e0       	ldi	r26, 0x00	; 0
    4744:	b0 e4       	ldi	r27, 0x40	; 64
    4746:	8b 87       	std	Y+11, r24	; 0x0b
    4748:	9c 87       	std	Y+12, r25	; 0x0c
    474a:	ad 87       	std	Y+13, r26	; 0x0d
    474c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    474e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4750:	7c 85       	ldd	r23, Y+12	; 0x0c
    4752:	8d 85       	ldd	r24, Y+13	; 0x0d
    4754:	9e 85       	ldd	r25, Y+14	; 0x0e
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	4a ef       	ldi	r20, 0xFA	; 250
    475c:	54 e4       	ldi	r21, 0x44	; 68
    475e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4762:	dc 01       	movw	r26, r24
    4764:	cb 01       	movw	r24, r22
    4766:	8f 83       	std	Y+7, r24	; 0x07
    4768:	98 87       	std	Y+8, r25	; 0x08
    476a:	a9 87       	std	Y+9, r26	; 0x09
    476c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    476e:	6f 81       	ldd	r22, Y+7	; 0x07
    4770:	78 85       	ldd	r23, Y+8	; 0x08
    4772:	89 85       	ldd	r24, Y+9	; 0x09
    4774:	9a 85       	ldd	r25, Y+10	; 0x0a
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	40 e8       	ldi	r20, 0x80	; 128
    477c:	5f e3       	ldi	r21, 0x3F	; 63
    477e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4782:	88 23       	and	r24, r24
    4784:	2c f4       	brge	.+10     	; 0x4790 <LCD_clear_display+0x156>
		__ticks = 1;
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	9e 83       	std	Y+6, r25	; 0x06
    478c:	8d 83       	std	Y+5, r24	; 0x05
    478e:	3f c0       	rjmp	.+126    	; 0x480e <LCD_clear_display+0x1d4>
	else if (__tmp > 65535)
    4790:	6f 81       	ldd	r22, Y+7	; 0x07
    4792:	78 85       	ldd	r23, Y+8	; 0x08
    4794:	89 85       	ldd	r24, Y+9	; 0x09
    4796:	9a 85       	ldd	r25, Y+10	; 0x0a
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	3f ef       	ldi	r19, 0xFF	; 255
    479c:	4f e7       	ldi	r20, 0x7F	; 127
    479e:	57 e4       	ldi	r21, 0x47	; 71
    47a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47a4:	18 16       	cp	r1, r24
    47a6:	4c f5       	brge	.+82     	; 0x47fa <LCD_clear_display+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    47ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	40 e2       	ldi	r20, 0x20	; 32
    47b6:	51 e4       	ldi	r21, 0x41	; 65
    47b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47bc:	dc 01       	movw	r26, r24
    47be:	cb 01       	movw	r24, r22
    47c0:	bc 01       	movw	r22, r24
    47c2:	cd 01       	movw	r24, r26
    47c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	9e 83       	std	Y+6, r25	; 0x06
    47ce:	8d 83       	std	Y+5, r24	; 0x05
    47d0:	0f c0       	rjmp	.+30     	; 0x47f0 <LCD_clear_display+0x1b6>
    47d2:	88 ec       	ldi	r24, 0xC8	; 200
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	9c 83       	std	Y+4, r25	; 0x04
    47d8:	8b 83       	std	Y+3, r24	; 0x03
    47da:	8b 81       	ldd	r24, Y+3	; 0x03
    47dc:	9c 81       	ldd	r25, Y+4	; 0x04
    47de:	01 97       	sbiw	r24, 0x01	; 1
    47e0:	f1 f7       	brne	.-4      	; 0x47de <LCD_clear_display+0x1a4>
    47e2:	9c 83       	std	Y+4, r25	; 0x04
    47e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47e6:	8d 81       	ldd	r24, Y+5	; 0x05
    47e8:	9e 81       	ldd	r25, Y+6	; 0x06
    47ea:	01 97       	sbiw	r24, 0x01	; 1
    47ec:	9e 83       	std	Y+6, r25	; 0x06
    47ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47f0:	8d 81       	ldd	r24, Y+5	; 0x05
    47f2:	9e 81       	ldd	r25, Y+6	; 0x06
    47f4:	00 97       	sbiw	r24, 0x00	; 0
    47f6:	69 f7       	brne	.-38     	; 0x47d2 <LCD_clear_display+0x198>
    47f8:	14 c0       	rjmp	.+40     	; 0x4822 <LCD_clear_display+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47fa:	6f 81       	ldd	r22, Y+7	; 0x07
    47fc:	78 85       	ldd	r23, Y+8	; 0x08
    47fe:	89 85       	ldd	r24, Y+9	; 0x09
    4800:	9a 85       	ldd	r25, Y+10	; 0x0a
    4802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4806:	dc 01       	movw	r26, r24
    4808:	cb 01       	movw	r24, r22
    480a:	9e 83       	std	Y+6, r25	; 0x06
    480c:	8d 83       	std	Y+5, r24	; 0x05
    480e:	8d 81       	ldd	r24, Y+5	; 0x05
    4810:	9e 81       	ldd	r25, Y+6	; 0x06
    4812:	9a 83       	std	Y+2, r25	; 0x02
    4814:	89 83       	std	Y+1, r24	; 0x01
    4816:	89 81       	ldd	r24, Y+1	; 0x01
    4818:	9a 81       	ldd	r25, Y+2	; 0x02
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	f1 f7       	brne	.-4      	; 0x481a <LCD_clear_display+0x1e0>
    481e:	9a 83       	std	Y+2, r25	; 0x02
    4820:	89 83       	std	Y+1, r24	; 0x01
	// wait more han 1.53 ms
	_delay_ms(2);
#endif


}
    4822:	6c 96       	adiw	r28, 0x1c	; 28
    4824:	0f b6       	in	r0, 0x3f	; 63
    4826:	f8 94       	cli
    4828:	de bf       	out	0x3e, r29	; 62
    482a:	0f be       	out	0x3f, r0	; 63
    482c:	cd bf       	out	0x3d, r28	; 61
    482e:	cf 91       	pop	r28
    4830:	df 91       	pop	r29
    4832:	08 95       	ret

00004834 <LCD_write_char>:

void LCD_write_char(u8 copy_u8_char){
    4834:	df 93       	push	r29
    4836:	cf 93       	push	r28
    4838:	cd b7       	in	r28, 0x3d	; 61
    483a:	de b7       	in	r29, 0x3e	; 62
    483c:	69 97       	sbiw	r28, 0x19	; 25
    483e:	0f b6       	in	r0, 0x3f	; 63
    4840:	f8 94       	cli
    4842:	de bf       	out	0x3e, r29	; 62
    4844:	0f be       	out	0x3f, r0	; 63
    4846:	cd bf       	out	0x3d, r28	; 61
    4848:	89 8f       	std	Y+25, r24	; 0x19
	LCD_write_data_8bit(copy_u8_char);
	// wait more than 39 us
	_delay_us(50);
#elif LCD_interface_mode == interface_4bit
	// send character
	LCD_write_data_4bit(copy_u8_char);
    484a:	89 8d       	ldd	r24, Y+25	; 0x19
    484c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_write_data_4bit>
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	a8 e4       	ldi	r26, 0x48	; 72
    4856:	b2 e4       	ldi	r27, 0x42	; 66
    4858:	8d 8b       	std	Y+21, r24	; 0x15
    485a:	9e 8b       	std	Y+22, r25	; 0x16
    485c:	af 8b       	std	Y+23, r26	; 0x17
    485e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4860:	6d 89       	ldd	r22, Y+21	; 0x15
    4862:	7e 89       	ldd	r23, Y+22	; 0x16
    4864:	8f 89       	ldd	r24, Y+23	; 0x17
    4866:	98 8d       	ldd	r25, Y+24	; 0x18
    4868:	2b ea       	ldi	r18, 0xAB	; 171
    486a:	3a ea       	ldi	r19, 0xAA	; 170
    486c:	4a e2       	ldi	r20, 0x2A	; 42
    486e:	50 e4       	ldi	r21, 0x40	; 64
    4870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4874:	dc 01       	movw	r26, r24
    4876:	cb 01       	movw	r24, r22
    4878:	89 8b       	std	Y+17, r24	; 0x11
    487a:	9a 8b       	std	Y+18, r25	; 0x12
    487c:	ab 8b       	std	Y+19, r26	; 0x13
    487e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4880:	69 89       	ldd	r22, Y+17	; 0x11
    4882:	7a 89       	ldd	r23, Y+18	; 0x12
    4884:	8b 89       	ldd	r24, Y+19	; 0x13
    4886:	9c 89       	ldd	r25, Y+20	; 0x14
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	40 e8       	ldi	r20, 0x80	; 128
    488e:	5f e3       	ldi	r21, 0x3F	; 63
    4890:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4894:	88 23       	and	r24, r24
    4896:	1c f4       	brge	.+6      	; 0x489e <LCD_write_char+0x6a>
		__ticks = 1;
    4898:	81 e0       	ldi	r24, 0x01	; 1
    489a:	88 8b       	std	Y+16, r24	; 0x10
    489c:	91 c0       	rjmp	.+290    	; 0x49c0 <LCD_write_char+0x18c>
	else if (__tmp > 255)
    489e:	69 89       	ldd	r22, Y+17	; 0x11
    48a0:	7a 89       	ldd	r23, Y+18	; 0x12
    48a2:	8b 89       	ldd	r24, Y+19	; 0x13
    48a4:	9c 89       	ldd	r25, Y+20	; 0x14
    48a6:	20 e0       	ldi	r18, 0x00	; 0
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	4f e7       	ldi	r20, 0x7F	; 127
    48ac:	53 e4       	ldi	r21, 0x43	; 67
    48ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48b2:	18 16       	cp	r1, r24
    48b4:	0c f0       	brlt	.+2      	; 0x48b8 <LCD_write_char+0x84>
    48b6:	7b c0       	rjmp	.+246    	; 0x49ae <LCD_write_char+0x17a>
	{
		_delay_ms(__us / 1000.0);
    48b8:	6d 89       	ldd	r22, Y+21	; 0x15
    48ba:	7e 89       	ldd	r23, Y+22	; 0x16
    48bc:	8f 89       	ldd	r24, Y+23	; 0x17
    48be:	98 8d       	ldd	r25, Y+24	; 0x18
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	4a e7       	ldi	r20, 0x7A	; 122
    48c6:	54 e4       	ldi	r21, 0x44	; 68
    48c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	8c 87       	std	Y+12, r24	; 0x0c
    48d2:	9d 87       	std	Y+13, r25	; 0x0d
    48d4:	ae 87       	std	Y+14, r26	; 0x0e
    48d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    48da:	7d 85       	ldd	r23, Y+13	; 0x0d
    48dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    48de:	9f 85       	ldd	r25, Y+15	; 0x0f
    48e0:	20 e0       	ldi	r18, 0x00	; 0
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	4a ef       	ldi	r20, 0xFA	; 250
    48e6:	54 e4       	ldi	r21, 0x44	; 68
    48e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	88 87       	std	Y+8, r24	; 0x08
    48f2:	99 87       	std	Y+9, r25	; 0x09
    48f4:	aa 87       	std	Y+10, r26	; 0x0a
    48f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    48f8:	68 85       	ldd	r22, Y+8	; 0x08
    48fa:	79 85       	ldd	r23, Y+9	; 0x09
    48fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    48fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	40 e8       	ldi	r20, 0x80	; 128
    4906:	5f e3       	ldi	r21, 0x3F	; 63
    4908:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    490c:	88 23       	and	r24, r24
    490e:	2c f4       	brge	.+10     	; 0x491a <LCD_write_char+0xe6>
		__ticks = 1;
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	9f 83       	std	Y+7, r25	; 0x07
    4916:	8e 83       	std	Y+6, r24	; 0x06
    4918:	3f c0       	rjmp	.+126    	; 0x4998 <LCD_write_char+0x164>
	else if (__tmp > 65535)
    491a:	68 85       	ldd	r22, Y+8	; 0x08
    491c:	79 85       	ldd	r23, Y+9	; 0x09
    491e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4920:	9b 85       	ldd	r25, Y+11	; 0x0b
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	3f ef       	ldi	r19, 0xFF	; 255
    4926:	4f e7       	ldi	r20, 0x7F	; 127
    4928:	57 e4       	ldi	r21, 0x47	; 71
    492a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    492e:	18 16       	cp	r1, r24
    4930:	4c f5       	brge	.+82     	; 0x4984 <LCD_write_char+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4932:	6c 85       	ldd	r22, Y+12	; 0x0c
    4934:	7d 85       	ldd	r23, Y+13	; 0x0d
    4936:	8e 85       	ldd	r24, Y+14	; 0x0e
    4938:	9f 85       	ldd	r25, Y+15	; 0x0f
    493a:	20 e0       	ldi	r18, 0x00	; 0
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	40 e2       	ldi	r20, 0x20	; 32
    4940:	51 e4       	ldi	r21, 0x41	; 65
    4942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4946:	dc 01       	movw	r26, r24
    4948:	cb 01       	movw	r24, r22
    494a:	bc 01       	movw	r22, r24
    494c:	cd 01       	movw	r24, r26
    494e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	9f 83       	std	Y+7, r25	; 0x07
    4958:	8e 83       	std	Y+6, r24	; 0x06
    495a:	0f c0       	rjmp	.+30     	; 0x497a <LCD_write_char+0x146>
    495c:	88 ec       	ldi	r24, 0xC8	; 200
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	9d 83       	std	Y+5, r25	; 0x05
    4962:	8c 83       	std	Y+4, r24	; 0x04
    4964:	8c 81       	ldd	r24, Y+4	; 0x04
    4966:	9d 81       	ldd	r25, Y+5	; 0x05
    4968:	01 97       	sbiw	r24, 0x01	; 1
    496a:	f1 f7       	brne	.-4      	; 0x4968 <LCD_write_char+0x134>
    496c:	9d 83       	std	Y+5, r25	; 0x05
    496e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4970:	8e 81       	ldd	r24, Y+6	; 0x06
    4972:	9f 81       	ldd	r25, Y+7	; 0x07
    4974:	01 97       	sbiw	r24, 0x01	; 1
    4976:	9f 83       	std	Y+7, r25	; 0x07
    4978:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    497a:	8e 81       	ldd	r24, Y+6	; 0x06
    497c:	9f 81       	ldd	r25, Y+7	; 0x07
    497e:	00 97       	sbiw	r24, 0x00	; 0
    4980:	69 f7       	brne	.-38     	; 0x495c <LCD_write_char+0x128>
    4982:	24 c0       	rjmp	.+72     	; 0x49cc <LCD_write_char+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4984:	68 85       	ldd	r22, Y+8	; 0x08
    4986:	79 85       	ldd	r23, Y+9	; 0x09
    4988:	8a 85       	ldd	r24, Y+10	; 0x0a
    498a:	9b 85       	ldd	r25, Y+11	; 0x0b
    498c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4990:	dc 01       	movw	r26, r24
    4992:	cb 01       	movw	r24, r22
    4994:	9f 83       	std	Y+7, r25	; 0x07
    4996:	8e 83       	std	Y+6, r24	; 0x06
    4998:	8e 81       	ldd	r24, Y+6	; 0x06
    499a:	9f 81       	ldd	r25, Y+7	; 0x07
    499c:	9b 83       	std	Y+3, r25	; 0x03
    499e:	8a 83       	std	Y+2, r24	; 0x02
    49a0:	8a 81       	ldd	r24, Y+2	; 0x02
    49a2:	9b 81       	ldd	r25, Y+3	; 0x03
    49a4:	01 97       	sbiw	r24, 0x01	; 1
    49a6:	f1 f7       	brne	.-4      	; 0x49a4 <LCD_write_char+0x170>
    49a8:	9b 83       	std	Y+3, r25	; 0x03
    49aa:	8a 83       	std	Y+2, r24	; 0x02
    49ac:	0f c0       	rjmp	.+30     	; 0x49cc <LCD_write_char+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    49ae:	69 89       	ldd	r22, Y+17	; 0x11
    49b0:	7a 89       	ldd	r23, Y+18	; 0x12
    49b2:	8b 89       	ldd	r24, Y+19	; 0x13
    49b4:	9c 89       	ldd	r25, Y+20	; 0x14
    49b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	88 8b       	std	Y+16, r24	; 0x10
    49c0:	88 89       	ldd	r24, Y+16	; 0x10
    49c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    49c4:	89 81       	ldd	r24, Y+1	; 0x01
    49c6:	8a 95       	dec	r24
    49c8:	f1 f7       	brne	.-4      	; 0x49c6 <LCD_write_char+0x192>
    49ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
#endif

}
    49cc:	69 96       	adiw	r28, 0x19	; 25
    49ce:	0f b6       	in	r0, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	de bf       	out	0x3e, r29	; 62
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	08 95       	ret

000049de <LCD_write_string>:


void LCD_write_string(u8* Copy_pu8_str){
    49de:	df 93       	push	r29
    49e0:	cf 93       	push	r28
    49e2:	00 d0       	rcall	.+0      	; 0x49e4 <LCD_write_string+0x6>
    49e4:	0f 92       	push	r0
    49e6:	cd b7       	in	r28, 0x3d	; 61
    49e8:	de b7       	in	r29, 0x3e	; 62
    49ea:	9b 83       	std	Y+3, r25	; 0x03
    49ec:	8a 83       	std	Y+2, r24	; 0x02
	 * this function takes a pointer to a string u8
	 * and send it to the lcd to write on it the desired string
	 *
	 */

	u8 i = 0;
    49ee:	19 82       	std	Y+1, r1	; 0x01
    49f0:	0e c0       	rjmp	.+28     	; 0x4a0e <LCD_write_string+0x30>

	while(Copy_pu8_str[i] != '\0'){

		LCD_write_char(Copy_pu8_str[i]);
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	28 2f       	mov	r18, r24
    49f6:	30 e0       	ldi	r19, 0x00	; 0
    49f8:	8a 81       	ldd	r24, Y+2	; 0x02
    49fa:	9b 81       	ldd	r25, Y+3	; 0x03
    49fc:	fc 01       	movw	r30, r24
    49fe:	e2 0f       	add	r30, r18
    4a00:	f3 1f       	adc	r31, r19
    4a02:	80 81       	ld	r24, Z
    4a04:	0e 94 1a 24 	call	0x4834	; 0x4834 <LCD_write_char>
		i++;
    4a08:	89 81       	ldd	r24, Y+1	; 0x01
    4a0a:	8f 5f       	subi	r24, 0xFF	; 255
    4a0c:	89 83       	std	Y+1, r24	; 0x01
	 *
	 */

	u8 i = 0;

	while(Copy_pu8_str[i] != '\0'){
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	28 2f       	mov	r18, r24
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	8a 81       	ldd	r24, Y+2	; 0x02
    4a16:	9b 81       	ldd	r25, Y+3	; 0x03
    4a18:	fc 01       	movw	r30, r24
    4a1a:	e2 0f       	add	r30, r18
    4a1c:	f3 1f       	adc	r31, r19
    4a1e:	80 81       	ld	r24, Z
    4a20:	88 23       	and	r24, r24
    4a22:	39 f7       	brne	.-50     	; 0x49f2 <LCD_write_string+0x14>

		LCD_write_char(Copy_pu8_str[i]);
		i++;
	}

}
    4a24:	0f 90       	pop	r0
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	cf 91       	pop	r28
    4a2c:	df 91       	pop	r29
    4a2e:	08 95       	ret

00004a30 <LCD_write_number>:


void LCD_write_number(s32 copy_s32_number){
    4a30:	0f 93       	push	r16
    4a32:	1f 93       	push	r17
    4a34:	df 93       	push	r29
    4a36:	cf 93       	push	r28
    4a38:	cd b7       	in	r28, 0x3d	; 61
    4a3a:	de b7       	in	r29, 0x3e	; 62
    4a3c:	60 97       	sbiw	r28, 0x10	; 16
    4a3e:	0f b6       	in	r0, 0x3f	; 63
    4a40:	f8 94       	cli
    4a42:	de bf       	out	0x3e, r29	; 62
    4a44:	0f be       	out	0x3f, r0	; 63
    4a46:	cd bf       	out	0x3d, r28	; 61
    4a48:	6d 87       	std	Y+13, r22	; 0x0d
    4a4a:	7e 87       	std	Y+14, r23	; 0x0e
    4a4c:	8f 87       	std	Y+15, r24	; 0x0f
    4a4e:	98 8b       	std	Y+16, r25	; 0x10
	 *
	 *
	 */
	// if number is 0

	if(copy_s32_number == 0){
    4a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a54:	af 85       	ldd	r26, Y+15	; 0x0f
    4a56:	b8 89       	ldd	r27, Y+16	; 0x10
    4a58:	00 97       	sbiw	r24, 0x00	; 0
    4a5a:	a1 05       	cpc	r26, r1
    4a5c:	b1 05       	cpc	r27, r1
    4a5e:	21 f4       	brne	.+8      	; 0x4a68 <LCD_write_number+0x38>

		LCD_write_char('0');
    4a60:	80 e3       	ldi	r24, 0x30	; 48
    4a62:	0e 94 1a 24 	call	0x4834	; 0x4834 <LCD_write_char>
    4a66:	18 c0       	rjmp	.+48     	; 0x4a98 <LCD_write_number+0x68>
		//negative number
	}else if(copy_s32_number < 0){
    4a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a6c:	af 85       	ldd	r26, Y+15	; 0x0f
    4a6e:	b8 89       	ldd	r27, Y+16	; 0x10
    4a70:	bb 23       	and	r27, r27
    4a72:	94 f4       	brge	.+36     	; 0x4a98 <LCD_write_number+0x68>

		LCD_write_char('-');
    4a74:	8d e2       	ldi	r24, 0x2D	; 45
    4a76:	0e 94 1a 24 	call	0x4834	; 0x4834 <LCD_write_char>
		//convert the number to the absolute value
		copy_s32_number *= -1;
    4a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a7e:	af 85       	ldd	r26, Y+15	; 0x0f
    4a80:	b8 89       	ldd	r27, Y+16	; 0x10
    4a82:	b0 95       	com	r27
    4a84:	a0 95       	com	r26
    4a86:	90 95       	com	r25
    4a88:	81 95       	neg	r24
    4a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a8c:	af 4f       	sbci	r26, 0xFF	; 255
    4a8e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a90:	8d 87       	std	Y+13, r24	; 0x0d
    4a92:	9e 87       	std	Y+14, r25	; 0x0e
    4a94:	af 87       	std	Y+15, r26	; 0x0f
    4a96:	b8 8b       	std	Y+16, r27	; 0x10

	}
	if(copy_s32_number > 0){
    4a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a9c:	af 85       	ldd	r26, Y+15	; 0x0f
    4a9e:	b8 89       	ldd	r27, Y+16	; 0x10
    4aa0:	18 16       	cp	r1, r24
    4aa2:	19 06       	cpc	r1, r25
    4aa4:	1a 06       	cpc	r1, r26
    4aa6:	1b 06       	cpc	r1, r27
    4aa8:	0c f0       	brlt	.+2      	; 0x4aac <LCD_write_number+0x7c>
    4aaa:	51 c0       	rjmp	.+162    	; 0x4b4e <LCD_write_number+0x11e>
	//container to store the number
	u8 numbers[10];
	u8 i = 0;
    4aac:	1a 82       	std	Y+2, r1	; 0x02
    4aae:	2d c0       	rjmp	.+90     	; 0x4b0a <LCD_write_number+0xda>

	while(copy_s32_number != 0){

		//retreive the last digit from the number
		numbers[i] = copy_s32_number%10;
    4ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab2:	08 2f       	mov	r16, r24
    4ab4:	10 e0       	ldi	r17, 0x00	; 0
    4ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aba:	af 85       	ldd	r26, Y+15	; 0x0f
    4abc:	b8 89       	ldd	r27, Y+16	; 0x10
    4abe:	2a e0       	ldi	r18, 0x0A	; 10
    4ac0:	30 e0       	ldi	r19, 0x00	; 0
    4ac2:	40 e0       	ldi	r20, 0x00	; 0
    4ac4:	50 e0       	ldi	r21, 0x00	; 0
    4ac6:	bc 01       	movw	r22, r24
    4ac8:	cd 01       	movw	r24, r26
    4aca:	0e 94 11 2c 	call	0x5822	; 0x5822 <__divmodsi4>
    4ace:	dc 01       	movw	r26, r24
    4ad0:	cb 01       	movw	r24, r22
    4ad2:	28 2f       	mov	r18, r24
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	03 96       	adiw	r24, 0x03	; 3
    4ad8:	fc 01       	movw	r30, r24
    4ada:	e0 0f       	add	r30, r16
    4adc:	f1 1f       	adc	r31, r17
    4ade:	20 83       	st	Z, r18
		copy_s32_number /= 10;
    4ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ae4:	af 85       	ldd	r26, Y+15	; 0x0f
    4ae6:	b8 89       	ldd	r27, Y+16	; 0x10
    4ae8:	2a e0       	ldi	r18, 0x0A	; 10
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	40 e0       	ldi	r20, 0x00	; 0
    4aee:	50 e0       	ldi	r21, 0x00	; 0
    4af0:	bc 01       	movw	r22, r24
    4af2:	cd 01       	movw	r24, r26
    4af4:	0e 94 11 2c 	call	0x5822	; 0x5822 <__divmodsi4>
    4af8:	da 01       	movw	r26, r20
    4afa:	c9 01       	movw	r24, r18
    4afc:	8d 87       	std	Y+13, r24	; 0x0d
    4afe:	9e 87       	std	Y+14, r25	; 0x0e
    4b00:	af 87       	std	Y+15, r26	; 0x0f
    4b02:	b8 8b       	std	Y+16, r27	; 0x10
		i++;
    4b04:	8a 81       	ldd	r24, Y+2	; 0x02
    4b06:	8f 5f       	subi	r24, 0xFF	; 255
    4b08:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_s32_number > 0){
	//container to store the number
	u8 numbers[10];
	u8 i = 0;

	while(copy_s32_number != 0){
    4b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b0e:	af 85       	ldd	r26, Y+15	; 0x0f
    4b10:	b8 89       	ldd	r27, Y+16	; 0x10
    4b12:	00 97       	sbiw	r24, 0x00	; 0
    4b14:	a1 05       	cpc	r26, r1
    4b16:	b1 05       	cpc	r27, r1
    4b18:	59 f6       	brne	.-106    	; 0x4ab0 <LCD_write_number+0x80>
		copy_s32_number /= 10;
		i++;
	}

	// reverse array order
	array_Swap(numbers, i);
    4b1a:	ce 01       	movw	r24, r28
    4b1c:	03 96       	adiw	r24, 0x03	; 3
    4b1e:	6a 81       	ldd	r22, Y+2	; 0x02
    4b20:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <array_Swap>

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4b24:	19 82       	std	Y+1, r1	; 0x01
    4b26:	0f c0       	rjmp	.+30     	; 0x4b46 <LCD_write_number+0x116>

		LCD_write_char(numbers[j]+'0');
    4b28:	89 81       	ldd	r24, Y+1	; 0x01
    4b2a:	28 2f       	mov	r18, r24
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	ce 01       	movw	r24, r28
    4b30:	03 96       	adiw	r24, 0x03	; 3
    4b32:	fc 01       	movw	r30, r24
    4b34:	e2 0f       	add	r30, r18
    4b36:	f3 1f       	adc	r31, r19
    4b38:	80 81       	ld	r24, Z
    4b3a:	80 5d       	subi	r24, 0xD0	; 208
    4b3c:	0e 94 1a 24 	call	0x4834	; 0x4834 <LCD_write_char>

	// reverse array order
	array_Swap(numbers, i);

	// print the correct order of the number
	for(u8 j = 0; j < i; j++){
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	8f 5f       	subi	r24, 0xFF	; 255
    4b44:	89 83       	std	Y+1, r24	; 0x01
    4b46:	99 81       	ldd	r25, Y+1	; 0x01
    4b48:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4a:	98 17       	cp	r25, r24
    4b4c:	68 f3       	brcs	.-38     	; 0x4b28 <LCD_write_number+0xf8>

		LCD_write_char(numbers[j]+'0');
	}

	}
}
    4b4e:	60 96       	adiw	r28, 0x10	; 16
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	cd bf       	out	0x3d, r28	; 61
    4b5a:	cf 91       	pop	r28
    4b5c:	df 91       	pop	r29
    4b5e:	1f 91       	pop	r17
    4b60:	0f 91       	pop	r16
    4b62:	08 95       	ret

00004b64 <LCD_write_float>:

void LCD_write_float(f32 copy_f32_number, u8 copy_decimal_point){
    4b64:	ef 92       	push	r14
    4b66:	ff 92       	push	r15
    4b68:	0f 93       	push	r16
    4b6a:	1f 93       	push	r17
    4b6c:	df 93       	push	r29
    4b6e:	cf 93       	push	r28
    4b70:	cd b7       	in	r28, 0x3d	; 61
    4b72:	de b7       	in	r29, 0x3e	; 62
    4b74:	2d 97       	sbiw	r28, 0x0d	; 13
    4b76:	0f b6       	in	r0, 0x3f	; 63
    4b78:	f8 94       	cli
    4b7a:	de bf       	out	0x3e, r29	; 62
    4b7c:	0f be       	out	0x3f, r0	; 63
    4b7e:	cd bf       	out	0x3d, r28	; 61
    4b80:	69 87       	std	Y+9, r22	; 0x09
    4b82:	7a 87       	std	Y+10, r23	; 0x0a
    4b84:	8b 87       	std	Y+11, r24	; 0x0b
    4b86:	9c 87       	std	Y+12, r25	; 0x0c
    4b88:	4d 87       	std	Y+13, r20	; 0x0d
	 * the function doesn't return anything
	 *
	 */

	// store the integer part
	s32 int_value = (s32)copy_f32_number;
    4b8a:	69 85       	ldd	r22, Y+9	; 0x09
    4b8c:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b90:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b92:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4b96:	dc 01       	movw	r26, r24
    4b98:	cb 01       	movw	r24, r22
    4b9a:	8d 83       	std	Y+5, r24	; 0x05
    4b9c:	9e 83       	std	Y+6, r25	; 0x06
    4b9e:	af 83       	std	Y+7, r26	; 0x07
    4ba0:	b8 87       	std	Y+8, r27	; 0x08

	// store the decimal part
	s32 float_value = (s32)((copy_f32_number -(f32)int_value)*power_10(copy_decimal_point));
    4ba2:	6d 81       	ldd	r22, Y+5	; 0x05
    4ba4:	7e 81       	ldd	r23, Y+6	; 0x06
    4ba6:	8f 81       	ldd	r24, Y+7	; 0x07
    4ba8:	98 85       	ldd	r25, Y+8	; 0x08
    4baa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4bae:	9b 01       	movw	r18, r22
    4bb0:	ac 01       	movw	r20, r24
    4bb2:	69 85       	ldd	r22, Y+9	; 0x09
    4bb4:	7a 85       	ldd	r23, Y+10	; 0x0a
    4bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	7c 01       	movw	r14, r24
    4bc4:	8d 01       	movw	r16, r26
    4bc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bc8:	0e 94 39 0a 	call	0x1472	; 0x1472 <power_10>
    4bcc:	dc 01       	movw	r26, r24
    4bce:	cb 01       	movw	r24, r22
    4bd0:	bc 01       	movw	r22, r24
    4bd2:	cd 01       	movw	r24, r26
    4bd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4bd8:	9b 01       	movw	r18, r22
    4bda:	ac 01       	movw	r20, r24
    4bdc:	c8 01       	movw	r24, r16
    4bde:	b7 01       	movw	r22, r14
    4be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be4:	dc 01       	movw	r26, r24
    4be6:	cb 01       	movw	r24, r22
    4be8:	bc 01       	movw	r22, r24
    4bea:	cd 01       	movw	r24, r26
    4bec:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	cb 01       	movw	r24, r22
    4bf4:	89 83       	std	Y+1, r24	; 0x01
    4bf6:	9a 83       	std	Y+2, r25	; 0x02
    4bf8:	ab 83       	std	Y+3, r26	; 0x03
    4bfa:	bc 83       	std	Y+4, r27	; 0x04

	// print the int part
	LCD_write_number(int_value);
    4bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    4c00:	af 81       	ldd	r26, Y+7	; 0x07
    4c02:	b8 85       	ldd	r27, Y+8	; 0x08
    4c04:	bc 01       	movw	r22, r24
    4c06:	cd 01       	movw	r24, r26
    4c08:	0e 94 18 25 	call	0x4a30	; 0x4a30 <LCD_write_number>
	//print the floating point
	LCD_write_char('.');
    4c0c:	8e e2       	ldi	r24, 0x2E	; 46
    4c0e:	0e 94 1a 24 	call	0x4834	; 0x4834 <LCD_write_char>
	//print the decimal part
	if(float_value > 0 ){
    4c12:	89 81       	ldd	r24, Y+1	; 0x01
    4c14:	9a 81       	ldd	r25, Y+2	; 0x02
    4c16:	ab 81       	ldd	r26, Y+3	; 0x03
    4c18:	bc 81       	ldd	r27, Y+4	; 0x04
    4c1a:	18 16       	cp	r1, r24
    4c1c:	19 06       	cpc	r1, r25
    4c1e:	1a 06       	cpc	r1, r26
    4c20:	1b 06       	cpc	r1, r27
    4c22:	4c f4       	brge	.+18     	; 0x4c36 <LCD_write_float+0xd2>
	LCD_write_number(float_value);
    4c24:	89 81       	ldd	r24, Y+1	; 0x01
    4c26:	9a 81       	ldd	r25, Y+2	; 0x02
    4c28:	ab 81       	ldd	r26, Y+3	; 0x03
    4c2a:	bc 81       	ldd	r27, Y+4	; 0x04
    4c2c:	bc 01       	movw	r22, r24
    4c2e:	cd 01       	movw	r24, r26
    4c30:	0e 94 18 25 	call	0x4a30	; 0x4a30 <LCD_write_number>
    4c34:	0f c0       	rjmp	.+30     	; 0x4c54 <LCD_write_float+0xf0>
	}else{
	LCD_write_number((float_value * -1));
    4c36:	89 81       	ldd	r24, Y+1	; 0x01
    4c38:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3a:	ab 81       	ldd	r26, Y+3	; 0x03
    4c3c:	bc 81       	ldd	r27, Y+4	; 0x04
    4c3e:	b0 95       	com	r27
    4c40:	a0 95       	com	r26
    4c42:	90 95       	com	r25
    4c44:	81 95       	neg	r24
    4c46:	9f 4f       	sbci	r25, 0xFF	; 255
    4c48:	af 4f       	sbci	r26, 0xFF	; 255
    4c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c4c:	bc 01       	movw	r22, r24
    4c4e:	cd 01       	movw	r24, r26
    4c50:	0e 94 18 25 	call	0x4a30	; 0x4a30 <LCD_write_number>

	}


}
    4c54:	2d 96       	adiw	r28, 0x0d	; 13
    4c56:	0f b6       	in	r0, 0x3f	; 63
    4c58:	f8 94       	cli
    4c5a:	de bf       	out	0x3e, r29	; 62
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	cd bf       	out	0x3d, r28	; 61
    4c60:	cf 91       	pop	r28
    4c62:	df 91       	pop	r29
    4c64:	1f 91       	pop	r17
    4c66:	0f 91       	pop	r16
    4c68:	ff 90       	pop	r15
    4c6a:	ef 90       	pop	r14
    4c6c:	08 95       	ret

00004c6e <Timer_set_Callback_Func>:


static void(*callback_func[8])(void);


void Timer_set_Callback_Func(u8 timer_type,void(*ptr_to_callback)(void)){
    4c6e:	df 93       	push	r29
    4c70:	cf 93       	push	r28
    4c72:	00 d0       	rcall	.+0      	; 0x4c74 <Timer_set_Callback_Func+0x6>
    4c74:	0f 92       	push	r0
    4c76:	cd b7       	in	r28, 0x3d	; 61
    4c78:	de b7       	in	r29, 0x3e	; 62
    4c7a:	89 83       	std	Y+1, r24	; 0x01
    4c7c:	7b 83       	std	Y+3, r23	; 0x03
    4c7e:	6a 83       	std	Y+2, r22	; 0x02


	if((timer_type>= 0)&&(timer_type <= 7)){
    4c80:	89 81       	ldd	r24, Y+1	; 0x01
    4c82:	88 30       	cpi	r24, 0x08	; 8
    4c84:	60 f4       	brcc	.+24     	; 0x4c9e <Timer_set_Callback_Func+0x30>

		callback_func[timer_type] = ptr_to_callback;
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	88 2f       	mov	r24, r24
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	88 0f       	add	r24, r24
    4c8e:	99 1f       	adc	r25, r25
    4c90:	fc 01       	movw	r30, r24
    4c92:	ef 56       	subi	r30, 0x6F	; 111
    4c94:	fe 4f       	sbci	r31, 0xFE	; 254
    4c96:	8a 81       	ldd	r24, Y+2	; 0x02
    4c98:	9b 81       	ldd	r25, Y+3	; 0x03
    4c9a:	91 83       	std	Z+1, r25	; 0x01
    4c9c:	80 83       	st	Z, r24

	}

}
    4c9e:	0f 90       	pop	r0
    4ca0:	0f 90       	pop	r0
    4ca2:	0f 90       	pop	r0
    4ca4:	cf 91       	pop	r28
    4ca6:	df 91       	pop	r29
    4ca8:	08 95       	ret

00004caa <TMR0_prescallar>:


/*************************** TIMER0 ***************************/

void TMR0_prescallar(){
    4caa:	df 93       	push	r29
    4cac:	cf 93       	push	r28
    4cae:	cd b7       	in	r28, 0x3d	; 61
    4cb0:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(TCCR0,CS01);
	clear_Bit(TCCR0,CS02);

#elif TMR0_PRESCALE == TMR0_CLK_8

	set_Bit(TCCR0,CS01);
    4cb2:	a3 e5       	ldi	r26, 0x53	; 83
    4cb4:	b0 e0       	ldi	r27, 0x00	; 0
    4cb6:	e3 e5       	ldi	r30, 0x53	; 83
    4cb8:	f0 e0       	ldi	r31, 0x00	; 0
    4cba:	80 81       	ld	r24, Z
    4cbc:	82 60       	ori	r24, 0x02	; 2
    4cbe:	8c 93       	st	X, r24
	clear_Bit(TCCR0,CS00);
    4cc0:	a3 e5       	ldi	r26, 0x53	; 83
    4cc2:	b0 e0       	ldi	r27, 0x00	; 0
    4cc4:	e3 e5       	ldi	r30, 0x53	; 83
    4cc6:	f0 e0       	ldi	r31, 0x00	; 0
    4cc8:	80 81       	ld	r24, Z
    4cca:	8e 7f       	andi	r24, 0xFE	; 254
    4ccc:	8c 93       	st	X, r24
	clear_Bit(TCCR0,CS02);
    4cce:	a3 e5       	ldi	r26, 0x53	; 83
    4cd0:	b0 e0       	ldi	r27, 0x00	; 0
    4cd2:	e3 e5       	ldi	r30, 0x53	; 83
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	80 81       	ld	r24, Z
    4cd8:	8b 7f       	andi	r24, 0xFB	; 251
    4cda:	8c 93       	st	X, r24
#else
#warning "please choose the correct prescaling configuration from the config file"
#endif


}
    4cdc:	cf 91       	pop	r28
    4cde:	df 91       	pop	r29
    4ce0:	08 95       	ret

00004ce2 <TMR0_0C0_setup>:


void TMR0_0C0_setup(){
    4ce2:	df 93       	push	r29
    4ce4:	cf 93       	push	r28
    4ce6:	cd b7       	in	r28, 0x3d	; 61
    4ce8:	de b7       	in	r29, 0x3e	; 62

#if TMR0_MODE == NORMAL_MODE || TMR0_MODE == CTC
#if TMR0_OC0_MODE == OC_DISCONNECTED
	clear_Bit(TCCR0, COM00);
    4cea:	a3 e5       	ldi	r26, 0x53	; 83
    4cec:	b0 e0       	ldi	r27, 0x00	; 0
    4cee:	e3 e5       	ldi	r30, 0x53	; 83
    4cf0:	f0 e0       	ldi	r31, 0x00	; 0
    4cf2:	80 81       	ld	r24, Z
    4cf4:	8f 7e       	andi	r24, 0xEF	; 239
    4cf6:	8c 93       	st	X, r24
	clear_Bit(TCCR0,COM01);
    4cf8:	a3 e5       	ldi	r26, 0x53	; 83
    4cfa:	b0 e0       	ldi	r27, 0x00	; 0
    4cfc:	e3 e5       	ldi	r30, 0x53	; 83
    4cfe:	f0 e0       	ldi	r31, 0x00	; 0
    4d00:	80 81       	ld	r24, Z
    4d02:	8f 7d       	andi	r24, 0xDF	; 223
    4d04:	8c 93       	st	X, r24
	set_Bit(TCCR0,COM00);
#endif


#endif
}
    4d06:	cf 91       	pop	r28
    4d08:	df 91       	pop	r29
    4d0a:	08 95       	ret

00004d0c <TMR0_mode>:


void TMR0_mode(){
    4d0c:	df 93       	push	r29
    4d0e:	cf 93       	push	r28
    4d10:	cd b7       	in	r28, 0x3d	; 61
    4d12:	de b7       	in	r29, 0x3e	; 62

#if TMR0_MODE == NORMAL_MODE
	// WGM01 AND WGM00 --> 0,0
	clear_Bit(TCCR0,WGM01);
    4d14:	a3 e5       	ldi	r26, 0x53	; 83
    4d16:	b0 e0       	ldi	r27, 0x00	; 0
    4d18:	e3 e5       	ldi	r30, 0x53	; 83
    4d1a:	f0 e0       	ldi	r31, 0x00	; 0
    4d1c:	80 81       	ld	r24, Z
    4d1e:	87 7f       	andi	r24, 0xF7	; 247
    4d20:	8c 93       	st	X, r24
	clear_Bit(TCCR0,WGM00);
    4d22:	a3 e5       	ldi	r26, 0x53	; 83
    4d24:	b0 e0       	ldi	r27, 0x00	; 0
    4d26:	e3 e5       	ldi	r30, 0x53	; 83
    4d28:	f0 e0       	ldi	r31, 0x00	; 0
    4d2a:	80 81       	ld	r24, Z
    4d2c:	8f 7b       	andi	r24, 0xBF	; 191
    4d2e:	8c 93       	st	X, r24
#error "please choose the correct timer0 mode from the configuration file"


#endif

}
    4d30:	cf 91       	pop	r28
    4d32:	df 91       	pop	r29
    4d34:	08 95       	ret

00004d36 <TMR0_Stop>:


void TMR0_Stop(){
    4d36:	df 93       	push	r29
    4d38:	cf 93       	push	r28
    4d3a:	cd b7       	in	r28, 0x3d	; 61
    4d3c:	de b7       	in	r29, 0x3e	; 62

	clear_Bit(TCCR0, CS02);
    4d3e:	a3 e5       	ldi	r26, 0x53	; 83
    4d40:	b0 e0       	ldi	r27, 0x00	; 0
    4d42:	e3 e5       	ldi	r30, 0x53	; 83
    4d44:	f0 e0       	ldi	r31, 0x00	; 0
    4d46:	80 81       	ld	r24, Z
    4d48:	8b 7f       	andi	r24, 0xFB	; 251
    4d4a:	8c 93       	st	X, r24
	clear_Bit(TCCR0, CS01);
    4d4c:	a3 e5       	ldi	r26, 0x53	; 83
    4d4e:	b0 e0       	ldi	r27, 0x00	; 0
    4d50:	e3 e5       	ldi	r30, 0x53	; 83
    4d52:	f0 e0       	ldi	r31, 0x00	; 0
    4d54:	80 81       	ld	r24, Z
    4d56:	8d 7f       	andi	r24, 0xFD	; 253
    4d58:	8c 93       	st	X, r24
	clear_Bit(TCCR0, CS00);
    4d5a:	a3 e5       	ldi	r26, 0x53	; 83
    4d5c:	b0 e0       	ldi	r27, 0x00	; 0
    4d5e:	e3 e5       	ldi	r30, 0x53	; 83
    4d60:	f0 e0       	ldi	r31, 0x00	; 0
    4d62:	80 81       	ld	r24, Z
    4d64:	8e 7f       	andi	r24, 0xFE	; 254
    4d66:	8c 93       	st	X, r24

}
    4d68:	cf 91       	pop	r28
    4d6a:	df 91       	pop	r29
    4d6c:	08 95       	ret

00004d6e <TMR0_loadTCNT0>:


void TMR0_loadTCNT0(u8 value){
    4d6e:	df 93       	push	r29
    4d70:	cf 93       	push	r28
    4d72:	0f 92       	push	r0
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = value;
    4d7a:	e2 e5       	ldi	r30, 0x52	; 82
    4d7c:	f0 e0       	ldi	r31, 0x00	; 0
    4d7e:	89 81       	ldd	r24, Y+1	; 0x01
    4d80:	80 83       	st	Z, r24
}
    4d82:	0f 90       	pop	r0
    4d84:	cf 91       	pop	r28
    4d86:	df 91       	pop	r29
    4d88:	08 95       	ret

00004d8a <TMR0_loadOCR0>:

void TMR0_loadOCR0(u8 value){
    4d8a:	df 93       	push	r29
    4d8c:	cf 93       	push	r28
    4d8e:	0f 92       	push	r0
    4d90:	cd b7       	in	r28, 0x3d	; 61
    4d92:	de b7       	in	r29, 0x3e	; 62
    4d94:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = value;
    4d96:	ec e5       	ldi	r30, 0x5C	; 92
    4d98:	f0 e0       	ldi	r31, 0x00	; 0
    4d9a:	89 81       	ldd	r24, Y+1	; 0x01
    4d9c:	80 83       	st	Z, r24
}
    4d9e:	0f 90       	pop	r0
    4da0:	cf 91       	pop	r28
    4da2:	df 91       	pop	r29
    4da4:	08 95       	ret

00004da6 <TMR0_Init>:

void TMR0_Init(){
    4da6:	df 93       	push	r29
    4da8:	cf 93       	push	r28
    4daa:	cd b7       	in	r28, 0x3d	; 61
    4dac:	de b7       	in	r29, 0x3e	; 62


	TMR0_mode();
    4dae:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <TMR0_mode>
	TMR0_0C0_setup();
    4db2:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <TMR0_0C0_setup>
	TMR0_prescallar();
    4db6:	0e 94 55 26 	call	0x4caa	; 0x4caa <TMR0_prescallar>

#if TMR0_OVF_INTERRUPT == ENABLE && TMR0_OC_INTERRUPT == DISABLE
	//enable timer0 overflow interrupt
	set_Bit(TIMSK,TOIE0);
    4dba:	a9 e5       	ldi	r26, 0x59	; 89
    4dbc:	b0 e0       	ldi	r27, 0x00	; 0
    4dbe:	e9 e5       	ldi	r30, 0x59	; 89
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	80 81       	ld	r24, Z
    4dc4:	81 60       	ori	r24, 0x01	; 1
    4dc6:	8c 93       	st	X, r24
	//enable global interrupt
	set_Bit(SREG,7);
    4dc8:	af e5       	ldi	r26, 0x5F	; 95
    4dca:	b0 e0       	ldi	r27, 0x00	; 0
    4dcc:	ef e5       	ldi	r30, 0x5F	; 95
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	80 81       	ld	r24, Z
    4dd2:	80 68       	ori	r24, 0x80	; 128
    4dd4:	8c 93       	st	X, r24

#endif



}
    4dd6:	cf 91       	pop	r28
    4dd8:	df 91       	pop	r29
    4dda:	08 95       	ret

00004ddc <__vector_11>:


// ISR FOR OVERFLOW TIMER 0 INTERRUPT
void __vector_11(){
    4ddc:	1f 92       	push	r1
    4dde:	0f 92       	push	r0
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	0f 92       	push	r0
    4de4:	11 24       	eor	r1, r1
    4de6:	2f 93       	push	r18
    4de8:	3f 93       	push	r19
    4dea:	4f 93       	push	r20
    4dec:	5f 93       	push	r21
    4dee:	6f 93       	push	r22
    4df0:	7f 93       	push	r23
    4df2:	8f 93       	push	r24
    4df4:	9f 93       	push	r25
    4df6:	af 93       	push	r26
    4df8:	bf 93       	push	r27
    4dfa:	ef 93       	push	r30
    4dfc:	ff 93       	push	r31
    4dfe:	df 93       	push	r29
    4e00:	cf 93       	push	r28
    4e02:	cd b7       	in	r28, 0x3d	; 61
    4e04:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER0_OVF] != NULL){
    4e06:	80 91 91 01 	lds	r24, 0x0191
    4e0a:	90 91 92 01 	lds	r25, 0x0192
    4e0e:	00 97       	sbiw	r24, 0x00	; 0
    4e10:	29 f0       	breq	.+10     	; 0x4e1c <__vector_11+0x40>

		callback_func[TIMER0_OVF]();
    4e12:	e0 91 91 01 	lds	r30, 0x0191
    4e16:	f0 91 92 01 	lds	r31, 0x0192
    4e1a:	09 95       	icall

	}

}
    4e1c:	cf 91       	pop	r28
    4e1e:	df 91       	pop	r29
    4e20:	ff 91       	pop	r31
    4e22:	ef 91       	pop	r30
    4e24:	bf 91       	pop	r27
    4e26:	af 91       	pop	r26
    4e28:	9f 91       	pop	r25
    4e2a:	8f 91       	pop	r24
    4e2c:	7f 91       	pop	r23
    4e2e:	6f 91       	pop	r22
    4e30:	5f 91       	pop	r21
    4e32:	4f 91       	pop	r20
    4e34:	3f 91       	pop	r19
    4e36:	2f 91       	pop	r18
    4e38:	0f 90       	pop	r0
    4e3a:	0f be       	out	0x3f, r0	; 63
    4e3c:	0f 90       	pop	r0
    4e3e:	1f 90       	pop	r1
    4e40:	18 95       	reti

00004e42 <__vector_10>:

// ISR FOR CTC TIMER 0 INTERRUPT
void __vector_10(){
    4e42:	1f 92       	push	r1
    4e44:	0f 92       	push	r0
    4e46:	0f b6       	in	r0, 0x3f	; 63
    4e48:	0f 92       	push	r0
    4e4a:	11 24       	eor	r1, r1
    4e4c:	2f 93       	push	r18
    4e4e:	3f 93       	push	r19
    4e50:	4f 93       	push	r20
    4e52:	5f 93       	push	r21
    4e54:	6f 93       	push	r22
    4e56:	7f 93       	push	r23
    4e58:	8f 93       	push	r24
    4e5a:	9f 93       	push	r25
    4e5c:	af 93       	push	r26
    4e5e:	bf 93       	push	r27
    4e60:	ef 93       	push	r30
    4e62:	ff 93       	push	r31
    4e64:	df 93       	push	r29
    4e66:	cf 93       	push	r28
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER0_COMP] != NULL){
    4e6c:	80 91 93 01 	lds	r24, 0x0193
    4e70:	90 91 94 01 	lds	r25, 0x0194
    4e74:	00 97       	sbiw	r24, 0x00	; 0
    4e76:	29 f0       	breq	.+10     	; 0x4e82 <__vector_10+0x40>

			callback_func[TIMER0_COMP]();
    4e78:	e0 91 93 01 	lds	r30, 0x0193
    4e7c:	f0 91 94 01 	lds	r31, 0x0194
    4e80:	09 95       	icall

		}
}
    4e82:	cf 91       	pop	r28
    4e84:	df 91       	pop	r29
    4e86:	ff 91       	pop	r31
    4e88:	ef 91       	pop	r30
    4e8a:	bf 91       	pop	r27
    4e8c:	af 91       	pop	r26
    4e8e:	9f 91       	pop	r25
    4e90:	8f 91       	pop	r24
    4e92:	7f 91       	pop	r23
    4e94:	6f 91       	pop	r22
    4e96:	5f 91       	pop	r21
    4e98:	4f 91       	pop	r20
    4e9a:	3f 91       	pop	r19
    4e9c:	2f 91       	pop	r18
    4e9e:	0f 90       	pop	r0
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	0f 90       	pop	r0
    4ea4:	1f 90       	pop	r1
    4ea6:	18 95       	reti

00004ea8 <TMR1_mode>:


/*************************** TIMER 1 ***************************/


void TMR1_mode(){
    4ea8:	df 93       	push	r29
    4eaa:	cf 93       	push	r28
    4eac:	cd b7       	in	r28, 0x3d	; 61
    4eae:	de b7       	in	r29, 0x3e	; 62

#if TMR1_MODE == TMR1_NORMAL

	clear_Bit(TCCR1A,WGM10);
    4eb0:	af e4       	ldi	r26, 0x4F	; 79
    4eb2:	b0 e0       	ldi	r27, 0x00	; 0
    4eb4:	ef e4       	ldi	r30, 0x4F	; 79
    4eb6:	f0 e0       	ldi	r31, 0x00	; 0
    4eb8:	80 81       	ld	r24, Z
    4eba:	8e 7f       	andi	r24, 0xFE	; 254
    4ebc:	8c 93       	st	X, r24
	clear_Bit(TCCR1A,WGM11);
    4ebe:	af e4       	ldi	r26, 0x4F	; 79
    4ec0:	b0 e0       	ldi	r27, 0x00	; 0
    4ec2:	ef e4       	ldi	r30, 0x4F	; 79
    4ec4:	f0 e0       	ldi	r31, 0x00	; 0
    4ec6:	80 81       	ld	r24, Z
    4ec8:	8d 7f       	andi	r24, 0xFD	; 253
    4eca:	8c 93       	st	X, r24
	clear_Bit(TCCR1A,WGM12);
    4ecc:	af e4       	ldi	r26, 0x4F	; 79
    4ece:	b0 e0       	ldi	r27, 0x00	; 0
    4ed0:	ef e4       	ldi	r30, 0x4F	; 79
    4ed2:	f0 e0       	ldi	r31, 0x00	; 0
    4ed4:	80 81       	ld	r24, Z
    4ed6:	87 7f       	andi	r24, 0xF7	; 247
    4ed8:	8c 93       	st	X, r24
	clear_Bit(TCCR1A,WGM13);
    4eda:	af e4       	ldi	r26, 0x4F	; 79
    4edc:	b0 e0       	ldi	r27, 0x00	; 0
    4ede:	ef e4       	ldi	r30, 0x4F	; 79
    4ee0:	f0 e0       	ldi	r31, 0x00	; 0
    4ee2:	80 81       	ld	r24, Z
    4ee4:	8f 7e       	andi	r24, 0xEF	; 239
    4ee6:	8c 93       	st	X, r24




#endif
}
    4ee8:	cf 91       	pop	r28
    4eea:	df 91       	pop	r29
    4eec:	08 95       	ret

00004eee <TMR1_OC_Setup>:


void TMR1_OC_Setup(){
    4eee:	df 93       	push	r29
    4ef0:	cf 93       	push	r28
    4ef2:	cd b7       	in	r28, 0x3d	; 61
    4ef4:	de b7       	in	r29, 0x3e	; 62
#endif


#endif

}
    4ef6:	cf 91       	pop	r28
    4ef8:	df 91       	pop	r29
    4efa:	08 95       	ret

00004efc <TMR1_prescallar>:

void TMR1_prescallar(){
    4efc:	df 93       	push	r29
    4efe:	cf 93       	push	r28
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
	clear_Bit(TCCR1B,CS11);
	clear_Bit(TCCR1B,CS12);

#elif TMR1_PRESCALE == TMR1_CLK_8

	set_Bit(TCCR1B,CS11);
    4f04:	ae e4       	ldi	r26, 0x4E	; 78
    4f06:	b0 e0       	ldi	r27, 0x00	; 0
    4f08:	ee e4       	ldi	r30, 0x4E	; 78
    4f0a:	f0 e0       	ldi	r31, 0x00	; 0
    4f0c:	80 81       	ld	r24, Z
    4f0e:	82 60       	ori	r24, 0x02	; 2
    4f10:	8c 93       	st	X, r24
	clear_Bit(TCCR1B,CS10);
    4f12:	ae e4       	ldi	r26, 0x4E	; 78
    4f14:	b0 e0       	ldi	r27, 0x00	; 0
    4f16:	ee e4       	ldi	r30, 0x4E	; 78
    4f18:	f0 e0       	ldi	r31, 0x00	; 0
    4f1a:	80 81       	ld	r24, Z
    4f1c:	8e 7f       	andi	r24, 0xFE	; 254
    4f1e:	8c 93       	st	X, r24
	clear_Bit(TCCR1B,CS12);
    4f20:	ae e4       	ldi	r26, 0x4E	; 78
    4f22:	b0 e0       	ldi	r27, 0x00	; 0
    4f24:	ee e4       	ldi	r30, 0x4E	; 78
    4f26:	f0 e0       	ldi	r31, 0x00	; 0
    4f28:	80 81       	ld	r24, Z
    4f2a:	8b 7f       	andi	r24, 0xFB	; 251
    4f2c:	8c 93       	st	X, r24
#else
#warning "please choose the correct prescaling configuration from the config file"
#endif


}
    4f2e:	cf 91       	pop	r28
    4f30:	df 91       	pop	r29
    4f32:	08 95       	ret

00004f34 <TMR1_loadTCNT1>:


void TMR1_loadTCNT1(u16 value){
    4f34:	df 93       	push	r29
    4f36:	cf 93       	push	r28
    4f38:	00 d0       	rcall	.+0      	; 0x4f3a <TMR1_loadTCNT1+0x6>
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	9a 83       	std	Y+2, r25	; 0x02
    4f40:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = value;
    4f42:	ec e4       	ldi	r30, 0x4C	; 76
    4f44:	f0 e0       	ldi	r31, 0x00	; 0
    4f46:	89 81       	ldd	r24, Y+1	; 0x01
    4f48:	9a 81       	ldd	r25, Y+2	; 0x02
    4f4a:	91 83       	std	Z+1, r25	; 0x01
    4f4c:	80 83       	st	Z, r24
}
    4f4e:	0f 90       	pop	r0
    4f50:	0f 90       	pop	r0
    4f52:	cf 91       	pop	r28
    4f54:	df 91       	pop	r29
    4f56:	08 95       	ret

00004f58 <TMR1_loadOCR1A>:


void TMR1_loadOCR1A(u16 value){
    4f58:	df 93       	push	r29
    4f5a:	cf 93       	push	r28
    4f5c:	00 d0       	rcall	.+0      	; 0x4f5e <TMR1_loadOCR1A+0x6>
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
    4f62:	9a 83       	std	Y+2, r25	; 0x02
    4f64:	89 83       	std	Y+1, r24	; 0x01

	OCR1A = value;
    4f66:	ea e4       	ldi	r30, 0x4A	; 74
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	89 81       	ldd	r24, Y+1	; 0x01
    4f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6e:	91 83       	std	Z+1, r25	; 0x01
    4f70:	80 83       	st	Z, r24

}
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
    4f76:	cf 91       	pop	r28
    4f78:	df 91       	pop	r29
    4f7a:	08 95       	ret

00004f7c <TMR1_loadOCR1B>:

void TMR1_loadOCR1B(u16 value){
    4f7c:	df 93       	push	r29
    4f7e:	cf 93       	push	r28
    4f80:	00 d0       	rcall	.+0      	; 0x4f82 <TMR1_loadOCR1B+0x6>
    4f82:	cd b7       	in	r28, 0x3d	; 61
    4f84:	de b7       	in	r29, 0x3e	; 62
    4f86:	9a 83       	std	Y+2, r25	; 0x02
    4f88:	89 83       	std	Y+1, r24	; 0x01

	OCR1B = value;
    4f8a:	e8 e4       	ldi	r30, 0x48	; 72
    4f8c:	f0 e0       	ldi	r31, 0x00	; 0
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	9a 81       	ldd	r25, Y+2	; 0x02
    4f92:	91 83       	std	Z+1, r25	; 0x01
    4f94:	80 83       	st	Z, r24

}
    4f96:	0f 90       	pop	r0
    4f98:	0f 90       	pop	r0
    4f9a:	cf 91       	pop	r28
    4f9c:	df 91       	pop	r29
    4f9e:	08 95       	ret

00004fa0 <TMR1_Stop>:


void TMR1_Stop(){
    4fa0:	df 93       	push	r29
    4fa2:	cf 93       	push	r28
    4fa4:	cd b7       	in	r28, 0x3d	; 61
    4fa6:	de b7       	in	r29, 0x3e	; 62

	clear_Bit(TCCR1B,CS10);
    4fa8:	ae e4       	ldi	r26, 0x4E	; 78
    4faa:	b0 e0       	ldi	r27, 0x00	; 0
    4fac:	ee e4       	ldi	r30, 0x4E	; 78
    4fae:	f0 e0       	ldi	r31, 0x00	; 0
    4fb0:	80 81       	ld	r24, Z
    4fb2:	8e 7f       	andi	r24, 0xFE	; 254
    4fb4:	8c 93       	st	X, r24
	clear_Bit(TCCR1B,CS11);
    4fb6:	ae e4       	ldi	r26, 0x4E	; 78
    4fb8:	b0 e0       	ldi	r27, 0x00	; 0
    4fba:	ee e4       	ldi	r30, 0x4E	; 78
    4fbc:	f0 e0       	ldi	r31, 0x00	; 0
    4fbe:	80 81       	ld	r24, Z
    4fc0:	8d 7f       	andi	r24, 0xFD	; 253
    4fc2:	8c 93       	st	X, r24
	clear_Bit(TCCR1B,CS12);
    4fc4:	ae e4       	ldi	r26, 0x4E	; 78
    4fc6:	b0 e0       	ldi	r27, 0x00	; 0
    4fc8:	ee e4       	ldi	r30, 0x4E	; 78
    4fca:	f0 e0       	ldi	r31, 0x00	; 0
    4fcc:	80 81       	ld	r24, Z
    4fce:	8b 7f       	andi	r24, 0xFB	; 251
    4fd0:	8c 93       	st	X, r24


}
    4fd2:	cf 91       	pop	r28
    4fd4:	df 91       	pop	r29
    4fd6:	08 95       	ret

00004fd8 <TMR1_Init>:

void TMR1_Init(){
    4fd8:	df 93       	push	r29
    4fda:	cf 93       	push	r28
    4fdc:	cd b7       	in	r28, 0x3d	; 61
    4fde:	de b7       	in	r29, 0x3e	; 62

	TMR1_mode();
    4fe0:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <TMR1_mode>
	TMR1_OC_Setup();
    4fe4:	0e 94 77 27 	call	0x4eee	; 0x4eee <TMR1_OC_Setup>
	TMR1_prescallar();
    4fe8:	0e 94 7e 27 	call	0x4efc	; 0x4efc <TMR1_prescallar>

	ICR1 = TMR1_ICR_VALUE;
    4fec:	e6 e4       	ldi	r30, 0x46	; 70
    4fee:	f0 e0       	ldi	r31, 0x00	; 0
    4ff0:	11 82       	std	Z+1, r1	; 0x01
    4ff2:	10 82       	st	Z, r1
#elif TMR1_OCB_INTERRUPT == ENABLE
	set_Bit(TIMSK, OCIE1B);
	set_Bit(SREG,7);

#elif TMR1_IC_INTERRUPT == ENABLE
	set_Bit(TIMSK, TICIE1);
    4ff4:	a9 e5       	ldi	r26, 0x59	; 89
    4ff6:	b0 e0       	ldi	r27, 0x00	; 0
    4ff8:	e9 e5       	ldi	r30, 0x59	; 89
    4ffa:	f0 e0       	ldi	r31, 0x00	; 0
    4ffc:	80 81       	ld	r24, Z
    4ffe:	80 62       	ori	r24, 0x20	; 32
    5000:	8c 93       	st	X, r24
	set_Bit(SREG,7);
    5002:	af e5       	ldi	r26, 0x5F	; 95
    5004:	b0 e0       	ldi	r27, 0x00	; 0
    5006:	ef e5       	ldi	r30, 0x5F	; 95
    5008:	f0 e0       	ldi	r31, 0x00	; 0
    500a:	80 81       	ld	r24, Z
    500c:	80 68       	ori	r24, 0x80	; 128
    500e:	8c 93       	st	X, r24



#endif

}
    5010:	cf 91       	pop	r28
    5012:	df 91       	pop	r29
    5014:	08 95       	ret

00005016 <TMR1_ICU_Enable>:


/*************************** TIMER 1 ICU ***************************/


void TMR1_ICU_Enable(u8 copy_u8_edge_select){
    5016:	df 93       	push	r29
    5018:	cf 93       	push	r28
    501a:	00 d0       	rcall	.+0      	; 0x501c <TMR1_ICU_Enable+0x6>
    501c:	0f 92       	push	r0
    501e:	cd b7       	in	r28, 0x3d	; 61
    5020:	de b7       	in	r29, 0x3e	; 62
    5022:	89 83       	std	Y+1, r24	; 0x01
	static u8 state = 0;

	if(state == 0){
    5024:	80 91 90 01 	lds	r24, 0x0190
    5028:	88 23       	and	r24, r24
    502a:	41 f4       	brne	.+16     	; 0x503c <TMR1_ICU_Enable+0x26>
	//set icp1 pin to input
	DIO_void_set_pin_dir(PORTD, PIN6, INPUT);
    502c:	83 e0       	ldi	r24, 0x03	; 3
    502e:	66 e0       	ldi	r22, 0x06	; 6
    5030:	40 e0       	ldi	r20, 0x00	; 0
    5032:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>
	state = 1;
    5036:	81 e0       	ldi	r24, 0x01	; 1
    5038:	80 93 90 01 	sts	0x0190, r24
	}
	switch(copy_u8_edge_select){
    503c:	89 81       	ldd	r24, Y+1	; 0x01
    503e:	28 2f       	mov	r18, r24
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	3b 83       	std	Y+3, r19	; 0x03
    5044:	2a 83       	std	Y+2, r18	; 0x02
    5046:	8a 81       	ldd	r24, Y+2	; 0x02
    5048:	9b 81       	ldd	r25, Y+3	; 0x03
    504a:	00 97       	sbiw	r24, 0x00	; 0
    504c:	a1 f0       	breq	.+40     	; 0x5076 <TMR1_ICU_Enable+0x60>
    504e:	2a 81       	ldd	r18, Y+2	; 0x02
    5050:	3b 81       	ldd	r19, Y+3	; 0x03
    5052:	21 30       	cpi	r18, 0x01	; 1
    5054:	31 05       	cpc	r19, r1
    5056:	e9 f4       	brne	.+58     	; 0x5092 <TMR1_ICU_Enable+0x7c>

	case ICU_FALLING_EDGE:
		clear_Bit(TCCR1B,ICES1); // select falling edge for icu
    5058:	ae e4       	ldi	r26, 0x4E	; 78
    505a:	b0 e0       	ldi	r27, 0x00	; 0
    505c:	ee e4       	ldi	r30, 0x4E	; 78
    505e:	f0 e0       	ldi	r31, 0x00	; 0
    5060:	80 81       	ld	r24, Z
    5062:	8f 7b       	andi	r24, 0xBF	; 191
    5064:	8c 93       	st	X, r24
		set_Bit(TCCR1B,ICNC1); // enable noise canceling
    5066:	ae e4       	ldi	r26, 0x4E	; 78
    5068:	b0 e0       	ldi	r27, 0x00	; 0
    506a:	ee e4       	ldi	r30, 0x4E	; 78
    506c:	f0 e0       	ldi	r31, 0x00	; 0
    506e:	80 81       	ld	r24, Z
    5070:	80 68       	ori	r24, 0x80	; 128
    5072:	8c 93       	st	X, r24
    5074:	0e c0       	rjmp	.+28     	; 0x5092 <TMR1_ICU_Enable+0x7c>
		break;

	case ICU_RISING_EDGE:
		set_Bit(TCCR1B,ICES1); // select rising edge for icu
    5076:	ae e4       	ldi	r26, 0x4E	; 78
    5078:	b0 e0       	ldi	r27, 0x00	; 0
    507a:	ee e4       	ldi	r30, 0x4E	; 78
    507c:	f0 e0       	ldi	r31, 0x00	; 0
    507e:	80 81       	ld	r24, Z
    5080:	80 64       	ori	r24, 0x40	; 64
    5082:	8c 93       	st	X, r24
		set_Bit(TCCR1B,ICNC1); // enable noise canceling
    5084:	ae e4       	ldi	r26, 0x4E	; 78
    5086:	b0 e0       	ldi	r27, 0x00	; 0
    5088:	ee e4       	ldi	r30, 0x4E	; 78
    508a:	f0 e0       	ldi	r31, 0x00	; 0
    508c:	80 81       	ld	r24, Z
    508e:	80 68       	ori	r24, 0x80	; 128
    5090:	8c 93       	st	X, r24
		break;


	}
}
    5092:	0f 90       	pop	r0
    5094:	0f 90       	pop	r0
    5096:	0f 90       	pop	r0
    5098:	cf 91       	pop	r28
    509a:	df 91       	pop	r29
    509c:	08 95       	ret

0000509e <TMR1_Clear_value>:

void TMR1_Clear_value(){
    509e:	df 93       	push	r29
    50a0:	cf 93       	push	r28
    50a2:	cd b7       	in	r28, 0x3d	; 61
    50a4:	de b7       	in	r29, 0x3e	; 62

	TCNT1 = 0;
    50a6:	ec e4       	ldi	r30, 0x4C	; 76
    50a8:	f0 e0       	ldi	r31, 0x00	; 0
    50aa:	11 82       	std	Z+1, r1	; 0x01
    50ac:	10 82       	st	Z, r1
}
    50ae:	cf 91       	pop	r28
    50b0:	df 91       	pop	r29
    50b2:	08 95       	ret

000050b4 <TMR1_ICU_Disable>:

void TMR1_ICU_Disable(){
    50b4:	df 93       	push	r29
    50b6:	cf 93       	push	r28
    50b8:	cd b7       	in	r28, 0x3d	; 61
    50ba:	de b7       	in	r29, 0x3e	; 62
	/*
	 * disables icu interrupt
	 *
	 */

	clear_Bit(TIMSK,TICIE1); // disable icu interrupt
    50bc:	a9 e5       	ldi	r26, 0x59	; 89
    50be:	b0 e0       	ldi	r27, 0x00	; 0
    50c0:	e9 e5       	ldi	r30, 0x59	; 89
    50c2:	f0 e0       	ldi	r31, 0x00	; 0
    50c4:	80 81       	ld	r24, Z
    50c6:	8f 7d       	andi	r24, 0xDF	; 223
    50c8:	8c 93       	st	X, r24
}
    50ca:	cf 91       	pop	r28
    50cc:	df 91       	pop	r29
    50ce:	08 95       	ret

000050d0 <TMR1_ICU_read>:

u16 TMR1_ICU_read(){
    50d0:	df 93       	push	r29
    50d2:	cf 93       	push	r28
    50d4:	cd b7       	in	r28, 0x3d	; 61
    50d6:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    50d8:	e6 e4       	ldi	r30, 0x46	; 70
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	80 81       	ld	r24, Z
    50de:	91 81       	ldd	r25, Z+1	; 0x01
}
    50e0:	cf 91       	pop	r28
    50e2:	df 91       	pop	r29
    50e4:	08 95       	ret

000050e6 <TMR1_ICU_Set_TCNT1>:

void TMR1_ICU_Set_TCNT1(u16 value){
    50e6:	df 93       	push	r29
    50e8:	cf 93       	push	r28
    50ea:	00 d0       	rcall	.+0      	; 0x50ec <TMR1_ICU_Set_TCNT1+0x6>
    50ec:	cd b7       	in	r28, 0x3d	; 61
    50ee:	de b7       	in	r29, 0x3e	; 62
    50f0:	9a 83       	std	Y+2, r25	; 0x02
    50f2:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = value;
    50f4:	ec e4       	ldi	r30, 0x4C	; 76
    50f6:	f0 e0       	ldi	r31, 0x00	; 0
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	9a 81       	ldd	r25, Y+2	; 0x02
    50fc:	91 83       	std	Z+1, r25	; 0x01
    50fe:	80 83       	st	Z, r24

}
    5100:	0f 90       	pop	r0
    5102:	0f 90       	pop	r0
    5104:	cf 91       	pop	r28
    5106:	df 91       	pop	r29
    5108:	08 95       	ret

0000510a <__vector_6>:

// ISR for timer1 ICU
void __vector_6(){
    510a:	1f 92       	push	r1
    510c:	0f 92       	push	r0
    510e:	0f b6       	in	r0, 0x3f	; 63
    5110:	0f 92       	push	r0
    5112:	11 24       	eor	r1, r1
    5114:	2f 93       	push	r18
    5116:	3f 93       	push	r19
    5118:	4f 93       	push	r20
    511a:	5f 93       	push	r21
    511c:	6f 93       	push	r22
    511e:	7f 93       	push	r23
    5120:	8f 93       	push	r24
    5122:	9f 93       	push	r25
    5124:	af 93       	push	r26
    5126:	bf 93       	push	r27
    5128:	ef 93       	push	r30
    512a:	ff 93       	push	r31
    512c:	df 93       	push	r29
    512e:	cf 93       	push	r28
    5130:	cd b7       	in	r28, 0x3d	; 61
    5132:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER1_ICU] != NULL){
    5134:	80 91 9b 01 	lds	r24, 0x019B
    5138:	90 91 9c 01 	lds	r25, 0x019C
    513c:	00 97       	sbiw	r24, 0x00	; 0
    513e:	29 f0       	breq	.+10     	; 0x514a <__vector_6+0x40>

			callback_func[TIMER1_ICU]();
    5140:	e0 91 9b 01 	lds	r30, 0x019B
    5144:	f0 91 9c 01 	lds	r31, 0x019C
    5148:	09 95       	icall

		}


}
    514a:	cf 91       	pop	r28
    514c:	df 91       	pop	r29
    514e:	ff 91       	pop	r31
    5150:	ef 91       	pop	r30
    5152:	bf 91       	pop	r27
    5154:	af 91       	pop	r26
    5156:	9f 91       	pop	r25
    5158:	8f 91       	pop	r24
    515a:	7f 91       	pop	r23
    515c:	6f 91       	pop	r22
    515e:	5f 91       	pop	r21
    5160:	4f 91       	pop	r20
    5162:	3f 91       	pop	r19
    5164:	2f 91       	pop	r18
    5166:	0f 90       	pop	r0
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	0f 90       	pop	r0
    516c:	1f 90       	pop	r1
    516e:	18 95       	reti

00005170 <__vector_7>:

// ISR for timer1 on compare channel B
void __vector_7(){
    5170:	1f 92       	push	r1
    5172:	0f 92       	push	r0
    5174:	0f b6       	in	r0, 0x3f	; 63
    5176:	0f 92       	push	r0
    5178:	11 24       	eor	r1, r1
    517a:	2f 93       	push	r18
    517c:	3f 93       	push	r19
    517e:	4f 93       	push	r20
    5180:	5f 93       	push	r21
    5182:	6f 93       	push	r22
    5184:	7f 93       	push	r23
    5186:	8f 93       	push	r24
    5188:	9f 93       	push	r25
    518a:	af 93       	push	r26
    518c:	bf 93       	push	r27
    518e:	ef 93       	push	r30
    5190:	ff 93       	push	r31
    5192:	df 93       	push	r29
    5194:	cf 93       	push	r28
    5196:	cd b7       	in	r28, 0x3d	; 61
    5198:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER1_COMPB] != NULL){
    519a:	80 91 97 01 	lds	r24, 0x0197
    519e:	90 91 98 01 	lds	r25, 0x0198
    51a2:	00 97       	sbiw	r24, 0x00	; 0
    51a4:	29 f0       	breq	.+10     	; 0x51b0 <__vector_7+0x40>

			callback_func[TIMER1_COMPB]();
    51a6:	e0 91 97 01 	lds	r30, 0x0197
    51aa:	f0 91 98 01 	lds	r31, 0x0198
    51ae:	09 95       	icall

		}

}
    51b0:	cf 91       	pop	r28
    51b2:	df 91       	pop	r29
    51b4:	ff 91       	pop	r31
    51b6:	ef 91       	pop	r30
    51b8:	bf 91       	pop	r27
    51ba:	af 91       	pop	r26
    51bc:	9f 91       	pop	r25
    51be:	8f 91       	pop	r24
    51c0:	7f 91       	pop	r23
    51c2:	6f 91       	pop	r22
    51c4:	5f 91       	pop	r21
    51c6:	4f 91       	pop	r20
    51c8:	3f 91       	pop	r19
    51ca:	2f 91       	pop	r18
    51cc:	0f 90       	pop	r0
    51ce:	0f be       	out	0x3f, r0	; 63
    51d0:	0f 90       	pop	r0
    51d2:	1f 90       	pop	r1
    51d4:	18 95       	reti

000051d6 <__vector_8>:
//ISR for timer1 on compare channel A
void __vector_8(){
    51d6:	1f 92       	push	r1
    51d8:	0f 92       	push	r0
    51da:	0f b6       	in	r0, 0x3f	; 63
    51dc:	0f 92       	push	r0
    51de:	11 24       	eor	r1, r1
    51e0:	2f 93       	push	r18
    51e2:	3f 93       	push	r19
    51e4:	4f 93       	push	r20
    51e6:	5f 93       	push	r21
    51e8:	6f 93       	push	r22
    51ea:	7f 93       	push	r23
    51ec:	8f 93       	push	r24
    51ee:	9f 93       	push	r25
    51f0:	af 93       	push	r26
    51f2:	bf 93       	push	r27
    51f4:	ef 93       	push	r30
    51f6:	ff 93       	push	r31
    51f8:	df 93       	push	r29
    51fa:	cf 93       	push	r28
    51fc:	cd b7       	in	r28, 0x3d	; 61
    51fe:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER1_COMPA] != NULL){
    5200:	80 91 99 01 	lds	r24, 0x0199
    5204:	90 91 9a 01 	lds	r25, 0x019A
    5208:	00 97       	sbiw	r24, 0x00	; 0
    520a:	29 f0       	breq	.+10     	; 0x5216 <__vector_8+0x40>

			callback_func[TIMER1_COMPA]();
    520c:	e0 91 99 01 	lds	r30, 0x0199
    5210:	f0 91 9a 01 	lds	r31, 0x019A
    5214:	09 95       	icall

		}



}
    5216:	cf 91       	pop	r28
    5218:	df 91       	pop	r29
    521a:	ff 91       	pop	r31
    521c:	ef 91       	pop	r30
    521e:	bf 91       	pop	r27
    5220:	af 91       	pop	r26
    5222:	9f 91       	pop	r25
    5224:	8f 91       	pop	r24
    5226:	7f 91       	pop	r23
    5228:	6f 91       	pop	r22
    522a:	5f 91       	pop	r21
    522c:	4f 91       	pop	r20
    522e:	3f 91       	pop	r19
    5230:	2f 91       	pop	r18
    5232:	0f 90       	pop	r0
    5234:	0f be       	out	0x3f, r0	; 63
    5236:	0f 90       	pop	r0
    5238:	1f 90       	pop	r1
    523a:	18 95       	reti

0000523c <__vector_9>:
// ISR for timer1 Overflow
void __vector_9(){
    523c:	1f 92       	push	r1
    523e:	0f 92       	push	r0
    5240:	0f b6       	in	r0, 0x3f	; 63
    5242:	0f 92       	push	r0
    5244:	11 24       	eor	r1, r1
    5246:	2f 93       	push	r18
    5248:	3f 93       	push	r19
    524a:	4f 93       	push	r20
    524c:	5f 93       	push	r21
    524e:	6f 93       	push	r22
    5250:	7f 93       	push	r23
    5252:	8f 93       	push	r24
    5254:	9f 93       	push	r25
    5256:	af 93       	push	r26
    5258:	bf 93       	push	r27
    525a:	ef 93       	push	r30
    525c:	ff 93       	push	r31
    525e:	df 93       	push	r29
    5260:	cf 93       	push	r28
    5262:	cd b7       	in	r28, 0x3d	; 61
    5264:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER1_OVF] != NULL){
    5266:	80 91 95 01 	lds	r24, 0x0195
    526a:	90 91 96 01 	lds	r25, 0x0196
    526e:	00 97       	sbiw	r24, 0x00	; 0
    5270:	29 f0       	breq	.+10     	; 0x527c <__vector_9+0x40>

			callback_func[TIMER1_OVF]();
    5272:	e0 91 95 01 	lds	r30, 0x0195
    5276:	f0 91 96 01 	lds	r31, 0x0196
    527a:	09 95       	icall

		}

}
    527c:	cf 91       	pop	r28
    527e:	df 91       	pop	r29
    5280:	ff 91       	pop	r31
    5282:	ef 91       	pop	r30
    5284:	bf 91       	pop	r27
    5286:	af 91       	pop	r26
    5288:	9f 91       	pop	r25
    528a:	8f 91       	pop	r24
    528c:	7f 91       	pop	r23
    528e:	6f 91       	pop	r22
    5290:	5f 91       	pop	r21
    5292:	4f 91       	pop	r20
    5294:	3f 91       	pop	r19
    5296:	2f 91       	pop	r18
    5298:	0f 90       	pop	r0
    529a:	0f be       	out	0x3f, r0	; 63
    529c:	0f 90       	pop	r0
    529e:	1f 90       	pop	r1
    52a0:	18 95       	reti

000052a2 <TMR2_prescaller>:



/*************************** TIMER2 ***************************/

void TMR2_prescaller() {
    52a2:	df 93       	push	r29
    52a4:	cf 93       	push	r28
    52a6:	cd b7       	in	r28, 0x3d	; 61
    52a8:	de b7       	in	r29, 0x3e	; 62
#elif TMR2_PRESCALE == CLOCK_NO_PRESCALE
    set_Bit(TCCR2, CS20);
    clear_Bit(TCCR2, CS21);
    clear_Bit(TCCR2, CS22);
#elif TMR2_PRESCALE == TMR2_CLK_8
    set_Bit(TCCR2, CS21);
    52aa:	a5 e4       	ldi	r26, 0x45	; 69
    52ac:	b0 e0       	ldi	r27, 0x00	; 0
    52ae:	e5 e4       	ldi	r30, 0x45	; 69
    52b0:	f0 e0       	ldi	r31, 0x00	; 0
    52b2:	80 81       	ld	r24, Z
    52b4:	82 60       	ori	r24, 0x02	; 2
    52b6:	8c 93       	st	X, r24
    clear_Bit(TCCR2, CS20);
    52b8:	a5 e4       	ldi	r26, 0x45	; 69
    52ba:	b0 e0       	ldi	r27, 0x00	; 0
    52bc:	e5 e4       	ldi	r30, 0x45	; 69
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	80 81       	ld	r24, Z
    52c2:	8e 7f       	andi	r24, 0xFE	; 254
    52c4:	8c 93       	st	X, r24
    clear_Bit(TCCR2, CS22);
    52c6:	a5 e4       	ldi	r26, 0x45	; 69
    52c8:	b0 e0       	ldi	r27, 0x00	; 0
    52ca:	e5 e4       	ldi	r30, 0x45	; 69
    52cc:	f0 e0       	ldi	r31, 0x00	; 0
    52ce:	80 81       	ld	r24, Z
    52d0:	8b 7f       	andi	r24, 0xFB	; 251
    52d2:	8c 93       	st	X, r24
    set_Bit(TCCR2, CS21);
    set_Bit(TCCR2, CS22);
#else
#warning "Please choose the correct prescaling configuration from the config file"
#endif
}
    52d4:	cf 91       	pop	r28
    52d6:	df 91       	pop	r29
    52d8:	08 95       	ret

000052da <TMR2_OC2_setup>:

void TMR2_OC2_setup() {
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	cd b7       	in	r28, 0x3d	; 61
    52e0:	de b7       	in	r29, 0x3e	; 62
#if TMR2_OC2_MODE == OC_DISCONNECTED
    clear_Bit(TCCR2, COM20);
    52e2:	a5 e4       	ldi	r26, 0x45	; 69
    52e4:	b0 e0       	ldi	r27, 0x00	; 0
    52e6:	e5 e4       	ldi	r30, 0x45	; 69
    52e8:	f0 e0       	ldi	r31, 0x00	; 0
    52ea:	80 81       	ld	r24, Z
    52ec:	8f 7e       	andi	r24, 0xEF	; 239
    52ee:	8c 93       	st	X, r24
    clear_Bit(TCCR2, COM21);
    52f0:	a5 e4       	ldi	r26, 0x45	; 69
    52f2:	b0 e0       	ldi	r27, 0x00	; 0
    52f4:	e5 e4       	ldi	r30, 0x45	; 69
    52f6:	f0 e0       	ldi	r31, 0x00	; 0
    52f8:	80 81       	ld	r24, Z
    52fa:	8f 7d       	andi	r24, 0xDF	; 223
    52fc:	8c 93       	st	X, r24
    set_Bit(TCCR2, COM20);
    set_Bit(TCCR2, COM21);
#else
#warning "Please choose the correct OC2 configuration from the configuration file"
#endif
}
    52fe:	cf 91       	pop	r28
    5300:	df 91       	pop	r29
    5302:	08 95       	ret

00005304 <TMR2_mode>:

void TMR2_mode(){
    5304:	df 93       	push	r29
    5306:	cf 93       	push	r28
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
#if TMR2_MODE == NORMAL_MODE
    clear_Bit(TCCR2, WGM20);
    530c:	a5 e4       	ldi	r26, 0x45	; 69
    530e:	b0 e0       	ldi	r27, 0x00	; 0
    5310:	e5 e4       	ldi	r30, 0x45	; 69
    5312:	f0 e0       	ldi	r31, 0x00	; 0
    5314:	80 81       	ld	r24, Z
    5316:	8f 7b       	andi	r24, 0xBF	; 191
    5318:	8c 93       	st	X, r24
    clear_Bit(TCCR2, WGM21);
    531a:	a5 e4       	ldi	r26, 0x45	; 69
    531c:	b0 e0       	ldi	r27, 0x00	; 0
    531e:	e5 e4       	ldi	r30, 0x45	; 69
    5320:	f0 e0       	ldi	r31, 0x00	; 0
    5322:	80 81       	ld	r24, Z
    5324:	87 7f       	andi	r24, 0xF7	; 247
    5326:	8c 93       	st	X, r24
    set_Bit(TCCR2, WGM20);
    set_Bit(TCCR2, WGM21);
#else
#warning "Please choose the correct Timer2 mode from the configuration file"
#endif
}
    5328:	cf 91       	pop	r28
    532a:	df 91       	pop	r29
    532c:	08 95       	ret

0000532e <TMR2_Stop>:

void TMR2_Stop() {
    532e:	df 93       	push	r29
    5330:	cf 93       	push	r28
    5332:	cd b7       	in	r28, 0x3d	; 61
    5334:	de b7       	in	r29, 0x3e	; 62
    clear_Bit(TCCR2, CS20);
    5336:	a5 e4       	ldi	r26, 0x45	; 69
    5338:	b0 e0       	ldi	r27, 0x00	; 0
    533a:	e5 e4       	ldi	r30, 0x45	; 69
    533c:	f0 e0       	ldi	r31, 0x00	; 0
    533e:	80 81       	ld	r24, Z
    5340:	8e 7f       	andi	r24, 0xFE	; 254
    5342:	8c 93       	st	X, r24
    clear_Bit(TCCR2, CS21);
    5344:	a5 e4       	ldi	r26, 0x45	; 69
    5346:	b0 e0       	ldi	r27, 0x00	; 0
    5348:	e5 e4       	ldi	r30, 0x45	; 69
    534a:	f0 e0       	ldi	r31, 0x00	; 0
    534c:	80 81       	ld	r24, Z
    534e:	8d 7f       	andi	r24, 0xFD	; 253
    5350:	8c 93       	st	X, r24
    clear_Bit(TCCR2, CS22);
    5352:	a5 e4       	ldi	r26, 0x45	; 69
    5354:	b0 e0       	ldi	r27, 0x00	; 0
    5356:	e5 e4       	ldi	r30, 0x45	; 69
    5358:	f0 e0       	ldi	r31, 0x00	; 0
    535a:	80 81       	ld	r24, Z
    535c:	8b 7f       	andi	r24, 0xFB	; 251
    535e:	8c 93       	st	X, r24
}
    5360:	cf 91       	pop	r28
    5362:	df 91       	pop	r29
    5364:	08 95       	ret

00005366 <TMR2_loadTCNT2>:

void TMR2_loadTCNT2(u8 value) {
    5366:	df 93       	push	r29
    5368:	cf 93       	push	r28
    536a:	0f 92       	push	r0
    536c:	cd b7       	in	r28, 0x3d	; 61
    536e:	de b7       	in	r29, 0x3e	; 62
    5370:	89 83       	std	Y+1, r24	; 0x01
    TCNT2 = value;
    5372:	e4 e4       	ldi	r30, 0x44	; 68
    5374:	f0 e0       	ldi	r31, 0x00	; 0
    5376:	89 81       	ldd	r24, Y+1	; 0x01
    5378:	80 83       	st	Z, r24
}
    537a:	0f 90       	pop	r0
    537c:	cf 91       	pop	r28
    537e:	df 91       	pop	r29
    5380:	08 95       	ret

00005382 <TMR2_loadOCR2>:

void TMR2_loadOCR2(u8 value) {
    5382:	df 93       	push	r29
    5384:	cf 93       	push	r28
    5386:	0f 92       	push	r0
    5388:	cd b7       	in	r28, 0x3d	; 61
    538a:	de b7       	in	r29, 0x3e	; 62
    538c:	89 83       	std	Y+1, r24	; 0x01
    OCR2 = value;
    538e:	e3 e4       	ldi	r30, 0x43	; 67
    5390:	f0 e0       	ldi	r31, 0x00	; 0
    5392:	89 81       	ldd	r24, Y+1	; 0x01
    5394:	80 83       	st	Z, r24
}
    5396:	0f 90       	pop	r0
    5398:	cf 91       	pop	r28
    539a:	df 91       	pop	r29
    539c:	08 95       	ret

0000539e <TMR2_Init>:

void TMR2_Init() {
    539e:	df 93       	push	r29
    53a0:	cf 93       	push	r28
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    TMR2_mode();
    53a6:	0e 94 82 29 	call	0x5304	; 0x5304 <TMR2_mode>
    TMR2_OC2_setup();
    53aa:	0e 94 6d 29 	call	0x52da	; 0x52da <TMR2_OC2_setup>
    TMR2_prescaller();
    53ae:	0e 94 51 29 	call	0x52a2	; 0x52a2 <TMR2_prescaller>

#if TMR2_OVF_INTERRUPT == ENABLE && TMR2_OC_INTERRUPT == DISABLE
    // Enable Timer2 overflow interrupt
    set_Bit(TIMSK, TOIE2);
    53b2:	a9 e5       	ldi	r26, 0x59	; 89
    53b4:	b0 e0       	ldi	r27, 0x00	; 0
    53b6:	e9 e5       	ldi	r30, 0x59	; 89
    53b8:	f0 e0       	ldi	r31, 0x00	; 0
    53ba:	80 81       	ld	r24, Z
    53bc:	80 64       	ori	r24, 0x40	; 64
    53be:	8c 93       	st	X, r24
    // Enable global interrupt
    set_Bit(SREG, 7);
    53c0:	af e5       	ldi	r26, 0x5F	; 95
    53c2:	b0 e0       	ldi	r27, 0x00	; 0
    53c4:	ef e5       	ldi	r30, 0x5F	; 95
    53c6:	f0 e0       	ldi	r31, 0x00	; 0
    53c8:	80 81       	ld	r24, Z
    53ca:	80 68       	ori	r24, 0x80	; 128
    53cc:	8c 93       	st	X, r24
    // Enable Timer2 output compare interrupt
    set_Bit(TIMSK, OCIE2);
    // Enable global interrupt
    set_Bit(SREG, 7);
#endif
}
    53ce:	cf 91       	pop	r28
    53d0:	df 91       	pop	r29
    53d2:	08 95       	ret

000053d4 <__vector_5>:

// ISR for Timer2 overflow interrupt
void __vector_5(){
    53d4:	1f 92       	push	r1
    53d6:	0f 92       	push	r0
    53d8:	0f b6       	in	r0, 0x3f	; 63
    53da:	0f 92       	push	r0
    53dc:	11 24       	eor	r1, r1
    53de:	2f 93       	push	r18
    53e0:	3f 93       	push	r19
    53e2:	4f 93       	push	r20
    53e4:	5f 93       	push	r21
    53e6:	6f 93       	push	r22
    53e8:	7f 93       	push	r23
    53ea:	8f 93       	push	r24
    53ec:	9f 93       	push	r25
    53ee:	af 93       	push	r26
    53f0:	bf 93       	push	r27
    53f2:	ef 93       	push	r30
    53f4:	ff 93       	push	r31
    53f6:	df 93       	push	r29
    53f8:	cf 93       	push	r28
    53fa:	cd b7       	in	r28, 0x3d	; 61
    53fc:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER2_OVF] != NULL){
    53fe:	80 91 9d 01 	lds	r24, 0x019D
    5402:	90 91 9e 01 	lds	r25, 0x019E
    5406:	00 97       	sbiw	r24, 0x00	; 0
    5408:	29 f0       	breq	.+10     	; 0x5414 <__vector_5+0x40>

			callback_func[TIMER2_OVF]();
    540a:	e0 91 9d 01 	lds	r30, 0x019D
    540e:	f0 91 9e 01 	lds	r31, 0x019E
    5412:	09 95       	icall

		}

}
    5414:	cf 91       	pop	r28
    5416:	df 91       	pop	r29
    5418:	ff 91       	pop	r31
    541a:	ef 91       	pop	r30
    541c:	bf 91       	pop	r27
    541e:	af 91       	pop	r26
    5420:	9f 91       	pop	r25
    5422:	8f 91       	pop	r24
    5424:	7f 91       	pop	r23
    5426:	6f 91       	pop	r22
    5428:	5f 91       	pop	r21
    542a:	4f 91       	pop	r20
    542c:	3f 91       	pop	r19
    542e:	2f 91       	pop	r18
    5430:	0f 90       	pop	r0
    5432:	0f be       	out	0x3f, r0	; 63
    5434:	0f 90       	pop	r0
    5436:	1f 90       	pop	r1
    5438:	18 95       	reti

0000543a <__vector_4>:

// ISR for Timer2 output compare interrupt
void __vector_4(){
    543a:	1f 92       	push	r1
    543c:	0f 92       	push	r0
    543e:	0f b6       	in	r0, 0x3f	; 63
    5440:	0f 92       	push	r0
    5442:	11 24       	eor	r1, r1
    5444:	2f 93       	push	r18
    5446:	3f 93       	push	r19
    5448:	4f 93       	push	r20
    544a:	5f 93       	push	r21
    544c:	6f 93       	push	r22
    544e:	7f 93       	push	r23
    5450:	8f 93       	push	r24
    5452:	9f 93       	push	r25
    5454:	af 93       	push	r26
    5456:	bf 93       	push	r27
    5458:	ef 93       	push	r30
    545a:	ff 93       	push	r31
    545c:	df 93       	push	r29
    545e:	cf 93       	push	r28
    5460:	cd b7       	in	r28, 0x3d	; 61
    5462:	de b7       	in	r29, 0x3e	; 62

	if(callback_func[TIMER2_COMP] != NULL){
    5464:	80 91 9f 01 	lds	r24, 0x019F
    5468:	90 91 a0 01 	lds	r25, 0x01A0
    546c:	00 97       	sbiw	r24, 0x00	; 0
    546e:	29 f0       	breq	.+10     	; 0x547a <__vector_4+0x40>

			callback_func[TIMER2_COMP]();
    5470:	e0 91 9f 01 	lds	r30, 0x019F
    5474:	f0 91 a0 01 	lds	r31, 0x01A0
    5478:	09 95       	icall

		}


}
    547a:	cf 91       	pop	r28
    547c:	df 91       	pop	r29
    547e:	ff 91       	pop	r31
    5480:	ef 91       	pop	r30
    5482:	bf 91       	pop	r27
    5484:	af 91       	pop	r26
    5486:	9f 91       	pop	r25
    5488:	8f 91       	pop	r24
    548a:	7f 91       	pop	r23
    548c:	6f 91       	pop	r22
    548e:	5f 91       	pop	r21
    5490:	4f 91       	pop	r20
    5492:	3f 91       	pop	r19
    5494:	2f 91       	pop	r18
    5496:	0f 90       	pop	r0
    5498:	0f be       	out	0x3f, r0	; 63
    549a:	0f 90       	pop	r0
    549c:	1f 90       	pop	r1
    549e:	18 95       	reti

000054a0 <WDT_Enable>:

/*************************** WATCHDOG TIMER ***************************/



void WDT_Enable(u8 copy_mode){
    54a0:	df 93       	push	r29
    54a2:	cf 93       	push	r28
    54a4:	0f 92       	push	r0
    54a6:	cd b7       	in	r28, 0x3d	; 61
    54a8:	de b7       	in	r29, 0x3e	; 62
    54aa:	89 83       	std	Y+1, r24	; 0x01

	set_Bit(WDTCR,WDE);
    54ac:	a1 e4       	ldi	r26, 0x41	; 65
    54ae:	b0 e0       	ldi	r27, 0x00	; 0
    54b0:	e1 e4       	ldi	r30, 0x41	; 65
    54b2:	f0 e0       	ldi	r31, 0x00	; 0
    54b4:	80 81       	ld	r24, Z
    54b6:	88 60       	ori	r24, 0x08	; 8
    54b8:	8c 93       	st	X, r24
	SREG |= (1<<7);
    54ba:	af e5       	ldi	r26, 0x5F	; 95
    54bc:	b0 e0       	ldi	r27, 0x00	; 0
    54be:	ef e5       	ldi	r30, 0x5F	; 95
    54c0:	f0 e0       	ldi	r31, 0x00	; 0
    54c2:	80 81       	ld	r24, Z
    54c4:	80 68       	ori	r24, 0x80	; 128
    54c6:	8c 93       	st	X, r24
    WDTCR &= ~((1 << WDP2) | (1 << WDP1) | (1 << WDP0));
    54c8:	a1 e4       	ldi	r26, 0x41	; 65
    54ca:	b0 e0       	ldi	r27, 0x00	; 0
    54cc:	e1 e4       	ldi	r30, 0x41	; 65
    54ce:	f0 e0       	ldi	r31, 0x00	; 0
    54d0:	80 81       	ld	r24, Z
    54d2:	88 7f       	andi	r24, 0xF8	; 248
    54d4:	8c 93       	st	X, r24
	WDTCR |= (0b00000111 & copy_mode);
    54d6:	a1 e4       	ldi	r26, 0x41	; 65
    54d8:	b0 e0       	ldi	r27, 0x00	; 0
    54da:	e1 e4       	ldi	r30, 0x41	; 65
    54dc:	f0 e0       	ldi	r31, 0x00	; 0
    54de:	80 81       	ld	r24, Z
    54e0:	98 2f       	mov	r25, r24
    54e2:	89 81       	ldd	r24, Y+1	; 0x01
    54e4:	87 70       	andi	r24, 0x07	; 7
    54e6:	89 2b       	or	r24, r25
    54e8:	8c 93       	st	X, r24

}
    54ea:	0f 90       	pop	r0
    54ec:	cf 91       	pop	r28
    54ee:	df 91       	pop	r29
    54f0:	08 95       	ret

000054f2 <WDT_Disable>:

void WDT_Disable(){
    54f2:	df 93       	push	r29
    54f4:	cf 93       	push	r28
    54f6:	cd b7       	in	r28, 0x3d	; 61
    54f8:	de b7       	in	r29, 0x3e	; 62

	WDTCR = ((1<<WDTOE) | (1<<WDE));
    54fa:	e1 e4       	ldi	r30, 0x41	; 65
    54fc:	f0 e0       	ldi	r31, 0x00	; 0
    54fe:	88 e1       	ldi	r24, 0x18	; 24
    5500:	80 83       	st	Z, r24
	WDTCR = 0;
    5502:	e1 e4       	ldi	r30, 0x41	; 65
    5504:	f0 e0       	ldi	r31, 0x00	; 0
    5506:	10 82       	st	Z, r1

}
    5508:	cf 91       	pop	r28
    550a:	df 91       	pop	r29
    550c:	08 95       	ret

0000550e <ultraSonicInit>:

static volatile u8 edgeCount = 0;
static volatile u16 dutyCycle = 0;


void ultraSonicInit(){
    550e:	df 93       	push	r29
    5510:	cf 93       	push	r28
    5512:	cd b7       	in	r28, 0x3d	; 61
    5514:	de b7       	in	r29, 0x3e	; 62
	 *  - set icp1 pin direction to input
	 *  - set callback function (edge calculations)
	 *  - set trigger pin to output
	 */

	TMR1_Init();
    5516:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <TMR1_Init>
	TMR1_ICU_Enable(ICU_RISING_EDGE);
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	0e 94 0b 28 	call	0x5016	; 0x5016 <TMR1_ICU_Enable>
	Timer_set_Callback_Func(TIMER1_ICU, ultraSonicEdgeCalc);
    5520:	2d e9       	ldi	r18, 0x9D	; 157
    5522:	3b e2       	ldi	r19, 0x2B	; 43
    5524:	85 e0       	ldi	r24, 0x05	; 5
    5526:	b9 01       	movw	r22, r18
    5528:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <Timer_set_Callback_Func>
	DIO_void_set_pin_dir(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, OUTPUT);
    552c:	82 e0       	ldi	r24, 0x02	; 2
    552e:	65 e0       	ldi	r22, 0x05	; 5
    5530:	41 e0       	ldi	r20, 0x01	; 1
    5532:	0e 94 8e 07 	call	0xf1c	; 0xf1c <DIO_void_set_pin_dir>

}
    5536:	cf 91       	pop	r28
    5538:	df 91       	pop	r29
    553a:	08 95       	ret

0000553c <ultraSonicPulse>:


static void ultraSonicPulse(){
    553c:	df 93       	push	r29
    553e:	cf 93       	push	r28
    5540:	cd b7       	in	r28, 0x3d	; 61
    5542:	de b7       	in	r29, 0x3e	; 62
    5544:	68 97       	sbiw	r28, 0x18	; 24
    5546:	0f b6       	in	r0, 0x3f	; 63
    5548:	f8 94       	cli
    554a:	de bf       	out	0x3e, r29	; 62
    554c:	0f be       	out	0x3f, r0	; 63
    554e:	cd bf       	out	0x3d, r28	; 61

	/*
	 *  send pulse to trigger pin each 10 us
	 */

	DIO_void_set_pin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN);
    5550:	82 e0       	ldi	r24, 0x02	; 2
    5552:	65 e0       	ldi	r22, 0x05	; 5
    5554:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_void_set_pin>
    5558:	80 e0       	ldi	r24, 0x00	; 0
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	a0 e2       	ldi	r26, 0x20	; 32
    555e:	b1 e4       	ldi	r27, 0x41	; 65
    5560:	8d 8b       	std	Y+21, r24	; 0x15
    5562:	9e 8b       	std	Y+22, r25	; 0x16
    5564:	af 8b       	std	Y+23, r26	; 0x17
    5566:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5568:	6d 89       	ldd	r22, Y+21	; 0x15
    556a:	7e 89       	ldd	r23, Y+22	; 0x16
    556c:	8f 89       	ldd	r24, Y+23	; 0x17
    556e:	98 8d       	ldd	r25, Y+24	; 0x18
    5570:	2b ea       	ldi	r18, 0xAB	; 171
    5572:	3a ea       	ldi	r19, 0xAA	; 170
    5574:	4a e2       	ldi	r20, 0x2A	; 42
    5576:	50 e4       	ldi	r21, 0x40	; 64
    5578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    557c:	dc 01       	movw	r26, r24
    557e:	cb 01       	movw	r24, r22
    5580:	89 8b       	std	Y+17, r24	; 0x11
    5582:	9a 8b       	std	Y+18, r25	; 0x12
    5584:	ab 8b       	std	Y+19, r26	; 0x13
    5586:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5588:	69 89       	ldd	r22, Y+17	; 0x11
    558a:	7a 89       	ldd	r23, Y+18	; 0x12
    558c:	8b 89       	ldd	r24, Y+19	; 0x13
    558e:	9c 89       	ldd	r25, Y+20	; 0x14
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	40 e8       	ldi	r20, 0x80	; 128
    5596:	5f e3       	ldi	r21, 0x3F	; 63
    5598:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    559c:	88 23       	and	r24, r24
    559e:	1c f4       	brge	.+6      	; 0x55a6 <ultraSonicPulse+0x6a>
		__ticks = 1;
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	88 8b       	std	Y+16, r24	; 0x10
    55a4:	91 c0       	rjmp	.+290    	; 0x56c8 <ultraSonicPulse+0x18c>
	else if (__tmp > 255)
    55a6:	69 89       	ldd	r22, Y+17	; 0x11
    55a8:	7a 89       	ldd	r23, Y+18	; 0x12
    55aa:	8b 89       	ldd	r24, Y+19	; 0x13
    55ac:	9c 89       	ldd	r25, Y+20	; 0x14
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	4f e7       	ldi	r20, 0x7F	; 127
    55b4:	53 e4       	ldi	r21, 0x43	; 67
    55b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55ba:	18 16       	cp	r1, r24
    55bc:	0c f0       	brlt	.+2      	; 0x55c0 <ultraSonicPulse+0x84>
    55be:	7b c0       	rjmp	.+246    	; 0x56b6 <ultraSonicPulse+0x17a>
	{
		_delay_ms(__us / 1000.0);
    55c0:	6d 89       	ldd	r22, Y+21	; 0x15
    55c2:	7e 89       	ldd	r23, Y+22	; 0x16
    55c4:	8f 89       	ldd	r24, Y+23	; 0x17
    55c6:	98 8d       	ldd	r25, Y+24	; 0x18
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	30 e0       	ldi	r19, 0x00	; 0
    55cc:	4a e7       	ldi	r20, 0x7A	; 122
    55ce:	54 e4       	ldi	r21, 0x44	; 68
    55d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    55d4:	dc 01       	movw	r26, r24
    55d6:	cb 01       	movw	r24, r22
    55d8:	8c 87       	std	Y+12, r24	; 0x0c
    55da:	9d 87       	std	Y+13, r25	; 0x0d
    55dc:	ae 87       	std	Y+14, r26	; 0x0e
    55de:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    55e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    55e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    55e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	4a ef       	ldi	r20, 0xFA	; 250
    55ee:	54 e4       	ldi	r21, 0x44	; 68
    55f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	88 87       	std	Y+8, r24	; 0x08
    55fa:	99 87       	std	Y+9, r25	; 0x09
    55fc:	aa 87       	std	Y+10, r26	; 0x0a
    55fe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5600:	68 85       	ldd	r22, Y+8	; 0x08
    5602:	79 85       	ldd	r23, Y+9	; 0x09
    5604:	8a 85       	ldd	r24, Y+10	; 0x0a
    5606:	9b 85       	ldd	r25, Y+11	; 0x0b
    5608:	20 e0       	ldi	r18, 0x00	; 0
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	40 e8       	ldi	r20, 0x80	; 128
    560e:	5f e3       	ldi	r21, 0x3F	; 63
    5610:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5614:	88 23       	and	r24, r24
    5616:	2c f4       	brge	.+10     	; 0x5622 <ultraSonicPulse+0xe6>
		__ticks = 1;
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	9f 83       	std	Y+7, r25	; 0x07
    561e:	8e 83       	std	Y+6, r24	; 0x06
    5620:	3f c0       	rjmp	.+126    	; 0x56a0 <ultraSonicPulse+0x164>
	else if (__tmp > 65535)
    5622:	68 85       	ldd	r22, Y+8	; 0x08
    5624:	79 85       	ldd	r23, Y+9	; 0x09
    5626:	8a 85       	ldd	r24, Y+10	; 0x0a
    5628:	9b 85       	ldd	r25, Y+11	; 0x0b
    562a:	20 e0       	ldi	r18, 0x00	; 0
    562c:	3f ef       	ldi	r19, 0xFF	; 255
    562e:	4f e7       	ldi	r20, 0x7F	; 127
    5630:	57 e4       	ldi	r21, 0x47	; 71
    5632:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5636:	18 16       	cp	r1, r24
    5638:	4c f5       	brge	.+82     	; 0x568c <ultraSonicPulse+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    563a:	6c 85       	ldd	r22, Y+12	; 0x0c
    563c:	7d 85       	ldd	r23, Y+13	; 0x0d
    563e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5640:	9f 85       	ldd	r25, Y+15	; 0x0f
    5642:	20 e0       	ldi	r18, 0x00	; 0
    5644:	30 e0       	ldi	r19, 0x00	; 0
    5646:	40 e2       	ldi	r20, 0x20	; 32
    5648:	51 e4       	ldi	r21, 0x41	; 65
    564a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    564e:	dc 01       	movw	r26, r24
    5650:	cb 01       	movw	r24, r22
    5652:	bc 01       	movw	r22, r24
    5654:	cd 01       	movw	r24, r26
    5656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    565a:	dc 01       	movw	r26, r24
    565c:	cb 01       	movw	r24, r22
    565e:	9f 83       	std	Y+7, r25	; 0x07
    5660:	8e 83       	std	Y+6, r24	; 0x06
    5662:	0f c0       	rjmp	.+30     	; 0x5682 <ultraSonicPulse+0x146>
    5664:	88 ec       	ldi	r24, 0xC8	; 200
    5666:	90 e0       	ldi	r25, 0x00	; 0
    5668:	9d 83       	std	Y+5, r25	; 0x05
    566a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    566c:	8c 81       	ldd	r24, Y+4	; 0x04
    566e:	9d 81       	ldd	r25, Y+5	; 0x05
    5670:	01 97       	sbiw	r24, 0x01	; 1
    5672:	f1 f7       	brne	.-4      	; 0x5670 <ultraSonicPulse+0x134>
    5674:	9d 83       	std	Y+5, r25	; 0x05
    5676:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5678:	8e 81       	ldd	r24, Y+6	; 0x06
    567a:	9f 81       	ldd	r25, Y+7	; 0x07
    567c:	01 97       	sbiw	r24, 0x01	; 1
    567e:	9f 83       	std	Y+7, r25	; 0x07
    5680:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5682:	8e 81       	ldd	r24, Y+6	; 0x06
    5684:	9f 81       	ldd	r25, Y+7	; 0x07
    5686:	00 97       	sbiw	r24, 0x00	; 0
    5688:	69 f7       	brne	.-38     	; 0x5664 <ultraSonicPulse+0x128>
    568a:	24 c0       	rjmp	.+72     	; 0x56d4 <ultraSonicPulse+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    568c:	68 85       	ldd	r22, Y+8	; 0x08
    568e:	79 85       	ldd	r23, Y+9	; 0x09
    5690:	8a 85       	ldd	r24, Y+10	; 0x0a
    5692:	9b 85       	ldd	r25, Y+11	; 0x0b
    5694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5698:	dc 01       	movw	r26, r24
    569a:	cb 01       	movw	r24, r22
    569c:	9f 83       	std	Y+7, r25	; 0x07
    569e:	8e 83       	std	Y+6, r24	; 0x06
    56a0:	8e 81       	ldd	r24, Y+6	; 0x06
    56a2:	9f 81       	ldd	r25, Y+7	; 0x07
    56a4:	9b 83       	std	Y+3, r25	; 0x03
    56a6:	8a 83       	std	Y+2, r24	; 0x02
    56a8:	8a 81       	ldd	r24, Y+2	; 0x02
    56aa:	9b 81       	ldd	r25, Y+3	; 0x03
    56ac:	01 97       	sbiw	r24, 0x01	; 1
    56ae:	f1 f7       	brne	.-4      	; 0x56ac <ultraSonicPulse+0x170>
    56b0:	9b 83       	std	Y+3, r25	; 0x03
    56b2:	8a 83       	std	Y+2, r24	; 0x02
    56b4:	0f c0       	rjmp	.+30     	; 0x56d4 <ultraSonicPulse+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    56b6:	69 89       	ldd	r22, Y+17	; 0x11
    56b8:	7a 89       	ldd	r23, Y+18	; 0x12
    56ba:	8b 89       	ldd	r24, Y+19	; 0x13
    56bc:	9c 89       	ldd	r25, Y+20	; 0x14
    56be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56c2:	dc 01       	movw	r26, r24
    56c4:	cb 01       	movw	r24, r22
    56c6:	88 8b       	std	Y+16, r24	; 0x10
    56c8:	88 89       	ldd	r24, Y+16	; 0x10
    56ca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	8a 95       	dec	r24
    56d0:	f1 f7       	brne	.-4      	; 0x56ce <ultraSonicPulse+0x192>
    56d2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	DIO_void_clear_pin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN);
    56d4:	82 e0       	ldi	r24, 0x02	; 2
    56d6:	65 e0       	ldi	r22, 0x05	; 5
    56d8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DIO_void_clear_pin>
}
    56dc:	68 96       	adiw	r28, 0x18	; 24
    56de:	0f b6       	in	r0, 0x3f	; 63
    56e0:	f8 94       	cli
    56e2:	de bf       	out	0x3e, r29	; 62
    56e4:	0f be       	out	0x3f, r0	; 63
    56e6:	cd bf       	out	0x3d, r28	; 61
    56e8:	cf 91       	pop	r28
    56ea:	df 91       	pop	r29
    56ec:	08 95       	ret

000056ee <ultraSonicReadDistance>:


u16 ultraSonicReadDistance(){
    56ee:	df 93       	push	r29
    56f0:	cf 93       	push	r28
    56f2:	cd b7       	in	r28, 0x3d	; 61
    56f4:	de b7       	in	r29, 0x3e	; 62

	ultraSonicPulse();
    56f6:	0e 94 9e 2a 	call	0x553c	; 0x553c <ultraSonicPulse>

	return (0.0173 * dutyCycle);
    56fa:	80 91 a2 01 	lds	r24, 0x01A2
    56fe:	90 91 a3 01 	lds	r25, 0x01A3
    5702:	cc 01       	movw	r24, r24
    5704:	a0 e0       	ldi	r26, 0x00	; 0
    5706:	b0 e0       	ldi	r27, 0x00	; 0
    5708:	bc 01       	movw	r22, r24
    570a:	cd 01       	movw	r24, r26
    570c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    5710:	dc 01       	movw	r26, r24
    5712:	cb 01       	movw	r24, r22
    5714:	bc 01       	movw	r22, r24
    5716:	cd 01       	movw	r24, r26
    5718:	2b eb       	ldi	r18, 0xBB	; 187
    571a:	38 eb       	ldi	r19, 0xB8	; 184
    571c:	4d e8       	ldi	r20, 0x8D	; 141
    571e:	5c e3       	ldi	r21, 0x3C	; 60
    5720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5724:	dc 01       	movw	r26, r24
    5726:	cb 01       	movw	r24, r22
    5728:	bc 01       	movw	r22, r24
    572a:	cd 01       	movw	r24, r26
    572c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5730:	dc 01       	movw	r26, r24
    5732:	cb 01       	movw	r24, r22


}
    5734:	cf 91       	pop	r28
    5736:	df 91       	pop	r29
    5738:	08 95       	ret

0000573a <ultraSonicEdgeCalc>:


void ultraSonicEdgeCalc(){
    573a:	df 93       	push	r29
    573c:	cf 93       	push	r28
    573e:	cd b7       	in	r28, 0x3d	; 61
    5740:	de b7       	in	r29, 0x3e	; 62
	 *  and will be called everytime the isr is called (in a rising edge or in a fallin edge)
	 *
	 */

	//increment counter
	edgeCount ++;
    5742:	80 91 a1 01 	lds	r24, 0x01A1
    5746:	8f 5f       	subi	r24, 0xFF	; 255
    5748:	80 93 a1 01 	sts	0x01A1, r24

	if(edgeCount == 1){
    574c:	80 91 a1 01 	lds	r24, 0x01A1
    5750:	81 30       	cpi	r24, 0x01	; 1
    5752:	31 f4       	brne	.+12     	; 0x5760 <ultraSonicEdgeCalc+0x26>

		//clear timer value
		TMR1_Clear_value();
    5754:	0e 94 4f 28 	call	0x509e	; 0x509e <TMR1_Clear_value>


		// change the sensing control to detect falling edge on the echo pin
		TMR1_ICU_Enable(ICU_FALLING_EDGE);
    5758:	81 e0       	ldi	r24, 0x01	; 1
    575a:	0e 94 0b 28 	call	0x5016	; 0x5016 <TMR1_ICU_Enable>
    575e:	11 c0       	rjmp	.+34     	; 0x5782 <ultraSonicEdgeCalc+0x48>

	}else if (edgeCount == 2){
    5760:	80 91 a1 01 	lds	r24, 0x01A1
    5764:	82 30       	cpi	r24, 0x02	; 2
    5766:	69 f4       	brne	.+26     	; 0x5782 <ultraSonicEdgeCalc+0x48>

		//store the on time of the pulse in the global var
		dutyCycle = TMR1_ICU_read();
    5768:	0e 94 68 28 	call	0x50d0	; 0x50d0 <TMR1_ICU_read>
    576c:	90 93 a3 01 	sts	0x01A3, r25
    5770:	80 93 a2 01 	sts	0x01A2, r24

		// change the sensing control to detect rising edge on the echo pin
		TMR1_ICU_Enable(ICU_RISING_EDGE);
    5774:	80 e0       	ldi	r24, 0x00	; 0
    5776:	0e 94 0b 28 	call	0x5016	; 0x5016 <TMR1_ICU_Enable>

		//clear timer value

		TMR1_Clear_value();
    577a:	0e 94 4f 28 	call	0x509e	; 0x509e <TMR1_Clear_value>

		//reset counter
		edgeCount = 0;
    577e:	10 92 a1 01 	sts	0x01A1, r1

	}


}
    5782:	cf 91       	pop	r28
    5784:	df 91       	pop	r29
    5786:	08 95       	ret

00005788 <main>:

#include "LCD_Interface.h"
#include "UltraSonic_Sensor_Interface.h"


int main(){
    5788:	df 93       	push	r29
    578a:	cf 93       	push	r28
    578c:	00 d0       	rcall	.+0      	; 0x578e <main+0x6>
    578e:	cd b7       	in	r28, 0x3d	; 61
    5790:	de b7       	in	r29, 0x3e	; 62


	u16 distance = 0;
    5792:	1a 82       	std	Y+2, r1	; 0x02
    5794:	19 82       	std	Y+1, r1	; 0x01

	//initialize lcd and ultrasonic sensor
	LCD_init();
    5796:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <LCD_init>
	ultraSonicInit();
    579a:	0e 94 87 2a 	call	0x550e	; 0x550e <ultraSonicInit>


	//write fixed text on lcd
	LCD_write_string((u8*)"Distance =   cm");
    579e:	80 e6       	ldi	r24, 0x60	; 96
    57a0:	90 e0       	ldi	r25, 0x00	; 0
    57a2:	0e 94 ef 24 	call	0x49de	; 0x49de <LCD_write_string>


	while(1){

		//get readings and store it in variable distance
		distance = ultraSonicReadDistance();
    57a6:	0e 94 77 2b 	call	0x56ee	; 0x56ee <ultraSonicReadDistance>
    57aa:	9a 83       	std	Y+2, r25	; 0x02
    57ac:	89 83       	std	Y+1, r24	; 0x01

		LCD_set_cursor(0, 10);
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	6a e0       	ldi	r22, 0x0A	; 10
    57b2:	0e 94 8e 20 	call	0x411c	; 0x411c <LCD_set_cursor>

		LCD_write_number((s32)distance);
    57b6:	89 81       	ldd	r24, Y+1	; 0x01
    57b8:	9a 81       	ldd	r25, Y+2	; 0x02
    57ba:	cc 01       	movw	r24, r24
    57bc:	a0 e0       	ldi	r26, 0x00	; 0
    57be:	b0 e0       	ldi	r27, 0x00	; 0
    57c0:	bc 01       	movw	r22, r24
    57c2:	cd 01       	movw	r24, r26
    57c4:	0e 94 18 25 	call	0x4a30	; 0x4a30 <LCD_write_number>



		if(distance < 100 || distance < 10){
    57c8:	89 81       	ldd	r24, Y+1	; 0x01
    57ca:	9a 81       	ldd	r25, Y+2	; 0x02
    57cc:	84 36       	cpi	r24, 0x64	; 100
    57ce:	91 05       	cpc	r25, r1
    57d0:	28 f0       	brcs	.+10     	; 0x57dc <main+0x54>
    57d2:	89 81       	ldd	r24, Y+1	; 0x01
    57d4:	9a 81       	ldd	r25, Y+2	; 0x02
    57d6:	8a 30       	cpi	r24, 0x0A	; 10
    57d8:	91 05       	cpc	r25, r1
    57da:	28 f7       	brcc	.-54     	; 0x57a6 <main+0x1e>
			LCD_write_char(' ');
    57dc:	80 e2       	ldi	r24, 0x20	; 32
    57de:	0e 94 1a 24 	call	0x4834	; 0x4834 <LCD_write_char>
    57e2:	e1 cf       	rjmp	.-62     	; 0x57a6 <main+0x1e>

000057e4 <__mulsi3>:
    57e4:	62 9f       	mul	r22, r18
    57e6:	d0 01       	movw	r26, r0
    57e8:	73 9f       	mul	r23, r19
    57ea:	f0 01       	movw	r30, r0
    57ec:	82 9f       	mul	r24, r18
    57ee:	e0 0d       	add	r30, r0
    57f0:	f1 1d       	adc	r31, r1
    57f2:	64 9f       	mul	r22, r20
    57f4:	e0 0d       	add	r30, r0
    57f6:	f1 1d       	adc	r31, r1
    57f8:	92 9f       	mul	r25, r18
    57fa:	f0 0d       	add	r31, r0
    57fc:	83 9f       	mul	r24, r19
    57fe:	f0 0d       	add	r31, r0
    5800:	74 9f       	mul	r23, r20
    5802:	f0 0d       	add	r31, r0
    5804:	65 9f       	mul	r22, r21
    5806:	f0 0d       	add	r31, r0
    5808:	99 27       	eor	r25, r25
    580a:	72 9f       	mul	r23, r18
    580c:	b0 0d       	add	r27, r0
    580e:	e1 1d       	adc	r30, r1
    5810:	f9 1f       	adc	r31, r25
    5812:	63 9f       	mul	r22, r19
    5814:	b0 0d       	add	r27, r0
    5816:	e1 1d       	adc	r30, r1
    5818:	f9 1f       	adc	r31, r25
    581a:	bd 01       	movw	r22, r26
    581c:	cf 01       	movw	r24, r30
    581e:	11 24       	eor	r1, r1
    5820:	08 95       	ret

00005822 <__divmodsi4>:
    5822:	97 fb       	bst	r25, 7
    5824:	09 2e       	mov	r0, r25
    5826:	05 26       	eor	r0, r21
    5828:	0e d0       	rcall	.+28     	; 0x5846 <__divmodsi4_neg1>
    582a:	57 fd       	sbrc	r21, 7
    582c:	04 d0       	rcall	.+8      	; 0x5836 <__divmodsi4_neg2>
    582e:	14 d0       	rcall	.+40     	; 0x5858 <__udivmodsi4>
    5830:	0a d0       	rcall	.+20     	; 0x5846 <__divmodsi4_neg1>
    5832:	00 1c       	adc	r0, r0
    5834:	38 f4       	brcc	.+14     	; 0x5844 <__divmodsi4_exit>

00005836 <__divmodsi4_neg2>:
    5836:	50 95       	com	r21
    5838:	40 95       	com	r20
    583a:	30 95       	com	r19
    583c:	21 95       	neg	r18
    583e:	3f 4f       	sbci	r19, 0xFF	; 255
    5840:	4f 4f       	sbci	r20, 0xFF	; 255
    5842:	5f 4f       	sbci	r21, 0xFF	; 255

00005844 <__divmodsi4_exit>:
    5844:	08 95       	ret

00005846 <__divmodsi4_neg1>:
    5846:	f6 f7       	brtc	.-4      	; 0x5844 <__divmodsi4_exit>
    5848:	90 95       	com	r25
    584a:	80 95       	com	r24
    584c:	70 95       	com	r23
    584e:	61 95       	neg	r22
    5850:	7f 4f       	sbci	r23, 0xFF	; 255
    5852:	8f 4f       	sbci	r24, 0xFF	; 255
    5854:	9f 4f       	sbci	r25, 0xFF	; 255
    5856:	08 95       	ret

00005858 <__udivmodsi4>:
    5858:	a1 e2       	ldi	r26, 0x21	; 33
    585a:	1a 2e       	mov	r1, r26
    585c:	aa 1b       	sub	r26, r26
    585e:	bb 1b       	sub	r27, r27
    5860:	fd 01       	movw	r30, r26
    5862:	0d c0       	rjmp	.+26     	; 0x587e <__udivmodsi4_ep>

00005864 <__udivmodsi4_loop>:
    5864:	aa 1f       	adc	r26, r26
    5866:	bb 1f       	adc	r27, r27
    5868:	ee 1f       	adc	r30, r30
    586a:	ff 1f       	adc	r31, r31
    586c:	a2 17       	cp	r26, r18
    586e:	b3 07       	cpc	r27, r19
    5870:	e4 07       	cpc	r30, r20
    5872:	f5 07       	cpc	r31, r21
    5874:	20 f0       	brcs	.+8      	; 0x587e <__udivmodsi4_ep>
    5876:	a2 1b       	sub	r26, r18
    5878:	b3 0b       	sbc	r27, r19
    587a:	e4 0b       	sbc	r30, r20
    587c:	f5 0b       	sbc	r31, r21

0000587e <__udivmodsi4_ep>:
    587e:	66 1f       	adc	r22, r22
    5880:	77 1f       	adc	r23, r23
    5882:	88 1f       	adc	r24, r24
    5884:	99 1f       	adc	r25, r25
    5886:	1a 94       	dec	r1
    5888:	69 f7       	brne	.-38     	; 0x5864 <__udivmodsi4_loop>
    588a:	60 95       	com	r22
    588c:	70 95       	com	r23
    588e:	80 95       	com	r24
    5890:	90 95       	com	r25
    5892:	9b 01       	movw	r18, r22
    5894:	ac 01       	movw	r20, r24
    5896:	bd 01       	movw	r22, r26
    5898:	cf 01       	movw	r24, r30
    589a:	08 95       	ret

0000589c <__prologue_saves__>:
    589c:	2f 92       	push	r2
    589e:	3f 92       	push	r3
    58a0:	4f 92       	push	r4
    58a2:	5f 92       	push	r5
    58a4:	6f 92       	push	r6
    58a6:	7f 92       	push	r7
    58a8:	8f 92       	push	r8
    58aa:	9f 92       	push	r9
    58ac:	af 92       	push	r10
    58ae:	bf 92       	push	r11
    58b0:	cf 92       	push	r12
    58b2:	df 92       	push	r13
    58b4:	ef 92       	push	r14
    58b6:	ff 92       	push	r15
    58b8:	0f 93       	push	r16
    58ba:	1f 93       	push	r17
    58bc:	cf 93       	push	r28
    58be:	df 93       	push	r29
    58c0:	cd b7       	in	r28, 0x3d	; 61
    58c2:	de b7       	in	r29, 0x3e	; 62
    58c4:	ca 1b       	sub	r28, r26
    58c6:	db 0b       	sbc	r29, r27
    58c8:	0f b6       	in	r0, 0x3f	; 63
    58ca:	f8 94       	cli
    58cc:	de bf       	out	0x3e, r29	; 62
    58ce:	0f be       	out	0x3f, r0	; 63
    58d0:	cd bf       	out	0x3d, r28	; 61
    58d2:	09 94       	ijmp

000058d4 <__epilogue_restores__>:
    58d4:	2a 88       	ldd	r2, Y+18	; 0x12
    58d6:	39 88       	ldd	r3, Y+17	; 0x11
    58d8:	48 88       	ldd	r4, Y+16	; 0x10
    58da:	5f 84       	ldd	r5, Y+15	; 0x0f
    58dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    58de:	7d 84       	ldd	r7, Y+13	; 0x0d
    58e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    58e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    58e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    58e6:	b9 84       	ldd	r11, Y+9	; 0x09
    58e8:	c8 84       	ldd	r12, Y+8	; 0x08
    58ea:	df 80       	ldd	r13, Y+7	; 0x07
    58ec:	ee 80       	ldd	r14, Y+6	; 0x06
    58ee:	fd 80       	ldd	r15, Y+5	; 0x05
    58f0:	0c 81       	ldd	r16, Y+4	; 0x04
    58f2:	1b 81       	ldd	r17, Y+3	; 0x03
    58f4:	aa 81       	ldd	r26, Y+2	; 0x02
    58f6:	b9 81       	ldd	r27, Y+1	; 0x01
    58f8:	ce 0f       	add	r28, r30
    58fa:	d1 1d       	adc	r29, r1
    58fc:	0f b6       	in	r0, 0x3f	; 63
    58fe:	f8 94       	cli
    5900:	de bf       	out	0x3e, r29	; 62
    5902:	0f be       	out	0x3f, r0	; 63
    5904:	cd bf       	out	0x3d, r28	; 61
    5906:	ed 01       	movw	r28, r26
    5908:	08 95       	ret

0000590a <_exit>:
    590a:	f8 94       	cli

0000590c <__stop_program>:
    590c:	ff cf       	rjmp	.-2      	; 0x590c <__stop_program>
